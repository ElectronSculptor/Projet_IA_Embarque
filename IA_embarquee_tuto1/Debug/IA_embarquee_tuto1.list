
IA_embarquee_tuto1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f18  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003404  0800a0e0  0800a0e0  0000b0e0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4e4  0800d4e4  0000f980  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4e4  0800d4e4  0000e4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4ec  0800d4ec  0000f980  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4ec  0800d4ec  0000e4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d4f0  0800d4f0  0000e4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000980  20000000  0800d4f4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b58  20000980  0800de74  0000f980  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20040000  20040000  00010000  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f980  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c694  00000000  00000000  0000f9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a80  00000000  00000000  0002c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000114d  00000000  00000000  00031120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000343d8  00000000  00000000  0003226d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0df  00000000  00000000  00066645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001389f6  00000000  00000000  00084724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001bd11a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000678c  00000000  00000000  001bd1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  001c392c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000980 	.word	0x20000980
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800a0c0 	.word	0x0800a0c0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000984 	.word	0x20000984
 80001fc:	0800a0c0 	.word	0x0800a0c0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f001 f8c3 	bl	800171e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f815 	bl	80005c6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 fa78 	bl	8000a90 <MX_GPIO_Init>
  MX_FMC_Init();
 80005a0:	f000 fa10 	bl	80009c4 <MX_FMC_Init>
  MX_I2C1_Init();
 80005a4:	f000 f862 	bl	800066c <MX_I2C1_Init>
  MX_SAI1_Init();
 80005a8:	f000 f8a0 	bl	80006ec <MX_SAI1_Init>
  MX_SPI2_Init();
 80005ac:	f000 f906 	bl	80007bc <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80005b0:	f000 f942 	bl	8000838 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f98c 	bl	80008d0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f9d6 	bl	8000968 <MX_USB_OTG_FS_PCD_Init>
  MX_X_CUBE_AI_Init();
 80005bc:	f006 fc0a 	bl	8006dd4 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_X_CUBE_AI_Process();
 80005c0:	f006 fc16 	bl	8006df0 <MX_X_CUBE_AI_Process>
 80005c4:	e7fc      	b.n	80005c0 <main+0x30>

080005c6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b096      	sub	sp, #88	@ 0x58
 80005ca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2244      	movs	r2, #68	@ 0x44
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f008 ff39 	bl	800944c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	463b      	mov	r3, r7
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80005e8:	2000      	movs	r0, #0
 80005ea:	f001 fe47 	bl	800227c <HAL_PWREx_ControlVoltageScaling>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80005f4:	f000 fc8c 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80005f8:	2330      	movs	r3, #48	@ 0x30
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000608:	2360      	movs	r3, #96	@ 0x60
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000610:	2301      	movs	r3, #1
 8000612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000614:	2301      	movs	r3, #1
 8000616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000618:	233c      	movs	r3, #60	@ 0x3c
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 800061c:	2305      	movs	r3, #5
 800061e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000620:	2302      	movs	r3, #2
 8000622:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fee9 	bl	8002404 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000638:	f000 fc6a 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2303      	movs	r3, #3
 8000642:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2105      	movs	r1, #5
 8000654:	4618      	mov	r0, r3
 8000656:	f002 faef 	bl	8002c38 <HAL_RCC_ClockConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000660:	f000 fc56 	bl	8000f10 <Error_Handler>
  }
}
 8000664:	bf00      	nop
 8000666:	3758      	adds	r7, #88	@ 0x58
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000670:	4b1b      	ldr	r3, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000672:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <MX_I2C1_Init+0x78>)
 8000674:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000676:	4b1a      	ldr	r3, [pc, #104]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <MX_I2C1_Init+0x7c>)
 800067a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800067c:	4b18      	ldr	r3, [pc, #96]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000684:	2201      	movs	r2, #1
 8000686:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_I2C1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006a6:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006a8:	f001 fb62 	bl	8001d70 <HAL_I2C_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006b2:	f000 fc2d 	bl	8000f10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006ba:	f001 fbf4 	bl	8001ea6 <HAL_I2CEx_ConfigAnalogFilter>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 fc24 	bl	8000f10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_I2C1_Init+0x74>)
 80006cc:	f001 fc36 	bl	8001f3c <HAL_I2CEx_ConfigDigitalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 fc1b 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000099c 	.word	0x2000099c
 80006e4:	40005400 	.word	0x40005400
 80006e8:	307075b1 	.word	0x307075b1

080006ec <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006f2:	4a30      	ldr	r2, [pc, #192]	@ (80007b4 <MX_SAI1_Init+0xc8>)
 80006f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 80006fc:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000704:	2240      	movs	r2, #64	@ 0x40
 8000706:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000708:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800070a:	2200      	movs	r2, #0
 800070c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800070e:	4b28      	ldr	r3, [pc, #160]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000710:	2200      	movs	r2, #0
 8000712:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000714:	4b26      	ldr	r3, [pc, #152]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000720:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8000726:	4b22      	ldr	r3, [pc, #136]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800072c:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000732:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000734:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <MX_SAI1_Init+0xcc>)
 8000736:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800073e:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000740:	2200      	movs	r2, #0
 8000742:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000744:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000750:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800075a:	2200      	movs	r2, #0
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000760:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000764:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000766:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000768:	2208      	movs	r2, #8
 800076a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800076e:	2201      	movs	r2, #1
 8000770:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000772:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000774:	2200      	movs	r2, #0
 8000776:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800077a:	2200      	movs	r2, #0
 800077c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000780:	2200      	movs	r2, #0
 8000782:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000784:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000786:	2200      	movs	r2, #0
 8000788:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800078a:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800078c:	2200      	movs	r2, #0
 800078e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000790:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000792:	2201      	movs	r2, #1
 8000794:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000796:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 8000798:	2200      	movs	r2, #0
 800079a:	671a      	str	r2, [r3, #112]	@ 0x70
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <MX_SAI1_Init+0xc4>)
 800079e:	f004 faaf 	bl	8004d00 <HAL_SAI_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 80007a8:	f000 fbb2 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200009f0 	.word	0x200009f0
 80007b4:	40015404 	.word	0x40015404
 80007b8:	0002ee00 	.word	0x0002ee00

080007bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000834 <MX_SPI2_Init+0x78>)
 80007c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007ce:	4b18      	ldr	r3, [pc, #96]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80007d4:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007d6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80007da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80007f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f2:	2208      	movs	r2, #8
 80007f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <MX_SPI2_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000804:	2200      	movs	r2, #0
 8000806:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000808:	4b09      	ldr	r3, [pc, #36]	@ (8000830 <MX_SPI2_Init+0x74>)
 800080a:	2207      	movs	r2, #7
 800080c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000810:	2200      	movs	r2, #0
 8000812:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000814:	4b06      	ldr	r3, [pc, #24]	@ (8000830 <MX_SPI2_Init+0x74>)
 8000816:	2208      	movs	r2, #8
 8000818:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	@ (8000830 <MX_SPI2_Init+0x74>)
 800081c:	f004 fc88 	bl	8005130 <HAL_SPI_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 fb73 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000a84 	.word	0x20000a84
 8000834:	40003800 	.word	0x40003800

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b22      	ldr	r3, [pc, #136]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800083e:	4a23      	ldr	r2, [pc, #140]	@ (80008cc <MX_USART2_UART_Init+0x94>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000842:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b1c      	ldr	r3, [pc, #112]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b19      	ldr	r3, [pc, #100]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086e:	4b16      	ldr	r3, [pc, #88]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000874:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800087a:	4b13      	ldr	r3, [pc, #76]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000880:	4811      	ldr	r0, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000882:	f004 fd40 	bl	8005306 <HAL_UART_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800088c:	f000 fb40 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000890:	2100      	movs	r1, #0
 8000892:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 8000894:	f005 fc32 	bl	80060fc <HAL_UARTEx_SetTxFifoThreshold>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800089e:	f000 fb37 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a2:	2100      	movs	r1, #0
 80008a4:	4808      	ldr	r0, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 80008a6:	f005 fc67 	bl	8006178 <HAL_UARTEx_SetRxFifoThreshold>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008b0:	f000 fb2e 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_USART2_UART_Init+0x90>)
 80008b6:	f005 fbe8 	bl	800608a <HAL_UARTEx_DisableFifoMode>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008c0:	f000 fb26 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000ae8 	.word	0x20000ae8
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008d4:	4b22      	ldr	r3, [pc, #136]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <MX_USART3_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800091a:	f004 fcf4 	bl	8005306 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 faf4 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800092c:	f005 fbe6 	bl	80060fc <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 faeb 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800093e:	f005 fc1b 	bl	8006178 <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 fae2 	bl	8000f10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_USART3_UART_Init+0x90>)
 800094e:	f005 fb9c 	bl	800608a <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 fada 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000b7c 	.word	0x20000b7c
 8000964:	40004800 	.word	0x40004800

08000968 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000972:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000974:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000976:	2206      	movs	r2, #6
 8000978:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800097a:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800097c:	2202      	movs	r2, #2
 800097e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000982:	2202      	movs	r2, #2
 8000984:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009ac:	f001 fb12 	bl	8001fd4 <HAL_PCD_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 faab 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000c10 	.word	0x20000c10

080009c4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80009ca:	463b      	mov	r3, r7
 80009cc:	2220      	movs	r2, #32
 80009ce:	2100      	movs	r1, #0
 80009d0:	4618      	mov	r0, r3
 80009d2:	f008 fd3b 	bl	800944c <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009d8:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80009dc:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80009de:	4b2a      	ldr	r3, [pc, #168]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <MX_FMC_Init+0xc8>)
 80009e2:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80009e4:	4b28      	ldr	r3, [pc, #160]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80009ea:	4b27      	ldr	r3, [pc, #156]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80009f0:	4b25      	ldr	r3, [pc, #148]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009f2:	2204      	movs	r2, #4
 80009f4:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80009f6:	4b24      	ldr	r3, [pc, #144]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009f8:	2210      	movs	r2, #16
 80009fa:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_ENABLE;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_FMC_Init+0xc4>)
 80009fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a02:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_ENABLE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_ENABLE;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000a44:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000a4a:	230f      	movs	r3, #15
 8000a4c:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000a4e:	230f      	movs	r3, #15
 8000a50:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000a52:	23ff      	movs	r3, #255	@ 0xff
 8000a54:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000a5e:	2310      	movs	r3, #16
 8000a60:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 2;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000a6a:	463b      	mov	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_FMC_Init+0xc4>)
 8000a72:	f004 fc00 	bl	8005276 <HAL_SRAM_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_FMC_Init+0xbc>
  {
    Error_Handler( );
 8000a7c:	f000 fa48 	bl	8000f10 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a80:	bf00      	nop
 8000a82:	3720      	adds	r7, #32
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	200010f4 	.word	0x200010f4
 8000a8c:	a0000104 	.word	0xa0000104

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08e      	sub	sp, #56	@ 0x38
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000aa6:	4bb1      	ldr	r3, [pc, #708]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aaa:	4ab0      	ldr	r2, [pc, #704]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000aac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab2:	4bae      	ldr	r3, [pc, #696]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000abe:	4bab      	ldr	r3, [pc, #684]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	4aaa      	ldr	r2, [pc, #680]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aca:	4ba8      	ldr	r3, [pc, #672]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad6:	4ba5      	ldr	r3, [pc, #660]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ada:	4aa4      	ldr	r2, [pc, #656]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ae2:	4ba2      	ldr	r3, [pc, #648]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae6:	f003 0310 	and.w	r3, r3, #16
 8000aea:	61bb      	str	r3, [r7, #24]
 8000aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b9f      	ldr	r3, [pc, #636]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af2:	4a9e      	ldr	r2, [pc, #632]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afa:	4b9c      	ldr	r3, [pc, #624]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b99      	ldr	r3, [pc, #612]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a98      	ldr	r2, [pc, #608]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b96      	ldr	r3, [pc, #600]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b93      	ldr	r3, [pc, #588]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a92      	ldr	r2, [pc, #584]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b90      	ldr	r3, [pc, #576]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8000b36:	f001 fc55 	bl	80023e4 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3a:	4b8c      	ldr	r3, [pc, #560]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4a8b      	ldr	r2, [pc, #556]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4b89      	ldr	r3, [pc, #548]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60bb      	str	r3, [r7, #8]
 8000b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	4b86      	ldr	r3, [pc, #536]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	4a85      	ldr	r2, [pc, #532]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5e:	4b83      	ldr	r3, [pc, #524]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6a:	4b80      	ldr	r3, [pc, #512]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	4a7f      	ldr	r2, [pc, #508]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b70:	f043 0320 	orr.w	r3, r3, #32
 8000b74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b76:	4b7d      	ldr	r3, [pc, #500]	@ (8000d6c <MX_GPIO_Init+0x2dc>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	f003 0320 	and.w	r3, r3, #32
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f244 0114 	movw	r1, #16404	@ 0x4014
 8000b88:	4879      	ldr	r0, [pc, #484]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000b8a:	f001 f8d9 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(JOY_SEL_GPIO_Port, JOY_SEL_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b94:	4877      	ldr	r0, [pc, #476]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000b96:	f001 f8d3 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2140      	movs	r1, #64	@ 0x40
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f001 f8cd 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_Port, MFX_WAKEUP_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4873      	ldr	r0, [pc, #460]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000bac:	f001 f8c8 	bl	8001d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OCTOSPIM_P2_IO1_Pin OCTOSPIM_P2_IO2_Pin OCTOSPIM_P2_CLK_Pin OCTOSPIM_P2_IO0_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO1_Pin|OCTOSPIM_P2_IO2_Pin|OCTOSPIM_P2_CLK_Pin|OCTOSPIM_P2_IO0_Pin;
 8000bb0:	f44f 6364 	mov.w	r3, #3648	@ 0xe40
 8000bb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000bc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bca:	4619      	mov	r1, r3
 8000bcc:	486b      	ldr	r0, [pc, #428]	@ (8000d7c <MX_GPIO_Init+0x2ec>)
 8000bce:	f000 ff25 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : MIC_VDD_Pin DSI_SPI_USART_CS_Pin LED_GREEN_Pin */
  GPIO_InitStruct.Pin = MIC_VDD_Pin|DSI_SPI_USART_CS_Pin|LED_GREEN_Pin;
 8000bd2:	f244 0314 	movw	r3, #16404	@ 0x4014
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4861      	ldr	r0, [pc, #388]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000bec:	f000 ff16 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c00:	2302      	movs	r3, #2
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	485b      	ldr	r0, [pc, #364]	@ (8000d78 <MX_GPIO_Init+0x2e8>)
 8000c0c:	f000 ff06 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D7_Pin DCMI_D5_Pin DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8000c10:	23b0      	movs	r3, #176	@ 0xb0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c20:	230a      	movs	r3, #10
 8000c22:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4854      	ldr	r0, [pc, #336]	@ (8000d7c <MX_GPIO_Init+0x2ec>)
 8000c2c:	f000 fef6 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOSPIM_P2_IO6_Pin OCTOSPIM_P2_DQS_Pin OCTOSPIM_P2_IO7_Pin OCTOSPIM_P2_CS_Pin */
  GPIO_InitStruct.Pin = OCTOSPIM_P2_IO6_Pin|OCTOSPIM_P2_DQS_Pin|OCTOSPIM_P2_IO7_Pin|OCTOSPIM_P2_CS_Pin;
 8000c30:	f44f 4316 	mov.w	r3, #38400	@ 0x9600
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000c42:	2305      	movs	r3, #5
 8000c44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	484c      	ldr	r0, [pc, #304]	@ (8000d80 <MX_GPIO_Init+0x2f0>)
 8000c4e:	f000 fee5 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8000c52:	2302      	movs	r3, #2
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	4845      	ldr	r0, [pc, #276]	@ (8000d7c <MX_GPIO_Init+0x2ec>)
 8000c68:	f000 fed8 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D3_Pin DCMI_PIXCLK_Pin DCMI_D2_Pin */
  GPIO_InitStruct.Pin = DCMI_D3_Pin|DCMI_PIXCLK_Pin|DCMI_D2_Pin;
 8000c6c:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4839      	ldr	r0, [pc, #228]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000c8a:	f000 fec7 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	2302      	movs	r3, #2
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ca0:	2303      	movs	r3, #3
 8000ca2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4831      	ldr	r0, [pc, #196]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000cac:	f000 feb6 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OCTOPSIM_P2_IO4_Pin OCTOSPIM_P2_IO5_Pin OCTOSPI_P2_IO3_Pin */
  GPIO_InitStruct.Pin = OCTOPSIM_P2_IO4_Pin|OCTOSPIM_P2_IO5_Pin|OCTOSPI_P2_IO3_Pin;
 8000cb0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPIM_P2;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4828      	ldr	r0, [pc, #160]	@ (8000d70 <MX_GPIO_Init+0x2e0>)
 8000cce:	f000 fea5 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_CMD_Pin */
  GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4825      	ldr	r0, [pc, #148]	@ (8000d84 <MX_GPIO_Init+0x2f4>)
 8000cee:	f000 fe95 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : uSD_D2_Pin uSD_D3_Pin uSD_CLK_Pin uSD_D0_Pin
                           uSD_D1_Pin */
  GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D0_Pin
 8000cf2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |uSD_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000d04:	230c      	movs	r3, #12
 8000d06:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000d10:	f000 fe84 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000d14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4811      	ldr	r0, [pc, #68]	@ (8000d74 <MX_GPIO_Init+0x2e4>)
 8000d2e:	f000 fe75 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_14_Pin ARD_15_Pin */
  GPIO_InitStruct.Pin = ARD_14_Pin|ARD_15_Pin;
 8000d32:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d40:	2303      	movs	r3, #3
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000d44:	2304      	movs	r3, #4
 8000d46:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480c      	ldr	r0, [pc, #48]	@ (8000d80 <MX_GPIO_Init+0x2f0>)
 8000d50:	f000 fe64 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 8000d54:	2340      	movs	r3, #64	@ 0x40
 8000d56:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d58:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	e00e      	b.n	8000d88 <MX_GPIO_Init+0x2f8>
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48001c00 	.word	0x48001c00
 8000d74:	48000800 	.word	0x48000800
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48002000 	.word	0x48002000
 8000d80:	48001800 	.word	0x48001800
 8000d84:	48000c00 	.word	0x48000c00
 8000d88:	485e      	ldr	r0, [pc, #376]	@ (8000f04 <MX_GPIO_Init+0x474>)
 8000d8a:	f000 fe47 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : DFDATIN3_Pin DF_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFDATIN3_Pin|DF_CKOUT_Pin;
 8000d8e:	2384      	movs	r3, #132	@ 0x84
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	2302      	movs	r3, #2
 8000d94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da6:	4619      	mov	r1, r3
 8000da8:	4856      	ldr	r0, [pc, #344]	@ (8000f04 <MX_GPIO_Init+0x474>)
 8000daa:	f000 fe37 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D0_Pin ARD_D1_Pin */
  GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8000dae:	2303      	movs	r3, #3
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	484e      	ldr	r0, [pc, #312]	@ (8000f04 <MX_GPIO_Init+0x474>)
 8000dca:	f000 fe27 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A2_Pin ARD_A1_Pin */
  GPIO_InitStruct.Pin = ARD_A2_Pin|ARD_A1_Pin;
 8000dce:	2318      	movs	r3, #24
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dde:	4619      	mov	r1, r3
 8000de0:	4848      	ldr	r0, [pc, #288]	@ (8000f04 <MX_GPIO_Init+0x474>)
 8000de2:	f000 fe1b 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A4_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A4_Pin|ARD_A0_Pin;
 8000de6:	2381      	movs	r3, #129	@ 0x81
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dea:	230b      	movs	r3, #11
 8000dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dfc:	f000 fe0e 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_PWM_Pin */
  GPIO_InitStruct.Pin = STMOD_PWM_Pin;
 8000e00:	2320      	movs	r3, #32
 8000e02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e10:	2301      	movs	r3, #1
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(STMOD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1e:	f000 fdfd 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000e22:	2340      	movs	r3, #64	@ 0x40
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e26:	2301      	movs	r3, #1
 8000e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e3c:	f000 fdee 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000e40:	2302      	movs	r3, #2
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000e50:	2302      	movs	r3, #2
 8000e52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e5e:	f000 fddd 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DSI_TE_Pin */
  GPIO_InitStruct.Pin = DSI_TE_Pin;
 8000e62:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_DSI;
 8000e74:	230b      	movs	r3, #11
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4822      	ldr	r0, [pc, #136]	@ (8000f08 <MX_GPIO_Init+0x478>)
 8000e80:	f000 fdcc 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_HSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin;
 8000e84:	2310      	movs	r3, #16
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8000e94:	230a      	movs	r3, #10
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DCMI_HSYNC_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ea2:	f000 fdbb 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_A3_Pin */
  GPIO_InitStruct.Pin = ARD_A3_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <MX_GPIO_Init+0x47c>)
 8000eba:	f000 fdaf 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000ebe:	2304      	movs	r3, #4
 8000ec0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480d      	ldr	r0, [pc, #52]	@ (8000f0c <MX_GPIO_Init+0x47c>)
 8000ed6:	f000 fda1 	bl	8001a1c <HAL_GPIO_Init>

  /*Configure GPIO pin : DFDATIN1_Pin */
  GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8000eda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ede:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000eec:	2306      	movs	r3, #6
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_GPIO_Init+0x47c>)
 8000ef8:	f000 fd90 	bl	8001a1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000efc:	bf00      	nop
 8000efe:	3738      	adds	r7, #56	@ 0x38
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	48000800 	.word	0x48000800
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48000400 	.word	0x48000400

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <Error_Handler+0x8>

08000f1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0b2      	sub	sp, #200	@ 0xc8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	229c      	movs	r2, #156	@ 0x9c
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f008 fa61 	bl	800944c <memset>
  if(hi2c->Instance==I2C1)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a33      	ldr	r2, [pc, #204]	@ (800105c <HAL_I2C_MspInit+0xf8>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d15e      	bne.n	8001052 <HAL_I2C_MspInit+0xee>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f94:	2340      	movs	r3, #64	@ 0x40
 8000f96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 f903 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fac:	f7ff ffb0 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fb6:	f043 0302 	orr.w	r3, r3, #2
 8000fba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fbc:	4b28      	ldr	r3, [pc, #160]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	4a24      	ldr	r2, [pc, #144]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd4:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000fe0:	f001 fa00 	bl	80023e4 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PG13     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin;
 8000fe4:	2340      	movs	r3, #64	@ 0x40
 8000fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fea:	2312      	movs	r3, #18
 8000fec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ffc:	2304      	movs	r3, #4
 8000ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SCL_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001006:	4619      	mov	r1, r3
 8001008:	4816      	ldr	r0, [pc, #88]	@ (8001064 <HAL_I2C_MspInit+0x100>)
 800100a:	f000 fd07 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C1_SDA_Pin;
 800100e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001012:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001016:	2312      	movs	r3, #18
 8001018:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800101c:	2301      	movs	r3, #1
 800101e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001028:	2304      	movs	r3, #4
 800102a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(I2C1_SDA_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001032:	4619      	mov	r1, r3
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <HAL_I2C_MspInit+0x104>)
 8001036:	f000 fcf1 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 800103c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8001040:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001044:	6593      	str	r3, [r2, #88]	@ 0x58
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_I2C_MspInit+0xfc>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800104a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001052:	bf00      	nop
 8001054:	37c8      	adds	r7, #200	@ 0xc8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	48001800 	.word	0x48001800

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a25      	ldr	r2, [pc, #148]	@ (8001120 <HAL_SPI_MspInit+0xb4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d144      	bne.n	8001118 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001092:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001098:	6593      	str	r3, [r2, #88]	@ 0x58
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800109e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	4a18      	ldr	r2, [pc, #96]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_SPI_MspInit+0xb8>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
    PI0     ------> SPI2_NSS
    PB15     ------> SPI2_MOSI
    PB14     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = ARD_10_Pin;
 80010d6:	2301      	movs	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010e6:	2305      	movs	r3, #5
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_10_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 0314 	add.w	r3, r7, #20
 80010ee:	4619      	mov	r1, r3
 80010f0:	480d      	ldr	r0, [pc, #52]	@ (8001128 <HAL_SPI_MspInit+0xbc>)
 80010f2:	f000 fc93 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin|SPI2_MISO_Pin|SPI2_CLK_Pin;
 80010f6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001108:	2305      	movs	r3, #5
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <HAL_SPI_MspInit+0xc0>)
 8001114:	f000 fc82 	bl	8001a1c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40003800 	.word	0x40003800
 8001124:	40021000 	.word	0x40021000
 8001128:	48002000 	.word	0x48002000
 800112c:	48000400 	.word	0x48000400

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b0b4      	sub	sp, #208	@ 0xd0
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	229c      	movs	r2, #156	@ 0x9c
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f008 f97b 	bl	800944c <memset>
  if(huart->Instance==USART2)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a54      	ldr	r2, [pc, #336]	@ (80012ac <HAL_UART_MspInit+0x17c>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d13c      	bne.n	80011da <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001164:	2300      	movs	r3, #0
 8001166:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f002 f81d 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001178:	f7ff feca 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800117c:	4b4c      	ldr	r3, [pc, #304]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001180:	4a4b      	ldr	r2, [pc, #300]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001182:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001186:	6593      	str	r3, [r2, #88]	@ 0x58
 8001188:	4b49      	ldr	r3, [pc, #292]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800118a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800118c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001190:	61fb      	str	r3, [r7, #28]
 8001192:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001194:	4b46      	ldr	r3, [pc, #280]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001198:	4a45      	ldr	r2, [pc, #276]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a0:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	69bb      	ldr	r3, [r7, #24]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_TX_Pin;
 80011ac:	230c      	movs	r3, #12
 80011ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c4:	2307      	movs	r3, #7
 80011c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d4:	f000 fc22 	bl	8001a1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011d8:	e063      	b.n	80012a2 <HAL_UART_MspInit+0x172>
  else if(huart->Instance==USART3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a35      	ldr	r2, [pc, #212]	@ (80012b4 <HAL_UART_MspInit+0x184>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d15e      	bne.n	80012a2 <HAL_UART_MspInit+0x172>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011e4:	2304      	movs	r3, #4
 80011e6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f001 ffdb 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80011fc:	f7ff fe88 	bl	8000f10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001200:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001204:	4a2a      	ldr	r2, [pc, #168]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001206:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800120a:	6593      	str	r3, [r2, #88]	@ 0x58
 800120c:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800120e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001210:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001218:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800121a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121c:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001230:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 8001236:	f043 0302 	orr.w	r3, r3, #2
 800123a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123c:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <HAL_UART_MspInit+0x180>)
 800123e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART3_RTS_Pin;
 8001248:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800124c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001262:	2307      	movs	r3, #7
 8001264:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(USART3_RTS_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f000 fbd3 	bl	8001a1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001276:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800127a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127e:	2302      	movs	r3, #2
 8001280:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128a:	2303      	movs	r3, #3
 800128c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001290:	2307      	movs	r3, #7
 8001292:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 800129a:	4619      	mov	r1, r3
 800129c:	4806      	ldr	r0, [pc, #24]	@ (80012b8 <HAL_UART_MspInit+0x188>)
 800129e:	f000 fbbd 	bl	8001a1c <HAL_GPIO_Init>
}
 80012a2:	bf00      	nop
 80012a4:	37d0      	adds	r7, #208	@ 0xd0
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40004400 	.word	0x40004400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40004800 	.word	0x40004800
 80012b8:	48000400 	.word	0x48000400

080012bc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b0b2      	sub	sp, #200	@ 0xc8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	229c      	movs	r2, #156	@ 0x9c
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f008 f8b5 	bl	800944c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ea:	d16c      	bne.n	80013c6 <HAL_PCD_MspInit+0x10a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80012ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f8:	f107 0318 	add.w	r3, r7, #24
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 ff55 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001308:	f7ff fe02 	bl	8000f10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800130e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001310:	4a2f      	ldr	r2, [pc, #188]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001318:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800131a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	697b      	ldr	r3, [r7, #20]
    PA10     ------> USB_OTG_FS_ID
    PA12     ------> USB_OTG_FS_DP
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_OTGFS_ID_Pin|USB_OTG_FS_DP_Pin|USB_OTGFS_DM_Pin;
 8001324:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001328:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800133e:	230a      	movs	r3, #10
 8001340:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001348:	4619      	mov	r1, r3
 800134a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800134e:	f000 fb65 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTGFS_VBUS_Pin;
 8001352:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001356:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135a:	2300      	movs	r3, #0
 800135c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(USB_OTGFS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800136a:	4619      	mov	r1, r3
 800136c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001370:	f000 fb54 	bl	8001a1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001374:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001378:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800137a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800137e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001380:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001384:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b10      	ldr	r3, [pc, #64]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d114      	bne.n	80013c2 <HAL_PCD_MspInit+0x106>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800139a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800139c:	4a0c      	ldr	r2, [pc, #48]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 80013a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80013b0:	f001 f808 	bl	80023c4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <HAL_PCD_MspInit+0x114>)
 80013ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013be:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80013c0:	e001      	b.n	80013c6 <HAL_PCD_MspInit+0x10a>
      HAL_PWREx_EnableVddUSB();
 80013c2:	f000 ffff 	bl	80023c4 <HAL_PWREx_EnableVddUSB>
}
 80013c6:	bf00      	nop
 80013c8:	37c8      	adds	r7, #200	@ 0xc8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000

080013d4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013e8:	4b32      	ldr	r3, [pc, #200]	@ (80014b4 <HAL_FMC_MspInit+0xe0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d15d      	bne.n	80014ac <HAL_FMC_MspInit+0xd8>
    return;
  }
  FMC_Initialized = 1;
 80013f0:	4b30      	ldr	r3, [pc, #192]	@ (80014b4 <HAL_FMC_MspInit+0xe0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f6:	4b30      	ldr	r3, [pc, #192]	@ (80014b8 <HAL_FMC_MspInit+0xe4>)
 80013f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013fa:	4a2f      	ldr	r2, [pc, #188]	@ (80014b8 <HAL_FMC_MspInit+0xe4>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6513      	str	r3, [r2, #80]	@ 0x50
 8001402:	4b2d      	ldr	r3, [pc, #180]	@ (80014b8 <HAL_FMC_MspInit+0xe4>)
 8001404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|PSRAM_A20_Pin|PSRAM_A19_Pin
 800140e:	f64f 739b 	movw	r3, #65435	@ 0xff9b
 8001412:	607b      	str	r3, [r7, #4]
                          |D7_Pin|D6_Pin|D12_Pin|D5_Pin
                          |D11_Pin|D4_Pin|D10_Pin|D9_Pin
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001420:	230c      	movs	r3, #12
 8001422:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	4619      	mov	r1, r3
 8001428:	4824      	ldr	r0, [pc, #144]	@ (80014bc <HAL_FMC_MspInit+0xe8>)
 800142a:	f000 faf7 	bl	8001a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|PSRAM_OE_Pin|D3_Pin|PSRAM_WE_Pin
 800142e:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 8001432:	607b      	str	r3, [r7, #4]
                          |PSRAM_WAIT_Pin|PSRAM_CLK_Pin|PSRAM_NE1_Pin|PSRAM_A18_Pin
                          |D1_Pin|D0_Pin|PSRAM_A17_Pin|PSRAM_A16_Pin
                          |D15_Pin|D14_Pin|D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001440:	230c      	movs	r3, #12
 8001442:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	481d      	ldr	r0, [pc, #116]	@ (80014c0 <HAL_FMC_MspInit+0xec>)
 800144a:	f000 fae7 	bl	8001a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_ADV_Pin;
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800145e:	230c      	movs	r3, #12
 8001460:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(PSRAM_ADV_GPIO_Port, &GPIO_InitStruct);
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4817      	ldr	r0, [pc, #92]	@ (80014c4 <HAL_FMC_MspInit+0xf0>)
 8001468:	f000 fad8 	bl	8001a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800146c:	f24f 033f 	movw	r3, #61503	@ 0xf03f
 8001470:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4810      	ldr	r0, [pc, #64]	@ (80014c8 <HAL_FMC_MspInit+0xf4>)
 8001488:	f000 fac8 	bl	8001a1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A15_Pin|PSRAM_A11_Pin
 800148c:	233f      	movs	r3, #63	@ 0x3f
 800148e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A12_Pin|PSRAM_A10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149c:	230c      	movs	r3, #12
 800149e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <HAL_FMC_MspInit+0xf8>)
 80014a6:	f000 fab9 	bl	8001a1c <HAL_GPIO_Init>
 80014aa:	e000      	b.n	80014ae <HAL_FMC_MspInit+0xda>
    return;
 80014ac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20001144 	.word	0x20001144
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48001000 	.word	0x48001000
 80014c0:	48000c00 	.word	0x48000c00
 80014c4:	48000400 	.word	0x48000400
 80014c8:	48001400 	.word	0x48001400
 80014cc:	48001800 	.word	0x48001800

080014d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014d8:	f7ff ff7c 	bl	80013d4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b0b0      	sub	sp, #192	@ 0xc0
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	229c      	movs	r2, #156	@ 0x9c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f007 ffa9 	bl	800944c <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a32      	ldr	r2, [pc, #200]	@ (80015c8 <HAL_SAI_MspInit+0xe4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d15d      	bne.n	80015c0 <HAL_SAI_MspInit+0xdc>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8001504:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001508:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800150a:	2300      	movs	r3, #0
 800150c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800150e:	2301      	movs	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001512:	2301      	movs	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001516:	2310      	movs	r3, #16
 8001518:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800151e:	2302      	movs	r3, #2
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8001526:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4618      	mov	r0, r3
 8001532:	f001 fe3b 	bl	80031ac <HAL_RCCEx_PeriphCLKConfig>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <HAL_SAI_MspInit+0x5c>
    {
      Error_Handler();
 800153c:	f7ff fce8 	bl	8000f10 <Error_Handler>
    }

    if (SAI1_client == 0)
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <HAL_SAI_MspInit+0xe8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10b      	bne.n	8001560 <HAL_SAI_MspInit+0x7c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001548:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_SAI_MspInit+0xec>)
 800154a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154c:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <HAL_SAI_MspInit+0xec>)
 800154e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001552:	6613      	str	r3, [r2, #96]	@ 0x60
 8001554:	4b1e      	ldr	r3, [pc, #120]	@ (80015d0 <HAL_SAI_MspInit+0xec>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8001560:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <HAL_SAI_MspInit+0xe8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <HAL_SAI_MspInit+0xe8>)
 8001568:	6013      	str	r3, [r2, #0]
    PE2     ------> SAI1_MCLK_A
    PB9     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PE5     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin|SAI1_FSA_Pin;
 800156a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800156e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001584:	230d      	movs	r3, #13
 8001586:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800158e:	4619      	mov	r1, r3
 8001590:	4810      	ldr	r0, [pc, #64]	@ (80015d4 <HAL_SAI_MspInit+0xf0>)
 8001592:	f000 fa43 	bl	8001a1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCKA_Pin|SAI1_SDA_Pin|SAI1_SCKA_Pin;
 8001596:	2364      	movs	r3, #100	@ 0x64
 8001598:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80015ae:	230d      	movs	r3, #13
 80015b0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80015b8:	4619      	mov	r1, r3
 80015ba:	4807      	ldr	r0, [pc, #28]	@ (80015d8 <HAL_SAI_MspInit+0xf4>)
 80015bc:	f000 fa2e 	bl	8001a1c <HAL_GPIO_Init>

    }
}
 80015c0:	bf00      	nop
 80015c2:	37c0      	adds	r7, #192	@ 0xc0
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40015404 	.word	0x40015404
 80015cc:	20001148 	.word	0x20001148
 80015d0:	40021000 	.word	0x40021000
 80015d4:	48000400 	.word	0x48000400
 80015d8:	48001000 	.word	0x48001000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001632:	f000 f8c9 	bl	80017c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	@ (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f007 ff4c 	bl	8009508 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200a0000 	.word	0x200a0000
 800169c:	00000800 	.word	0x00000800
 80016a0:	2000114c 	.word	0x2000114c
 80016a4:	20040000 	.word	0x20040000

080016a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016d0:	f7ff ffea 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopForever+0x6>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopForever+0xe>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopForever+0x16>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f007 ff0b 	bl	8009514 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016fe:	f7fe ff47 	bl	8000590 <main>

08001702 <LoopForever>:

LoopForever:
    b LoopForever
 8001702:	e7fe      	b.n	8001702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001704:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	20000980 	.word	0x20000980
  ldr r2, =_sidata
 8001710:	0800d4f4 	.word	0x0800d4f4
  ldr r2, =_sbss
 8001714:	20000980 	.word	0x20000980
  ldr r4, =_ebss
 8001718:	200014d8 	.word	0x200014d8

0800171c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC1_IRQHandler>

0800171e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001728:	2003      	movs	r0, #3
 800172a:	f000 f943 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f80e 	bl	8001750 <HAL_InitTick>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d002      	beq.n	8001740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	e001      	b.n	8001744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001740:	f7ff fbec 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001744:	79fb      	ldrb	r3, [r7, #7]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800175c:	4b17      	ldr	r3, [pc, #92]	@ (80017bc <HAL_InitTick+0x6c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d023      	beq.n	80017ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001764:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_InitTick+0x70>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b14      	ldr	r3, [pc, #80]	@ (80017bc <HAL_InitTick+0x6c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f941 	bl	8001a02 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10f      	bne.n	80017a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b0f      	cmp	r3, #15
 800178a:	d809      	bhi.n	80017a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800178c:	2200      	movs	r2, #0
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f000 f919 	bl	80019ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001798:	4a0a      	ldr	r2, [pc, #40]	@ (80017c4 <HAL_InitTick+0x74>)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	e007      	b.n	80017b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	e004      	b.n	80017b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e001      	b.n	80017b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000004 	.word	0x20000004

080017c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x20>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <HAL_IncTick+0x24>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_IncTick+0x24>)
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008
 80017ec:	20001150 	.word	0x20001150

080017f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return uwTick;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_GetTick+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20001150 	.word	0x20001150

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff ffee 	bl	80017f0 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001822:	4b0a      	ldr	r3, [pc, #40]	@ (800184c <HAL_Delay+0x44>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffde 	bl	80017f0 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000008 	.word	0x20000008

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	@ (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	@ (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	@ 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	@ (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	@ (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	@ (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff47 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff5c 	bl	8001898 <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f7ff ffb0 	bl	8001970 <SysTick_Config>
 8001a10:	4603      	mov	r3, r0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a26:	2300      	movs	r3, #0
 8001a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	e166      	b.n	8001cfa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa01 f303 	lsl.w	r3, r1, r3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f000 8158 	beq.w	8001cf4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d005      	beq.n	8001a5c <HAL_GPIO_Init+0x40>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 0201 	and.w	r2, r3, #1
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d017      	beq.n	8001afa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d123      	bne.n	8001b4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	08da      	lsrs	r2, r3, #3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3208      	adds	r2, #8
 8001b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	220f      	movs	r2, #15
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	6939      	ldr	r1, [r7, #16]
 8001b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	2203      	movs	r2, #3
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	4013      	ands	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f003 0203 	and.w	r2, r3, #3
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80b2 	beq.w	8001cf4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b90:	4b61      	ldr	r3, [pc, #388]	@ (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b94:	4a60      	ldr	r2, [pc, #384]	@ (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b9c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d18 <HAL_GPIO_Init+0x2fc>)
 8001b9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ba8:	4a5c      	ldr	r2, [pc, #368]	@ (8001d1c <HAL_GPIO_Init+0x300>)
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	3302      	adds	r3, #2
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bd2:	d02b      	beq.n	8001c2c <HAL_GPIO_Init+0x210>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_GPIO_Init+0x304>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d025      	beq.n	8001c28 <HAL_GPIO_Init+0x20c>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4a51      	ldr	r2, [pc, #324]	@ (8001d24 <HAL_GPIO_Init+0x308>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d01f      	beq.n	8001c24 <HAL_GPIO_Init+0x208>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4a50      	ldr	r2, [pc, #320]	@ (8001d28 <HAL_GPIO_Init+0x30c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d019      	beq.n	8001c20 <HAL_GPIO_Init+0x204>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4a4f      	ldr	r2, [pc, #316]	@ (8001d2c <HAL_GPIO_Init+0x310>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_GPIO_Init+0x200>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a4e      	ldr	r2, [pc, #312]	@ (8001d30 <HAL_GPIO_Init+0x314>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d00d      	beq.n	8001c18 <HAL_GPIO_Init+0x1fc>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <HAL_GPIO_Init+0x318>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d007      	beq.n	8001c14 <HAL_GPIO_Init+0x1f8>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4c      	ldr	r2, [pc, #304]	@ (8001d38 <HAL_GPIO_Init+0x31c>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_GPIO_Init+0x1f4>
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	e00e      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c10:	2308      	movs	r3, #8
 8001c12:	e00c      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c14:	2306      	movs	r3, #6
 8001c16:	e00a      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c18:	2305      	movs	r3, #5
 8001c1a:	e008      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	e006      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c20:	2303      	movs	r3, #3
 8001c22:	e004      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e002      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <HAL_GPIO_Init+0x212>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	f002 0203 	and.w	r2, r2, #3
 8001c34:	0092      	lsls	r2, r2, #2
 8001c36:	4093      	lsls	r3, r2
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c3e:	4937      	ldr	r1, [pc, #220]	@ (8001d1c <HAL_GPIO_Init+0x300>)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	089b      	lsrs	r3, r3, #2
 8001c44:	3302      	adds	r3, #2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c70:	4a32      	ldr	r2, [pc, #200]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c76:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c9a:	4a28      	ldr	r2, [pc, #160]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ca0:	4b26      	ldr	r3, [pc, #152]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cca:	4b1c      	ldr	r3, [pc, #112]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cee:	4a13      	ldr	r2, [pc, #76]	@ (8001d3c <HAL_GPIO_Init+0x320>)
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f ae91 	bne.w	8001a2c <HAL_GPIO_Init+0x10>
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	371c      	adds	r7, #28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010000 	.word	0x40010000
 8001d20:	48000400 	.word	0x48000400
 8001d24:	48000800 	.word	0x48000800
 8001d28:	48000c00 	.word	0x48000c00
 8001d2c:	48001000 	.word	0x48001000
 8001d30:	48001400 	.word	0x48001400
 8001d34:	48001800 	.word	0x48001800
 8001d38:	48001c00 	.word	0x48001c00
 8001d3c:	40010400 	.word	0x40010400

08001d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d50:	787b      	ldrb	r3, [r7, #1]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d56:	887a      	ldrh	r2, [r7, #2]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d5c:	e002      	b.n	8001d64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e08d      	b.n	8001e9e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d106      	bne.n	8001d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff f8e4 	bl	8000f64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2224      	movs	r2, #36	@ 0x24
 8001da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	e006      	b.n	8001df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d108      	bne.n	8001e12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	e007      	b.n	8001e22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691a      	ldr	r2, [r3, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	69d9      	ldr	r1, [r3, #28]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a1a      	ldr	r2, [r3, #32]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0201 	orr.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b20      	cmp	r3, #32
 8001eba:	d138      	bne.n	8001f2e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e032      	b.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	@ 0x24
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6819      	ldr	r1, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f042 0201 	orr.w	r2, r2, #1
 8001f18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2220      	movs	r2, #32
 8001f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f2e:	2302      	movs	r3, #2
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d139      	bne.n	8001fc6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e033      	b.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	@ 0x24
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f8e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	021b      	lsls	r3, r3, #8
 8001f94:	68fa      	ldr	r2, [r7, #12]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0201 	orr.w	r2, r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e000      	b.n	8001fc8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fc6:	2302      	movs	r3, #2
  }
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e101      	b.n	80021ea <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff f95e 	bl	80012bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2203      	movs	r2, #3
 8002004:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fa8a 	bl	800652c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6818      	ldr	r0, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7c1a      	ldrb	r2, [r3, #16]
 8002020:	f88d 2000 	strb.w	r2, [sp]
 8002024:	3304      	adds	r3, #4
 8002026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002028:	f004 fa53 	bl	80064d2 <USB_CoreInit>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2202      	movs	r2, #2
 8002036:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0d5      	b.n	80021ea <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f004 fa82 	bl	800654e <USB_SetCurrentMode>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e0c6      	b.n	80021ea <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e04a      	b.n	80020f8 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3315      	adds	r3, #21
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002076:	7bfa      	ldrb	r2, [r7, #15]
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	440b      	add	r3, r1
 8002084:	3314      	adds	r3, #20
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	b298      	uxth	r0, r3
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	332e      	adds	r3, #46	@ 0x2e
 800209e:	4602      	mov	r2, r0
 80020a0:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	00db      	lsls	r3, r3, #3
 80020aa:	4413      	add	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	440b      	add	r3, r1
 80020b0:	3318      	adds	r3, #24
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	6879      	ldr	r1, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	331c      	adds	r3, #28
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3320      	adds	r3, #32
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	3324      	adds	r3, #36	@ 0x24
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	3301      	adds	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	791b      	ldrb	r3, [r3, #4]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d3af      	bcc.n	8002062 <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002102:	2300      	movs	r3, #0
 8002104:	73fb      	strb	r3, [r7, #15]
 8002106:	e044      	b.n	8002192 <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	440b      	add	r3, r1
 800212c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002160:	7bfa      	ldrb	r2, [r7, #15]
 8002162:	6879      	ldr	r1, [r7, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002176:	7bfa      	ldrb	r2, [r7, #15]
 8002178:	6879      	ldr	r1, [r7, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	4413      	add	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	440b      	add	r3, r1
 8002184:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	3301      	adds	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	791b      	ldrb	r3, [r3, #4]
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	429a      	cmp	r2, r3
 800219a:	d3b5      	bcc.n	8002108 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6818      	ldr	r0, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	7c1a      	ldrb	r2, [r3, #16]
 80021a4:	f88d 2000 	strb.w	r2, [sp]
 80021a8:	3304      	adds	r3, #4
 80021aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021ac:	f004 fa1c 	bl	80065e8 <USB_DevInit>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e013      	b.n	80021ea <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	7b1b      	ldrb	r3, [r3, #12]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d102      	bne.n	80021de <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f80a 	bl	80021f2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fbc1 	bl	800696a <USB_DevDisconnect>

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002224:	f043 0303 	orr.w	r3, r3, #3
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002240:	4b0d      	ldr	r3, [pc, #52]	@ (8002278 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800224c:	d102      	bne.n	8002254 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800224e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002252:	e00b      	b.n	800226c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002254:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800225a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800225e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002262:	d102      	bne.n	800226a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002264:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002268:	e000      	b.n	800226c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800226a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	40007000 	.word	0x40007000

0800227c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d141      	bne.n	800230e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800228a:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002292:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002296:	d131      	bne.n	80022fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002298:	4b47      	ldr	r3, [pc, #284]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800229e:	4a46      	ldr	r2, [pc, #280]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a8:	4b43      	ldr	r3, [pc, #268]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80022b0:	4a41      	ldr	r2, [pc, #260]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80022b8:	4b40      	ldr	r3, [pc, #256]	@ (80023bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2232      	movs	r2, #50	@ 0x32
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	4a3f      	ldr	r2, [pc, #252]	@ (80023c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	3301      	adds	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ce:	e002      	b.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022d6:	4b38      	ldr	r3, [pc, #224]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022e2:	d102      	bne.n	80022ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f2      	bne.n	80022d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ea:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022f6:	d158      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e057      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022fc:	4b2e      	ldr	r3, [pc, #184]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002302:	4a2d      	ldr	r2, [pc, #180]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800230c:	e04d      	b.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002314:	d141      	bne.n	800239a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002316:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800231e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002322:	d131      	bne.n	8002388 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002324:	4b24      	ldr	r3, [pc, #144]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800232a:	4a23      	ldr	r2, [pc, #140]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002334:	4b20      	ldr	r3, [pc, #128]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800233c:	4a1e      	ldr	r2, [pc, #120]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800233e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002342:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002344:	4b1d      	ldr	r3, [pc, #116]	@ (80023bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2232      	movs	r2, #50	@ 0x32
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002350:	fba2 2303 	umull	r2, r3, r2, r3
 8002354:	0c9b      	lsrs	r3, r3, #18
 8002356:	3301      	adds	r3, #1
 8002358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800235a:	e002      	b.n	8002362 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3b01      	subs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002362:	4b15      	ldr	r3, [pc, #84]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800236e:	d102      	bne.n	8002376 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f2      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002382:	d112      	bne.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e011      	b.n	80023ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002388:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800238e:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002398:	e007      	b.n	80023aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800239a:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023a2:	4a05      	ldr	r2, [pc, #20]	@ (80023b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023a8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40007000 	.word	0x40007000
 80023bc:	20000000 	.word	0x20000000
 80023c0:	431bde83 	.word	0x431bde83

080023c4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80023c8:	4b05      	ldr	r3, [pc, #20]	@ (80023e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	4a04      	ldr	r2, [pc, #16]	@ (80023e0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80023ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023d2:	6053      	str	r3, [r2, #4]
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40007000 	.word	0x40007000

080023e4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	4a04      	ldr	r2, [pc, #16]	@ (8002400 <HAL_PWREx_EnableVddIO2+0x1c>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023f2:	6053      	str	r3, [r2, #4]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40007000 	.word	0x40007000

08002404 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	f000 bc08 	b.w	8002c28 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002418:	4b96      	ldr	r3, [pc, #600]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
 8002420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002422:	4b94      	ldr	r3, [pc, #592]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80e4 	beq.w	8002602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d007      	beq.n	8002450 <HAL_RCC_OscConfig+0x4c>
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b0c      	cmp	r3, #12
 8002444:	f040 808b 	bne.w	800255e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b01      	cmp	r3, #1
 800244c:	f040 8087 	bne.w	800255e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002450:	4b88      	ldr	r3, [pc, #544]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d005      	beq.n	8002468 <HAL_RCC_OscConfig+0x64>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e3df      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1a      	ldr	r2, [r3, #32]
 800246c:	4b81      	ldr	r3, [pc, #516]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0308 	and.w	r3, r3, #8
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_RCC_OscConfig+0x7e>
 8002478:	4b7e      	ldr	r3, [pc, #504]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002480:	e005      	b.n	800248e <HAL_RCC_OscConfig+0x8a>
 8002482:	4b7c      	ldr	r3, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002484:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002488:	091b      	lsrs	r3, r3, #4
 800248a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248e:	4293      	cmp	r3, r2
 8002490:	d223      	bcs.n	80024da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fdca 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e3c0      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a6:	4b73      	ldr	r3, [pc, #460]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a72      	ldr	r2, [pc, #456]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024ac:	f043 0308 	orr.w	r3, r3, #8
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	4b70      	ldr	r3, [pc, #448]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	496d      	ldr	r1, [pc, #436]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024c4:	4b6b      	ldr	r3, [pc, #428]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	4968      	ldr	r1, [pc, #416]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e025      	b.n	8002526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	4b66      	ldr	r3, [pc, #408]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a65      	ldr	r2, [pc, #404]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024e0:	f043 0308 	orr.w	r3, r3, #8
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	4960      	ldr	r1, [pc, #384]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	495b      	ldr	r1, [pc, #364]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fd8a 	bl	8003030 <RCC_SetFlashLatencyFromMSIRange>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e380      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002526:	f000 fcc1 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b51      	ldr	r3, [pc, #324]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	4950      	ldr	r1, [pc, #320]	@ (8002678 <HAL_RCC_OscConfig+0x274>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a4e      	ldr	r2, [pc, #312]	@ (800267c <HAL_RCC_OscConfig+0x278>)
 8002544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002546:	4b4e      	ldr	r3, [pc, #312]	@ (8002680 <HAL_RCC_OscConfig+0x27c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f900 	bl	8001750 <HAL_InitTick>
 8002550:	4603      	mov	r3, r0
 8002552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d052      	beq.n	8002600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	e364      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d032      	beq.n	80025cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002566:	4b43      	ldr	r3, [pc, #268]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a42      	ldr	r2, [pc, #264]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002572:	f7ff f93d 	bl	80017f0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800257a:	f7ff f939 	bl	80017f0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e34d      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800258c:	4b39      	ldr	r3, [pc, #228]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002598:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a35      	ldr	r2, [pc, #212]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b33      	ldr	r3, [pc, #204]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4930      	ldr	r1, [pc, #192]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	492b      	ldr	r1, [pc, #172]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
 80025ca:	e01a      	b.n	8002602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025cc:	4b29      	ldr	r3, [pc, #164]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a28      	ldr	r2, [pc, #160]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d8:	f7ff f90a 	bl	80017f0 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025e0:	f7ff f906 	bl	80017f0 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e31a      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1dc>
 80025fe:	e000      	b.n	8002602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d073      	beq.n	80026f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d005      	beq.n	8002620 <HAL_RCC_OscConfig+0x21c>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d10e      	bne.n	8002638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d10b      	bne.n	8002638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002620:	4b14      	ldr	r3, [pc, #80]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d063      	beq.n	80026f4 <HAL_RCC_OscConfig+0x2f0>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d15f      	bne.n	80026f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e2f7      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002640:	d106      	bne.n	8002650 <HAL_RCC_OscConfig+0x24c>
 8002642:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a0b      	ldr	r2, [pc, #44]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002648:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	e025      	b.n	800269c <HAL_RCC_OscConfig+0x298>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002658:	d114      	bne.n	8002684 <HAL_RCC_OscConfig+0x280>
 800265a:	4b06      	ldr	r3, [pc, #24]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a05      	ldr	r2, [pc, #20]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002660:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a02      	ldr	r2, [pc, #8]	@ (8002674 <HAL_RCC_OscConfig+0x270>)
 800266c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	e013      	b.n	800269c <HAL_RCC_OscConfig+0x298>
 8002674:	40021000 	.word	0x40021000
 8002678:	0800a2c4 	.word	0x0800a2c4
 800267c:	20000000 	.word	0x20000000
 8002680:	20000004 	.word	0x20000004
 8002684:	4ba0      	ldr	r3, [pc, #640]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a9f      	ldr	r2, [pc, #636]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b9d      	ldr	r3, [pc, #628]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a9c      	ldr	r2, [pc, #624]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800269a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d013      	beq.n	80026cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7ff f8a4 	bl	80017f0 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ac:	f7ff f8a0 	bl	80017f0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e2b4      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026be:	4b92      	ldr	r3, [pc, #584]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x2a8>
 80026ca:	e014      	b.n	80026f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f890 	bl	80017f0 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d4:	f7ff f88c 	bl	80017f0 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e2a0      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e6:	4b88      	ldr	r3, [pc, #544]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x2d0>
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d060      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b04      	cmp	r3, #4
 8002706:	d005      	beq.n	8002714 <HAL_RCC_OscConfig+0x310>
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d119      	bne.n	8002742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b02      	cmp	r3, #2
 8002712:	d116      	bne.n	8002742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002714:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_OscConfig+0x328>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e27d      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b76      	ldr	r3, [pc, #472]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	4973      	ldr	r1, [pc, #460]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	e040      	b.n	80027c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d023      	beq.n	8002792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800274a:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff f84b 	bl	80017f0 <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f847 	bl	80017f0 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e25b      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002770:	4b65      	ldr	r3, [pc, #404]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800277c:	4b62      	ldr	r3, [pc, #392]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	061b      	lsls	r3, r3, #24
 800278a:	495f      	ldr	r1, [pc, #380]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
 8002790:	e018      	b.n	80027c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002792:	4b5d      	ldr	r3, [pc, #372]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800279c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279e:	f7ff f827 	bl	80017f0 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a6:	f7ff f823 	bl	80017f0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e237      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b8:	4b53      	ldr	r3, [pc, #332]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d03c      	beq.n	800284a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d01c      	beq.n	8002812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80027da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027de:	4a4a      	ldr	r2, [pc, #296]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7ff f802 	bl	80017f0 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f0:	f7fe fffe 	bl	80017f0 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e212      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002802:	4b41      	ldr	r3, [pc, #260]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ef      	beq.n	80027f0 <HAL_RCC_OscConfig+0x3ec>
 8002810:	e01b      	b.n	800284a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002812:	4b3d      	ldr	r3, [pc, #244]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002818:	4a3b      	ldr	r2, [pc, #236]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800281a:	f023 0301 	bic.w	r3, r3, #1
 800281e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7fe ffe5 	bl	80017f0 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800282a:	f7fe ffe1 	bl	80017f0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e1f5      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800283c:	4b32      	ldr	r3, [pc, #200]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1ef      	bne.n	800282a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80a6 	beq.w	80029a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800285c:	4b2a      	ldr	r3, [pc, #168]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10d      	bne.n	8002884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002868:	4b27      	ldr	r3, [pc, #156]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	4a26      	ldr	r2, [pc, #152]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 800286e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002872:	6593      	str	r3, [r2, #88]	@ 0x58
 8002874:	4b24      	ldr	r3, [pc, #144]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002880:	2301      	movs	r3, #1
 8002882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002884:	4b21      	ldr	r3, [pc, #132]	@ (800290c <HAL_RCC_OscConfig+0x508>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d118      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002890:	4b1e      	ldr	r3, [pc, #120]	@ (800290c <HAL_RCC_OscConfig+0x508>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a1d      	ldr	r2, [pc, #116]	@ (800290c <HAL_RCC_OscConfig+0x508>)
 8002896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800289a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289c:	f7fe ffa8 	bl	80017f0 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a4:	f7fe ffa4 	bl	80017f0 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1b8      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b6:	4b15      	ldr	r3, [pc, #84]	@ (800290c <HAL_RCC_OscConfig+0x508>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d108      	bne.n	80028dc <HAL_RCC_OscConfig+0x4d8>
 80028ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028da:	e029      	b.n	8002930 <HAL_RCC_OscConfig+0x52c>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_OscConfig+0x50c>
 80028e4:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028ea:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f043 0304 	orr.w	r3, r3, #4
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <HAL_RCC_OscConfig+0x504>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002904:	e014      	b.n	8002930 <HAL_RCC_OscConfig+0x52c>
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	40007000 	.word	0x40007000
 8002910:	4b9d      	ldr	r3, [pc, #628]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002916:	4a9c      	ldr	r2, [pc, #624]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002918:	f023 0301 	bic.w	r3, r3, #1
 800291c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002920:	4b99      	ldr	r3, [pc, #612]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a98      	ldr	r2, [pc, #608]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d016      	beq.n	8002966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002938:	f7fe ff5a 	bl	80017f0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293e:	e00a      	b.n	8002956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002940:	f7fe ff56 	bl	80017f0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e168      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002956:	4b8c      	ldr	r3, [pc, #560]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ed      	beq.n	8002940 <HAL_RCC_OscConfig+0x53c>
 8002964:	e015      	b.n	8002992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002966:	f7fe ff43 	bl	80017f0 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe ff3f 	bl	80017f0 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e151      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002984:	4b80      	ldr	r3, [pc, #512]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1ed      	bne.n	800296e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002992:	7ffb      	ldrb	r3, [r7, #31]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d105      	bne.n	80029a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002998:	4b7b      	ldr	r3, [pc, #492]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 800299a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800299c:	4a7a      	ldr	r2, [pc, #488]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 800299e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03c      	beq.n	8002a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01c      	beq.n	80029f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029b8:	4b73      	ldr	r3, [pc, #460]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 80029ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029be:	4a72      	ldr	r2, [pc, #456]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe ff12 	bl	80017f0 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029d0:	f7fe ff0e 	bl	80017f0 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e122      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80029e2:	4b69      	ldr	r3, [pc, #420]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 80029e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0ef      	beq.n	80029d0 <HAL_RCC_OscConfig+0x5cc>
 80029f0:	e01b      	b.n	8002a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029f2:	4b65      	ldr	r3, [pc, #404]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 80029f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029f8:	4a63      	ldr	r2, [pc, #396]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a02:	f7fe fef5 	bl	80017f0 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0a:	f7fe fef1 	bl	80017f0 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e105      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1ef      	bne.n	8002a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80f9 	beq.w	8002c26 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	f040 80cf 	bne.w	8002bdc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a3e:	4b52      	ldr	r3, [pc, #328]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d12c      	bne.n	8002aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d123      	bne.n	8002aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d11b      	bne.n	8002aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d113      	bne.n	8002aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	3b01      	subs	r3, #1
 8002a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d109      	bne.n	8002aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	085b      	lsrs	r3, r3, #1
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d071      	beq.n	8002b90 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	d068      	beq.n	8002b84 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ab2:	4b35      	ldr	r3, [pc, #212]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d105      	bne.n	8002aca <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002abe:	4b32      	ldr	r3, [pc, #200]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e0ac      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ace:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a2d      	ldr	r2, [pc, #180]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ada:	f7fe fe89 	bl	80017f0 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fe85 	bl	80017f0 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e099      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af4:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	4b21      	ldr	r3, [pc, #132]	@ (8002b8c <HAL_RCC_OscConfig+0x788>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b10:	3a01      	subs	r2, #1
 8002b12:	0112      	lsls	r2, r2, #4
 8002b14:	4311      	orrs	r1, r2
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b1a:	0212      	lsls	r2, r2, #8
 8002b1c:	4311      	orrs	r1, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b22:	0852      	lsrs	r2, r2, #1
 8002b24:	3a01      	subs	r2, #1
 8002b26:	0552      	lsls	r2, r2, #21
 8002b28:	4311      	orrs	r1, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b2e:	0852      	lsrs	r2, r2, #1
 8002b30:	3a01      	subs	r2, #1
 8002b32:	0652      	lsls	r2, r2, #25
 8002b34:	4311      	orrs	r1, r2
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b3a:	06d2      	lsls	r2, r2, #27
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	4912      	ldr	r1, [pc, #72]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b44:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0f      	ldr	r2, [pc, #60]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b50:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b5c:	f7fe fe48 	bl	80017f0 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b64:	f7fe fe44 	bl	80017f0 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e058      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b76:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <HAL_RCC_OscConfig+0x784>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b82:	e050      	b.n	8002c26 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e04f      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b90:	4b27      	ldr	r3, [pc, #156]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d144      	bne.n	8002c26 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b24      	ldr	r3, [pc, #144]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b21      	ldr	r3, [pc, #132]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a20      	ldr	r2, [pc, #128]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bb4:	f7fe fe1c 	bl	80017f0 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fe18 	bl	80017f0 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e02c      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b18      	ldr	r3, [pc, #96]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x7b8>
 8002bda:	e024      	b.n	8002c26 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	d01f      	beq.n	8002c22 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be2:	4b13      	ldr	r3, [pc, #76]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a12      	ldr	r2, [pc, #72]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002be8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe fdff 	bl	80017f0 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf6:	f7fe fdfb 	bl	80017f0 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e00f      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c08:	4b09      	ldr	r3, [pc, #36]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4905      	ldr	r1, [pc, #20]	@ (8002c30 <HAL_RCC_OscConfig+0x82c>)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x830>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60cb      	str	r3, [r1, #12]
 8002c20:	e001      	b.n	8002c26 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	40021000 	.word	0x40021000
 8002c34:	feeefffc 	.word	0xfeeefffc

08002c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e11d      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c50:	4b90      	ldr	r3, [pc, #576]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d910      	bls.n	8002c80 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	498b      	ldr	r1, [pc, #556]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b89      	ldr	r3, [pc, #548]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e105      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d010      	beq.n	8002cae <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	4b81      	ldr	r3, [pc, #516]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d908      	bls.n	8002cae <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	497b      	ldr	r1, [pc, #492]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d079      	beq.n	8002dae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d11e      	bne.n	8002d00 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc2:	4b75      	ldr	r3, [pc, #468]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e0dc      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002cd2:	f000 fa07 	bl	80030e4 <RCC_GetSysClockFreqFromPLLSource>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a70      	ldr	r2, [pc, #448]	@ (8002e9c <HAL_RCC_ClockConfig+0x264>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d946      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002cde:	4b6e      	ldr	r3, [pc, #440]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d140      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002cea:	4b6b      	ldr	r3, [pc, #428]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002cf2:	4a69      	ldr	r2, [pc, #420]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e035      	b.n	8002d6c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d107      	bne.n	8002d18 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d08:	4b63      	ldr	r3, [pc, #396]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d115      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0b9      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d107      	bne.n	8002d30 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d20:	4b5d      	ldr	r3, [pc, #372]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0ad      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d30:	4b59      	ldr	r3, [pc, #356]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d101      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0a5      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002d40:	f000 f8b4 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002d44:	4603      	mov	r3, r0
 8002d46:	4a55      	ldr	r2, [pc, #340]	@ (8002e9c <HAL_RCC_ClockConfig+0x264>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d90f      	bls.n	8002d6c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d4c:	4b52      	ldr	r3, [pc, #328]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d58:	4b4f      	ldr	r3, [pc, #316]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d60:	4a4d      	ldr	r2, [pc, #308]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d66:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d68:	2380      	movs	r3, #128	@ 0x80
 8002d6a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f023 0203 	bic.w	r2, r3, #3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4947      	ldr	r1, [pc, #284]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d7e:	f7fe fd37 	bl	80017f0 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d84:	e00a      	b.n	8002d9c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d86:	f7fe fd33 	bl	80017f0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e077      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 020c 	and.w	r2, r3, #12
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d1eb      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b80      	cmp	r3, #128	@ 0x80
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002db4:	4b38      	ldr	r3, [pc, #224]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4a37      	ldr	r2, [pc, #220]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dbe:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	4b31      	ldr	r3, [pc, #196]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d208      	bcs.n	8002dee <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	492b      	ldr	r1, [pc, #172]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dee:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d210      	bcs.n	8002e1e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfc:	4b25      	ldr	r3, [pc, #148]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 020f 	bic.w	r2, r3, #15
 8002e04:	4923      	ldr	r1, [pc, #140]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0c:	4b21      	ldr	r3, [pc, #132]	@ (8002e94 <HAL_RCC_ClockConfig+0x25c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d001      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e036      	b.n	8002e8c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d008      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	4918      	ldr	r1, [pc, #96]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e48:	4b13      	ldr	r3, [pc, #76]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4910      	ldr	r1, [pc, #64]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e5c:	f000 f826 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002e60:	4602      	mov	r2, r0
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <HAL_RCC_ClockConfig+0x260>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <HAL_RCC_ClockConfig+0x268>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	f003 031f 	and.w	r3, r3, #31
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <HAL_RCC_ClockConfig+0x26c>)
 8002e7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_RCC_ClockConfig+0x270>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fe fc65 	bl	8001750 <HAL_InitTick>
 8002e86:	4603      	mov	r3, r0
 8002e88:	73fb      	strb	r3, [r7, #15]

  return status;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40022000 	.word	0x40022000
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	04c4b400 	.word	0x04c4b400
 8002ea0:	0800a2c4 	.word	0x0800a2c4
 8002ea4:	20000000 	.word	0x20000000
 8002ea8:	20000004 	.word	0x20000004

08002eac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b089      	sub	sp, #36	@ 0x24
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eba:	4b3e      	ldr	r3, [pc, #248]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ec4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d005      	beq.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	2b0c      	cmp	r3, #12
 8002ed8:	d121      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d11e      	bne.n	8002f1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ee0:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eec:	4b31      	ldr	r3, [pc, #196]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef2:	0a1b      	lsrs	r3, r3, #8
 8002ef4:	f003 030f 	and.w	r3, r3, #15
 8002ef8:	61fb      	str	r3, [r7, #28]
 8002efa:	e005      	b.n	8002f08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002efc:	4b2d      	ldr	r3, [pc, #180]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	091b      	lsrs	r3, r3, #4
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f08:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10d      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f1c:	e00a      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b04      	cmp	r3, #4
 8002f22:	d102      	bne.n	8002f2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f26:	61bb      	str	r3, [r7, #24]
 8002f28:	e004      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d101      	bne.n	8002f34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f30:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b0c      	cmp	r3, #12
 8002f38:	d134      	bne.n	8002fa4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d003      	beq.n	8002f52 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d003      	beq.n	8002f58 <HAL_RCC_GetSysClockFreq+0xac>
 8002f50:	e005      	b.n	8002f5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f54:	617b      	str	r3, [r7, #20]
      break;
 8002f56:	e005      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0x110>)
 8002f5a:	617b      	str	r3, [r7, #20]
      break;
 8002f5c:	e002      	b.n	8002f64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	617b      	str	r3, [r7, #20]
      break;
 8002f62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	091b      	lsrs	r3, r3, #4
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	3301      	adds	r3, #1
 8002f70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	fb03 f202 	mul.w	r2, r3, r2
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	0e5b      	lsrs	r3, r3, #25
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	3301      	adds	r3, #1
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fa4:	69bb      	ldr	r3, [r7, #24]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	0800a2dc 	.word	0x0800a2dc
 8002fbc:	00f42400 	.word	0x00f42400

08002fc0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fc4:	4b03      	ldr	r3, [pc, #12]	@ (8002fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	20000000 	.word	0x20000000

08002fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fdc:	f7ff fff0 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4904      	ldr	r1, [pc, #16]	@ (8003000 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	0800a2d4 	.word	0x0800a2d4

08003004 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003008:	f7ff ffda 	bl	8002fc0 <HAL_RCC_GetHCLKFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	0adb      	lsrs	r3, r3, #11
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	4904      	ldr	r1, [pc, #16]	@ (800302c <HAL_RCC_GetPCLK2Freq+0x28>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003024:	4618      	mov	r0, r3
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40021000 	.word	0x40021000
 800302c:	0800a2d4 	.word	0x0800a2d4

08003030 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003038:	2300      	movs	r3, #0
 800303a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800303c:	4b27      	ldr	r3, [pc, #156]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800303e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003048:	f7ff f8f8 	bl	800223c <HAL_PWREx_GetVoltageRange>
 800304c:	6178      	str	r0, [r7, #20]
 800304e:	e014      	b.n	800307a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003050:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003054:	4a21      	ldr	r2, [pc, #132]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003056:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800305a:	6593      	str	r3, [r2, #88]	@ 0x58
 800305c:	4b1f      	ldr	r3, [pc, #124]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003068:	f7ff f8e8 	bl	800223c <HAL_PWREx_GetVoltageRange>
 800306c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800306e:	4b1b      	ldr	r3, [pc, #108]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003072:	4a1a      	ldr	r2, [pc, #104]	@ (80030dc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003078:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003080:	d10b      	bne.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b80      	cmp	r3, #128	@ 0x80
 8003086:	d913      	bls.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2ba0      	cmp	r3, #160	@ 0xa0
 800308c:	d902      	bls.n	8003094 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800308e:	2302      	movs	r3, #2
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e00d      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003094:	2301      	movs	r3, #1
 8003096:	613b      	str	r3, [r7, #16]
 8003098:	e00a      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2b7f      	cmp	r3, #127	@ 0x7f
 800309e:	d902      	bls.n	80030a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80030a0:	2302      	movs	r3, #2
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e004      	b.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b70      	cmp	r3, #112	@ 0x70
 80030aa:	d101      	bne.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ac:	2301      	movs	r3, #1
 80030ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 020f 	bic.w	r2, r3, #15
 80030b8:	4909      	ldr	r1, [pc, #36]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030c0:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40022000 	.word	0x40022000

080030e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030ea:	4b2d      	ldr	r3, [pc, #180]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d00b      	beq.n	8003112 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d825      	bhi.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d008      	beq.n	8003118 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d11f      	bne.n	800314c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800310e:	613b      	str	r3, [r7, #16]
    break;
 8003110:	e01f      	b.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003112:	4b24      	ldr	r3, [pc, #144]	@ (80031a4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003114:	613b      	str	r3, [r7, #16]
    break;
 8003116:	e01c      	b.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003118:	4b21      	ldr	r3, [pc, #132]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d107      	bne.n	8003134 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003124:	4b1e      	ldr	r3, [pc, #120]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312a:	0a1b      	lsrs	r3, r3, #8
 800312c:	f003 030f 	and.w	r3, r3, #15
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e005      	b.n	8003140 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003134:	4b1a      	ldr	r3, [pc, #104]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003140:	4a19      	ldr	r2, [pc, #100]	@ (80031a8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003148:	613b      	str	r3, [r7, #16]
    break;
 800314a:	e002      	b.n	8003152 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
    break;
 8003150:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003152:	4b13      	ldr	r3, [pc, #76]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	3301      	adds	r3, #1
 800315e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003160:	4b0f      	ldr	r3, [pc, #60]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	fb03 f202 	mul.w	r2, r3, r2
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003178:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	0e5b      	lsrs	r3, r3, #25
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003192:	683b      	ldr	r3, [r7, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40021000 	.word	0x40021000
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	0800a2dc 	.word	0x0800a2dc

080031ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031b4:	2300      	movs	r3, #0
 80031b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031b8:	2300      	movs	r3, #0
 80031ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d040      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80031cc:	2b80      	cmp	r3, #128	@ 0x80
 80031ce:	d02a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031d0:	2b80      	cmp	r3, #128	@ 0x80
 80031d2:	d825      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031d4:	2b60      	cmp	r3, #96	@ 0x60
 80031d6:	d026      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80031d8:	2b60      	cmp	r3, #96	@ 0x60
 80031da:	d821      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031dc:	2b40      	cmp	r3, #64	@ 0x40
 80031de:	d006      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x42>
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	d81d      	bhi.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x50>
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	d010      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80031ec:	e018      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031ee:	4b89      	ldr	r3, [pc, #548]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	4a88      	ldr	r2, [pc, #544]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031fa:	e015      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	3304      	adds	r3, #4
 8003200:	2100      	movs	r1, #0
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fa82 	bl	800470c <RCCEx_PLLSAI1_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800320c:	e00c      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3320      	adds	r3, #32
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f001 fb6d 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800321e:	e003      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	74fb      	strb	r3, [r7, #19]
      break;
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003226:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003228:	7cfb      	ldrb	r3, [r7, #19]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800322e:	4b79      	ldr	r3, [pc, #484]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003230:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003234:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800323c:	4975      	ldr	r1, [pc, #468]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800323e:	4313      	orrs	r3, r2
 8003240:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003244:	e001      	b.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	7cfb      	ldrb	r3, [r7, #19]
 8003248:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d047      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325e:	d030      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003264:	d82a      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003266:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800326a:	d02a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800326c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003270:	d824      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003276:	d008      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003278:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800327c:	d81e      	bhi.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003286:	d010      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003288:	e018      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800328a:	4b62      	ldr	r3, [pc, #392]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	4a61      	ldr	r2, [pc, #388]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003294:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003296:	e015      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 fa34 	bl	800470c <RCCEx_PLLSAI1_Config>
 80032a4:	4603      	mov	r3, r0
 80032a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032a8:	e00c      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3320      	adds	r3, #32
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 fb1f 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ba:	e003      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	74fb      	strb	r3, [r7, #19]
      break;
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80032c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c4:	7cfb      	ldrb	r3, [r7, #19]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ca:	4b52      	ldr	r3, [pc, #328]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80032d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d8:	494e      	ldr	r1, [pc, #312]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80032e0:	e001      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e2:	7cfb      	ldrb	r3, [r7, #19]
 80032e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 809f 	beq.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f4:	2300      	movs	r3, #0
 80032f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032f8:	4b46      	ldr	r3, [pc, #280]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003308:	2300      	movs	r3, #0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00d      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	4b41      	ldr	r3, [pc, #260]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	@ 0x58
 800331a:	4b3e      	ldr	r3, [pc, #248]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800331e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003322:	60bb      	str	r3, [r7, #8]
 8003324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003326:	2301      	movs	r3, #1
 8003328:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800332a:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a3a      	ldr	r2, [pc, #232]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003336:	f7fe fa5b 	bl	80017f0 <HAL_GetTick>
 800333a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800333c:	e009      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800333e:	f7fe fa57 	bl	80017f0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d902      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	74fb      	strb	r3, [r7, #19]
        break;
 8003350:	e005      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003352:	4b31      	ldr	r3, [pc, #196]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0ef      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d15b      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003364:	4b2b      	ldr	r3, [pc, #172]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800336e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d01f      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	429a      	cmp	r2, r3
 8003380:	d019      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003382:	4b24      	ldr	r3, [pc, #144]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003388:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800338c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800338e:	4b21      	ldr	r3, [pc, #132]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003394:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800339a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800339e:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033ae:	4a19      	ldr	r2, [pc, #100]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c0:	f7fe fa16 	bl	80017f0 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033c6:	e00b      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fe fa12 	bl	80017f0 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d902      	bls.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	74fb      	strb	r3, [r7, #19]
            break;
 80033de:	e006      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ec      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80033ee:	7cfb      	ldrb	r3, [r7, #19]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10c      	bne.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033f4:	4b07      	ldr	r3, [pc, #28]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80033f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033fa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003404:	4903      	ldr	r1, [pc, #12]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800340c:	e008      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800340e:	7cfb      	ldrb	r3, [r7, #19]
 8003410:	74bb      	strb	r3, [r7, #18]
 8003412:	e005      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003414:	40021000 	.word	0x40021000
 8003418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003420:	7c7b      	ldrb	r3, [r7, #17]
 8003422:	2b01      	cmp	r3, #1
 8003424:	d105      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003426:	4ba0      	ldr	r3, [pc, #640]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	4a9f      	ldr	r2, [pc, #636]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800342c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800343e:	4b9a      	ldr	r3, [pc, #616]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003444:	f023 0203 	bic.w	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344c:	4996      	ldr	r1, [pc, #600]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003460:	4b91      	ldr	r3, [pc, #580]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003462:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003466:	f023 020c 	bic.w	r2, r3, #12
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	498e      	ldr	r1, [pc, #568]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00a      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003482:	4b89      	ldr	r3, [pc, #548]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003488:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	4985      	ldr	r1, [pc, #532]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034a4:	4b80      	ldr	r3, [pc, #512]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b2:	497d      	ldr	r1, [pc, #500]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034c6:	4b78      	ldr	r3, [pc, #480]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d4:	4974      	ldr	r1, [pc, #464]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00a      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034e8:	4b6f      	ldr	r3, [pc, #444]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f6:	496c      	ldr	r1, [pc, #432]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00a      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800350a:	4b67      	ldr	r3, [pc, #412]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800350c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003510:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003518:	4963      	ldr	r1, [pc, #396]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800351a:	4313      	orrs	r3, r2
 800351c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00a      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800352c:	4b5e      	ldr	r3, [pc, #376]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003532:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800353a:	495b      	ldr	r1, [pc, #364]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00a      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800354e:	4b56      	ldr	r3, [pc, #344]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003554:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	4952      	ldr	r1, [pc, #328]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00a      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003570:	4b4d      	ldr	r3, [pc, #308]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003576:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	494a      	ldr	r1, [pc, #296]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003580:	4313      	orrs	r3, r2
 8003582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003592:	4b45      	ldr	r3, [pc, #276]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003598:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	4941      	ldr	r1, [pc, #260]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00a      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035b4:	4b3c      	ldr	r3, [pc, #240]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80035ba:	f023 0203 	bic.w	r2, r3, #3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c2:	4939      	ldr	r1, [pc, #228]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d028      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d6:	4b34      	ldr	r3, [pc, #208]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e4:	4930      	ldr	r1, [pc, #192]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f4:	d106      	bne.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f6:	4b2c      	ldr	r3, [pc, #176]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a2b      	ldr	r2, [pc, #172]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80035fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003600:	60d3      	str	r3, [r2, #12]
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003608:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800360c:	d10c      	bne.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	3304      	adds	r3, #4
 8003612:	2101      	movs	r1, #1
 8003614:	4618      	mov	r0, r3
 8003616:	f001 f879 	bl	800470c <RCCEx_PLLSAI1_Config>
 800361a:	4603      	mov	r3, r0
 800361c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d04d      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363c:	d108      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800363e:	4b1a      	ldr	r3, [pc, #104]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003640:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003644:	4a18      	ldr	r2, [pc, #96]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003646:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800364a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800364e:	e012      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003650:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003656:	4a14      	ldr	r2, [pc, #80]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003658:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800365c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003660:	4b11      	ldr	r3, [pc, #68]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003666:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366e:	490e      	ldr	r1, [pc, #56]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800367a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800367e:	d106      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003680:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a08      	ldr	r2, [pc, #32]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003686:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800368a:	60d3      	str	r3, [r2, #12]
 800368c:	e020      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003692:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003696:	d109      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003698:	4b03      	ldr	r3, [pc, #12]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	4a02      	ldr	r2, [pc, #8]	@ (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800369e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036a2:	60d3      	str	r3, [r2, #12]
 80036a4:	e014      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3304      	adds	r3, #4
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 f825 	bl	800470c <RCCEx_PLLSAI1_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d028      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036dc:	4b7a      	ldr	r3, [pc, #488]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ea:	4977      	ldr	r1, [pc, #476]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036fa:	d106      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036fc:	4b72      	ldr	r3, [pc, #456]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a71      	ldr	r2, [pc, #452]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003702:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003706:	60d3      	str	r3, [r2, #12]
 8003708:	e011      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800370e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003712:	d10c      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3304      	adds	r3, #4
 8003718:	2101      	movs	r1, #1
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fff6 	bl	800470c <RCCEx_PLLSAI1_Config>
 8003720:	4603      	mov	r3, r0
 8003722:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003724:	7cfb      	ldrb	r3, [r7, #19]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800372a:	7cfb      	ldrb	r3, [r7, #19]
 800372c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01e      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800373a:	4b63      	ldr	r3, [pc, #396]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800373c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003740:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800374a:	495f      	ldr	r1, [pc, #380]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800375c:	d10c      	bne.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3304      	adds	r3, #4
 8003762:	2102      	movs	r1, #2
 8003764:	4618      	mov	r0, r3
 8003766:	f000 ffd1 	bl	800470c <RCCEx_PLLSAI1_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00b      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003784:	4b50      	ldr	r3, [pc, #320]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800378a:	f023 0204 	bic.w	r2, r3, #4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003794:	494c      	ldr	r1, [pc, #304]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003796:	4313      	orrs	r3, r2
 8003798:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00b      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80037a8:	4b47      	ldr	r3, [pc, #284]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037ae:	f023 0218 	bic.w	r2, r3, #24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b8:	4943      	ldr	r1, [pc, #268]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d035      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80037cc:	4b3e      	ldr	r3, [pc, #248]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a3d      	ldr	r2, [pc, #244]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fe f80a 	bl	80017f0 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037de:	e009      	b.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e0:	f7fe f806 	bl	80017f0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	74fb      	strb	r3, [r7, #19]
        break;
 80037f2:	e005      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80037f4:	4b34      	ldr	r3, [pc, #208]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1ef      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d113      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8003806:	4b30      	ldr	r3, [pc, #192]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003808:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800380c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003816:	492c      	ldr	r1, [pc, #176]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3320      	adds	r3, #32
 8003822:	2102      	movs	r1, #2
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f865 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 800382e:	7cfb      	ldrb	r3, [r7, #19]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003844:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800384a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003854:	491c      	ldr	r1, [pc, #112]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	d10c      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3320      	adds	r3, #32
 800386c:	2101      	movs	r1, #1
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f840 	bl	80048f4 <RCCEx_PLLSAI2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003878:	7cfb      	ldrb	r3, [r7, #19]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d017      	beq.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800388e:	4b0e      	ldr	r3, [pc, #56]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003890:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003894:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	490a      	ldr	r1, [pc, #40]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038b0:	d105      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a04      	ldr	r2, [pc, #16]	@ (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80038b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038bc:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038be:	7cbb      	ldrb	r3, [r7, #18]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000

080038cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038de:	d13e      	bne.n	800395e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80038e0:	4bb6      	ldr	r3, [pc, #728]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80038e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038ea:	60fb      	str	r3, [r7, #12]

    switch(srcclk)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038f2:	d028      	beq.n	8003946 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80038fa:	f200 86f2 	bhi.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003904:	d005      	beq.n	8003912 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d00e      	beq.n	800392c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800390e:	f000 bee8 	b.w	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003912:	4baa      	ldr	r3, [pc, #680]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b02      	cmp	r3, #2
 800391e:	f040 86e2 	bne.w	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
        frequency = LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003926:	61fb      	str	r3, [r7, #28]
      break;
 8003928:	f000 bedd 	b.w	80046e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800392c:	4ba3      	ldr	r3, [pc, #652]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800392e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	f040 86d7 	bne.w	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = LSI_VALUE;
 800393c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003940:	61fb      	str	r3, [r7, #28]
      break;
 8003942:	f000 bed2 	b.w	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003946:	4b9d      	ldr	r3, [pc, #628]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003952:	f040 86cc 	bne.w	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
        frequency = HSE_VALUE / 32U;
 8003956:	4b9a      	ldr	r3, [pc, #616]	@ (8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8003958:	61fb      	str	r3, [r7, #28]
      break;
 800395a:	f000 bec8 	b.w	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395e:	4b97      	ldr	r3, [pc, #604]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	2b03      	cmp	r3, #3
 800396c:	d036      	beq.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d840      	bhi.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d003      	beq.n	8003982 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d020      	beq.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003980:	e039      	b.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003982:	4b8e      	ldr	r3, [pc, #568]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b02      	cmp	r3, #2
 800398c:	d116      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800398e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d005      	beq.n	80039a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800399a:	4b88      	ldr	r3, [pc, #544]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 030f 	and.w	r3, r3, #15
 80039a4:	e005      	b.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80039a6:	4b85      	ldr	r3, [pc, #532]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	4a84      	ldr	r2, [pc, #528]	@ (8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80039b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039ba:	e01f      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	61bb      	str	r3, [r7, #24]
      break;
 80039c0:	e01c      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80039c2:	4b7e      	ldr	r3, [pc, #504]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ce:	d102      	bne.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80039d0:	4b7d      	ldr	r3, [pc, #500]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039d4:	e012      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
      break;
 80039da:	e00f      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039dc:	4b77      	ldr	r3, [pc, #476]	@ (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e8:	d102      	bne.n	80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80039ea:	4b77      	ldr	r3, [pc, #476]	@ (8003bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80039ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80039ee:	e005      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61bb      	str	r3, [r7, #24]
      break;
 80039f4:	e002      	b.n	80039fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
      break;
 80039fa:	bf00      	nop
    }

    switch(PeriphClk)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a02:	f000 8604 	beq.w	800460e <HAL_RCCEx_GetPeriphCLKFreq+0xd42>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a0c:	f200 8671 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a16:	f000 8467 	beq.w	80042e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a20:	f200 8667 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a2a:	f000 852f 	beq.w	800448c <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a34:	f200 865d 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a3e:	f000 8185 	beq.w	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x480>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a48:	f200 8653 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a52:	f000 80cb 	beq.w	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a5c:	f200 8649 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a66:	f000 842e 	beq.w	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a70:	f200 863f 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a7a:	f000 83e2 	beq.w	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a84:	f200 8635 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	f000 80ad 	beq.w	8003bec <HAL_RCCEx_GetPeriphCLKFreq+0x320>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a98:	f200 862b 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa2:	f000 809b 	beq.w	8003bdc <HAL_RCCEx_GetPeriphCLKFreq+0x310>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aac:	f200 8621 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab6:	f000 8089 	beq.w	8003bcc <HAL_RCCEx_GetPeriphCLKFreq+0x300>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ac0:	f200 8617 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aca:	f000 8552 	beq.w	8004572 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad4:	f200 860d 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ade:	f000 84fe 	beq.w	80044de <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae8:	f200 8603 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003af2:	f000 849f 	beq.w	8004434 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003afc:	f200 85f9 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b80      	cmp	r3, #128	@ 0x80
 8003b04:	f000 846a 	beq.w	80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b80      	cmp	r3, #128	@ 0x80
 8003b0c:	f200 85f1 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d84c      	bhi.n	8003bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	f000 85ea 	beq.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	2b1f      	cmp	r3, #31
 8003b24:	f200 85e5 	bhi.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003b28:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8003b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b2e:	bf00      	nop
 8003b30:	08003f41 	.word	0x08003f41
 8003b34:	08003faf 	.word	0x08003faf
 8003b38:	080046f3 	.word	0x080046f3
 8003b3c:	08004043 	.word	0x08004043
 8003b40:	080046f3 	.word	0x080046f3
 8003b44:	080046f3 	.word	0x080046f3
 8003b48:	080046f3 	.word	0x080046f3
 8003b4c:	080040bb 	.word	0x080040bb
 8003b50:	080046f3 	.word	0x080046f3
 8003b54:	080046f3 	.word	0x080046f3
 8003b58:	080046f3 	.word	0x080046f3
 8003b5c:	080046f3 	.word	0x080046f3
 8003b60:	080046f3 	.word	0x080046f3
 8003b64:	080046f3 	.word	0x080046f3
 8003b68:	080046f3 	.word	0x080046f3
 8003b6c:	0800413f 	.word	0x0800413f
 8003b70:	080046f3 	.word	0x080046f3
 8003b74:	080046f3 	.word	0x080046f3
 8003b78:	080046f3 	.word	0x080046f3
 8003b7c:	080046f3 	.word	0x080046f3
 8003b80:	080046f3 	.word	0x080046f3
 8003b84:	080046f3 	.word	0x080046f3
 8003b88:	080046f3 	.word	0x080046f3
 8003b8c:	080046f3 	.word	0x080046f3
 8003b90:	080046f3 	.word	0x080046f3
 8003b94:	080046f3 	.word	0x080046f3
 8003b98:	080046f3 	.word	0x080046f3
 8003b9c:	080046f3 	.word	0x080046f3
 8003ba0:	080046f3 	.word	0x080046f3
 8003ba4:	080046f3 	.word	0x080046f3
 8003ba8:	080046f3 	.word	0x080046f3
 8003bac:	080041c1 	.word	0x080041c1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	f000 83e6 	beq.w	8004384 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003bb8:	f000 bd9b 	b.w	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	0007a120 	.word	0x0007a120
 8003bc4:	0800a2dc 	.word	0x0800a2dc
 8003bc8:	00f42400 	.word	0x00f42400
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003bd2:	f000 ff83 	bl	8004adc <RCCEx_GetSAIxPeriphCLKFreq>
 8003bd6:	61f8      	str	r0, [r7, #28]
      break;
 8003bd8:	f000 bd8e 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003bdc:	69b9      	ldr	r1, [r7, #24]
 8003bde:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003be2:	f000 ff7b 	bl	8004adc <RCCEx_GetSAIxPeriphCLKFreq>
 8003be6:	61f8      	str	r0, [r7, #28]
      break;
 8003be8:	f000 bd86 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003bec:	4b9a      	ldr	r3, [pc, #616]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bf2:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003bfe:	d015      	beq.n	8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c06:	f200 8092 	bhi.w	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c10:	d029      	beq.n	8003c66 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c18:	f200 8089 	bhi.w	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d07b      	beq.n	8003d1a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c28:	d04a      	beq.n	8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
          break;
 8003c2a:	e080      	b.n	8003d2e <HAL_RCCEx_GetPeriphCLKFreq+0x462>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c2c:	4b8a      	ldr	r3, [pc, #552]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d17d      	bne.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c38:	4b87      	ldr	r3, [pc, #540]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 8003c44:	4b84      	ldr	r3, [pc, #528]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	091b      	lsrs	r3, r3, #4
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	e005      	b.n	8003c5c <HAL_RCCEx_GetPeriphCLKFreq+0x390>
 8003c50:	4b81      	ldr	r3, [pc, #516]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	f003 030f 	and.w	r3, r3, #15
 8003c5c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c62:	61fb      	str	r3, [r7, #28]
          break;
 8003c64:	e066      	b.n	8003d34 <HAL_RCCEx_GetPeriphCLKFreq+0x468>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c66:	4b7c      	ldr	r3, [pc, #496]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c72:	d162      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003c74:	4b78      	ldr	r3, [pc, #480]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c80:	d15b      	bne.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003c82:	4b75      	ldr	r3, [pc, #468]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c8c:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	fb03 f202 	mul.w	r2, r3, r2
 8003c96:	4b70      	ldr	r3, [pc, #448]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	0d5b      	lsrs	r3, r3, #21
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	61fb      	str	r3, [r7, #28]
          break;
 8003cbe:	e03c      	b.n	8003d3a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003cc0:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ccc:	d138      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003cce:	4b62      	ldr	r3, [pc, #392]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cda:	d131      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003cdc:	4b5e      	ldr	r3, [pc, #376]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce6:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
 8003cf0:	4b59      	ldr	r3, [pc, #356]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d02:	4b55      	ldr	r3, [pc, #340]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	0d5b      	lsrs	r3, r3, #21
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	69ba      	ldr	r2, [r7, #24]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	61fb      	str	r3, [r7, #28]
          break;
 8003d18:	e012      	b.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003d1a:	4b4f      	ldr	r3, [pc, #316]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	d10e      	bne.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
            frequency = HSI48_VALUE;
 8003d28:	4b4d      	ldr	r3, [pc, #308]	@ (8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8003d2a:	61fb      	str	r3, [r7, #28]
          break;
 8003d2c:	e00b      	b.n	8003d46 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
          break;
 8003d2e:	bf00      	nop
 8003d30:	f000 bce2 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d34:	bf00      	nop
 8003d36:	f000 bcdf 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d3a:	bf00      	nop
 8003d3c:	f000 bcdc 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d40:	bf00      	nop
 8003d42:	f000 bcd9 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003d46:	bf00      	nop
        break;
 8003d48:	f000 bcd6 	b.w	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      if(HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL))  /* PLL "P" ? */
 8003d4c:	4b42      	ldr	r3, [pc, #264]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d5a:	d13d      	bne.n	8003dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003d5c:	4b3e      	ldr	r3, [pc, #248]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d68:	f040 84c5 	bne.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d78:	f040 84bd 	bne.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
            plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003d7c:	4b36      	ldr	r3, [pc, #216]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	0a1b      	lsrs	r3, r3, #8
 8003d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d86:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	fb03 f202 	mul.w	r2, r3, r2
 8003d90:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 030f 	and.w	r3, r3, #15
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da0:	61bb      	str	r3, [r7, #24]
            pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8003da2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	0edb      	lsrs	r3, r3, #27
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	617b      	str	r3, [r7, #20]
            if(pllp == 0U)
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
              if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8003db4:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
                pllp = 17U;
 8003dc0:	2311      	movs	r3, #17
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e001      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
                pllp = 7U;
 8003dc6:	2307      	movs	r3, #7
 8003dc8:	617b      	str	r3, [r7, #20]
            frequency = (pllvco / pllp);
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	61fb      	str	r3, [r7, #28]
      break;
 8003dd4:	f000 bc8f 	b.w	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003dd8:	4b1f      	ldr	r3, [pc, #124]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003dea:	d016      	beq.n	8003e1a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003df2:	f200 809b 	bhi.w	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dfc:	d032      	beq.n	8003e64 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e04:	f200 8092 	bhi.w	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8084 	beq.w	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e16:	d052      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
          break;
 8003e18:	e088      	b.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	f040 8084 	bne.w	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e28:	4b0b      	ldr	r3, [pc, #44]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8003e34:	4b08      	ldr	r3, [pc, #32]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	e005      	b.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x580>
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8003e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	f003 030f 	and.w	r3, r3, #15
 8003e4c:	4a03      	ldr	r2, [pc, #12]	@ (8003e5c <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8003e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e52:	61fb      	str	r3, [r7, #28]
          break;
 8003e54:	e06c      	b.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	0800a2dc 	.word	0x0800a2dc
 8003e60:	02dc6c00 	.word	0x02dc6c00
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003e64:	4ba5      	ldr	r3, [pc, #660]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e70:	d160      	bne.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003e72:	4ba2      	ldr	r3, [pc, #648]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e7e:	d159      	bne.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003e80:	4b9e      	ldr	r3, [pc, #632]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8a:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	68ba      	ldr	r2, [r7, #8]
 8003e90:	fb03 f202 	mul.w	r2, r3, r2
 8003e94:	4b99      	ldr	r3, [pc, #612]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	091b      	lsrs	r3, r3, #4
 8003e9a:	f003 030f 	and.w	r3, r3, #15
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003ea6:	4b95      	ldr	r3, [pc, #596]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	0d5b      	lsrs	r3, r3, #21
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eba:	61fb      	str	r3, [r7, #28]
          break;
 8003ebc:	e03a      	b.n	8003f34 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003ebe:	4b8f      	ldr	r3, [pc, #572]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003eca:	d135      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003ecc:	4b8b      	ldr	r3, [pc, #556]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed8:	d12e      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003eda:	4b88      	ldr	r3, [pc, #544]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ee4:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	fb03 f202 	mul.w	r2, r3, r2
 8003eee:	4b83      	ldr	r3, [pc, #524]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	091b      	lsrs	r3, r3, #4
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	3301      	adds	r3, #1
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003f00:	4b7e      	ldr	r3, [pc, #504]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	0d5b      	lsrs	r3, r3, #21
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f14:	61fb      	str	r3, [r7, #28]
          break;
 8003f16:	e00f      	b.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8003f18:	4b78      	ldr	r3, [pc, #480]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d10a      	bne.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
            frequency = HSI48_VALUE;
 8003f26:	4b76      	ldr	r3, [pc, #472]	@ (8004100 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8003f28:	61fb      	str	r3, [r7, #28]
          break;
 8003f2a:	e007      	b.n	8003f3c <HAL_RCCEx_GetPeriphCLKFreq+0x670>
          break;
 8003f2c:	bf00      	nop
 8003f2e:	e3e2      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f30:	bf00      	nop
 8003f32:	e3e0      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f34:	bf00      	nop
 8003f36:	e3de      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f38:	bf00      	nop
 8003f3a:	e3dc      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
          break;
 8003f3c:	bf00      	nop
      break;
 8003f3e:	e3da      	b.n	80046f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe2a>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f40:	4b6e      	ldr	r3, [pc, #440]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d827      	bhi.n	8003fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x6d6>
 8003f52:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>)
 8003f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f58:	08003f69 	.word	0x08003f69
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f79 	.word	0x08003f79
 8003f64:	08003f8d 	.word	0x08003f8d
          frequency = HAL_RCC_GetPCLK2Freq();
 8003f68:	f7ff f84c 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 8003f6c:	61f8      	str	r0, [r7, #28]
          break;
 8003f6e:	e01d      	b.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f70:	f7fe ff9c 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8003f74:	61f8      	str	r0, [r7, #28]
          break;
 8003f76:	e019      	b.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f78:	4b60      	ldr	r3, [pc, #384]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f84:	d10f      	bne.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
            frequency = HSI_VALUE;
 8003f86:	4b5f      	ldr	r3, [pc, #380]	@ (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8003f88:	61fb      	str	r3, [r7, #28]
          break;
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f8c:	4b5b      	ldr	r3, [pc, #364]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d107      	bne.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
            frequency = LSE_VALUE;
 8003f9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f9e:	61fb      	str	r3, [r7, #28]
          break;
 8003fa0:	e003      	b.n	8003faa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
          break;
 8003fa2:	bf00      	nop
 8003fa4:	e3a8      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003fa6:	bf00      	nop
 8003fa8:	e3a6      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8003faa:	bf00      	nop
        break;
 8003fac:	e3a4      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003fae:	4b53      	ldr	r3, [pc, #332]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fb4:	f003 030c 	and.w	r3, r3, #12
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b0c      	cmp	r3, #12
 8003fbe:	d83a      	bhi.n	8004036 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8003fc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003ffd 	.word	0x08003ffd
 8003fcc:	08004037 	.word	0x08004037
 8003fd0:	08004037 	.word	0x08004037
 8003fd4:	08004037 	.word	0x08004037
 8003fd8:	08004005 	.word	0x08004005
 8003fdc:	08004037 	.word	0x08004037
 8003fe0:	08004037 	.word	0x08004037
 8003fe4:	08004037 	.word	0x08004037
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004037 	.word	0x08004037
 8003ff0:	08004037 	.word	0x08004037
 8003ff4:	08004037 	.word	0x08004037
 8003ff8:	08004021 	.word	0x08004021
          frequency = HAL_RCC_GetPCLK1Freq();
 8003ffc:	f7fe ffec 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004000:	61f8      	str	r0, [r7, #28]
          break;
 8004002:	e01d      	b.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          frequency = HAL_RCC_GetSysClockFreq();
 8004004:	f7fe ff52 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004008:	61f8      	str	r0, [r7, #28]
          break;
 800400a:	e019      	b.n	8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x774>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800400c:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004018:	d10f      	bne.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
            frequency = HSI_VALUE;
 800401a:	4b3a      	ldr	r3, [pc, #232]	@ (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800401c:	61fb      	str	r3, [r7, #28]
          break;
 800401e:	e00c      	b.n	800403a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004020:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
            frequency = LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	61fb      	str	r3, [r7, #28]
          break;
 8004034:	e003      	b.n	800403e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          break;
 8004036:	bf00      	nop
 8004038:	e35e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800403a:	bf00      	nop
 800403c:	e35c      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800403e:	bf00      	nop
        break;
 8004040:	e35a      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004042:	4b2e      	ldr	r3, [pc, #184]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b30      	cmp	r3, #48	@ 0x30
 8004052:	d021      	beq.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b30      	cmp	r3, #48	@ 0x30
 8004058:	d829      	bhi.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b20      	cmp	r3, #32
 800405e:	d011      	beq.n	8004084 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b20      	cmp	r3, #32
 8004064:	d823      	bhi.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d003      	beq.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b10      	cmp	r3, #16
 8004070:	d004      	beq.n	800407c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          break;
 8004072:	e01c      	b.n	80040ae <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004074:	f7fe ffb0 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004078:	61f8      	str	r0, [r7, #28]
          break;
 800407a:	e01d      	b.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          frequency = HAL_RCC_GetSysClockFreq();
 800407c:	f7fe ff16 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004080:	61f8      	str	r0, [r7, #28]
          break;
 8004082:	e019      	b.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004090:	d10f      	bne.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
            frequency = HSI_VALUE;
 8004092:	4b1c      	ldr	r3, [pc, #112]	@ (8004104 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8004094:	61fb      	str	r3, [r7, #28]
          break;
 8004096:	e00c      	b.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004098:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d107      	bne.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
            frequency = LSE_VALUE;
 80040a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040aa:	61fb      	str	r3, [r7, #28]
          break;
 80040ac:	e003      	b.n	80040b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
          break;
 80040ae:	bf00      	nop
 80040b0:	e322      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040b2:	bf00      	nop
 80040b4:	e320      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80040b6:	bf00      	nop
        break;
 80040b8:	e31e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040c4:	60fb      	str	r3, [r7, #12]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80040ca:	d027      	beq.n	800411c <HAL_RCCEx_GetPeriphCLKFreq+0x850>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80040d0:	d82f      	bhi.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b80      	cmp	r3, #128	@ 0x80
 80040d6:	d017      	beq.n	8004108 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d829      	bhi.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d004      	beq.n	80040f4 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
          break;
 80040ea:	e022      	b.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
          frequency = HAL_RCC_GetPCLK1Freq();
 80040ec:	f7fe ff74 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80040f0:	61f8      	str	r0, [r7, #28]
          break;
 80040f2:	e023      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
          frequency = HAL_RCC_GetSysClockFreq();
 80040f4:	f7fe feda 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80040f8:	61f8      	str	r0, [r7, #28]
          break;
 80040fa:	e01f      	b.n	800413c <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80040fc:	40021000 	.word	0x40021000
 8004100:	02dc6c00 	.word	0x02dc6c00
 8004104:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004108:	4b9b      	ldr	r3, [pc, #620]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004114:	d10f      	bne.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
            frequency = HSI_VALUE;
 8004116:	4b99      	ldr	r3, [pc, #612]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004118:	61fb      	str	r3, [r7, #28]
          break;
 800411a:	e00c      	b.n	8004136 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800411c:	4b96      	ldr	r3, [pc, #600]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d107      	bne.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
            frequency = LSE_VALUE;
 800412a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800412e:	61fb      	str	r3, [r7, #28]
          break;
 8004130:	e003      	b.n	800413a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 8004132:	bf00      	nop
 8004134:	e2e0      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004136:	bf00      	nop
 8004138:	e2de      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800413a:	bf00      	nop
        break;
 800413c:	e2dc      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800413e:	4b8e      	ldr	r3, [pc, #568]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004150:	d025      	beq.n	800419e <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004158:	d82c      	bhi.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004160:	d013      	beq.n	800418a <HAL_RCCEx_GetPeriphCLKFreq+0x8be>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004168:	d824      	bhi.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d004      	beq.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004176:	d004      	beq.n	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x8b6>
          break;
 8004178:	e01c      	b.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
          frequency = HAL_RCC_GetPCLK1Freq();
 800417a:	f7fe ff2d 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800417e:	61f8      	str	r0, [r7, #28]
          break;
 8004180:	e01d      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004182:	f7fe fe93 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004186:	61f8      	str	r0, [r7, #28]
          break;
 8004188:	e019      	b.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800418a:	4b7b      	ldr	r3, [pc, #492]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004196:	d10f      	bne.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
            frequency = HSI_VALUE;
 8004198:	4b78      	ldr	r3, [pc, #480]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800419a:	61fb      	str	r3, [r7, #28]
          break;
 800419c:	e00c      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800419e:	4b76      	ldr	r3, [pc, #472]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d107      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = LSE_VALUE;
 80041ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b0:	61fb      	str	r3, [r7, #28]
          break;
 80041b2:	e003      	b.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 80041b4:	bf00      	nop
 80041b6:	e29f      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041b8:	bf00      	nop
 80041ba:	e29d      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80041bc:	bf00      	nop
        break;
 80041be:	e29b      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80041c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041d2:	d025      	beq.n	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80041da:	d82c      	bhi.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e2:	d013      	beq.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041ea:	d824      	bhi.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f8:	d004      	beq.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
          break;
 80041fa:	e01c      	b.n	8004236 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041fc:	f7fe feec 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004200:	61f8      	str	r0, [r7, #28]
          break;
 8004202:	e01d      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          frequency = HAL_RCC_GetSysClockFreq();
 8004204:	f7fe fe52 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004208:	61f8      	str	r0, [r7, #28]
          break;
 800420a:	e019      	b.n	8004240 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800420c:	4b5a      	ldr	r3, [pc, #360]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004218:	d10f      	bne.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
            frequency = HSI_VALUE;
 800421a:	4b58      	ldr	r3, [pc, #352]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800421c:	61fb      	str	r3, [r7, #28]
          break;
 800421e:	e00c      	b.n	800423a <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004220:	4b55      	ldr	r3, [pc, #340]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b02      	cmp	r3, #2
 800422c:	d107      	bne.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
            frequency = LSE_VALUE;
 800422e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004232:	61fb      	str	r3, [r7, #28]
          break;
 8004234:	e003      	b.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x972>
          break;
 8004236:	bf00      	nop
 8004238:	e25e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800423a:	bf00      	nop
 800423c:	e25c      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800423e:	bf00      	nop
        break;
 8004240:	e25a      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004242:	4b4d      	ldr	r3, [pc, #308]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004248:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004254:	d007      	beq.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x99a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800425c:	d12f      	bne.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x9f2>
          frequency = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe fe25 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004262:	61f8      	str	r0, [r7, #28]
          break;
 8004264:	e02e      	b.n	80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004266:	4b44      	ldr	r3, [pc, #272]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800426e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004272:	d126      	bne.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
 8004274:	4b40      	ldr	r3, [pc, #256]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004280:	4b3d      	ldr	r3, [pc, #244]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	0a1b      	lsrs	r3, r3, #8
 8004286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800428a:	60bb      	str	r3, [r7, #8]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	fb03 f202 	mul.w	r2, r3, r2
 8004294:	4b38      	ldr	r3, [pc, #224]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	091b      	lsrs	r3, r3, #4
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3301      	adds	r3, #1
 80042a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a4:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80042a6:	4b34      	ldr	r3, [pc, #208]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	0e5b      	lsrs	r3, r3, #25
 80042ac:	f003 0303 	and.w	r3, r3, #3
 80042b0:	3301      	adds	r3, #1
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]
          break;
 80042bc:	e001      	b.n	80042c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9f6>
          break;
 80042be:	bf00      	nop
 80042c0:	e21a      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80042c2:	bf00      	nop
        break;
 80042c4:	e218      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80042c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	60fb      	str	r3, [r7, #12]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa14>
          frequency = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7fe fe94 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 80042dc:	61f8      	str	r0, [r7, #28]
        break;
 80042de:	e20b      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          frequency = HAL_RCC_GetSysClockFreq();
 80042e0:	f7fe fde4 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80042e4:	61f8      	str	r0, [r7, #28]
        break;
 80042e6:	e207      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 80042e8:	4b23      	ldr	r3, [pc, #140]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80042ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042ee:	f003 0318 	and.w	r3, r3, #24
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b10      	cmp	r3, #16
 80042f8:	d010      	beq.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b10      	cmp	r3, #16
 80042fe:	d834      	bhi.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0xa42>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b08      	cmp	r3, #8
 800430a:	d024      	beq.n	8004356 <HAL_RCCEx_GetPeriphCLKFreq+0xa8a>
          break;
 800430c:	e02d      	b.n	800436a <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
          frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 800430e:	69b9      	ldr	r1, [r7, #24]
 8004310:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004314:	f000 fbe2 	bl	8004adc <RCCEx_GetSAIxPeriphCLKFreq>
 8004318:	61f8      	str	r0, [r7, #28]
          break;
 800431a:	e02b      	b.n	8004374 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800431c:	4b16      	ldr	r3, [pc, #88]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d122      	bne.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004328:	4b13      	ldr	r3, [pc, #76]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d005      	beq.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	e005      	b.n	800434c <HAL_RCCEx_GetPeriphCLKFreq+0xa80>
 8004340:	4b0d      	ldr	r3, [pc, #52]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004342:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004346:	0a1b      	lsrs	r3, r3, #8
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>)
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	61fb      	str	r3, [r7, #28]
          break;
 8004354:	e00b      	b.n	800436e <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004356:	4b08      	ldr	r3, [pc, #32]	@ (8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004362:	d106      	bne.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
            frequency = HSI_VALUE;
 8004364:	4b05      	ldr	r3, [pc, #20]	@ (800437c <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 8004366:	61fb      	str	r3, [r7, #28]
          break;
 8004368:	e003      	b.n	8004372 <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
          break;
 800436a:	bf00      	nop
 800436c:	e1c4      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800436e:	bf00      	nop
 8004370:	e1c2      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004372:	bf00      	nop
        break;
 8004374:	e1c0      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	00f42400 	.word	0x00f42400
 8004380:	0800a2dc 	.word	0x0800a2dc
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004384:	4b96      	ldr	r3, [pc, #600]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004396:	d013      	beq.n	80043c0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800439e:	d819      	bhi.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d004      	beq.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043ac:	d004      	beq.n	80043b8 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
          break;
 80043ae:	e011      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043b0:	f7fe fe12 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80043b4:	61f8      	str	r0, [r7, #28]
          break;
 80043b6:	e010      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          frequency = HAL_RCC_GetSysClockFreq();
 80043b8:	f7fe fd78 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80043bc:	61f8      	str	r0, [r7, #28]
          break;
 80043be:	e00c      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043c0:	4b87      	ldr	r3, [pc, #540]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d104      	bne.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = HSI_VALUE;
 80043ce:	4b85      	ldr	r3, [pc, #532]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80043d0:	61fb      	str	r3, [r7, #28]
          break;
 80043d2:	e001      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 80043d4:	bf00      	nop
 80043d6:	e18f      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80043d8:	bf00      	nop
        break;
 80043da:	e18d      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80043dc:	4b80      	ldr	r3, [pc, #512]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80043e6:	60fb      	str	r3, [r7, #12]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ee:	d013      	beq.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043f6:	d819      	bhi.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004404:	d004      	beq.n	8004410 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
          break;
 8004406:	e011      	b.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0xb60>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004408:	f7fe fde6 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800440c:	61f8      	str	r0, [r7, #28]
          break;
 800440e:	e010      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          frequency = HAL_RCC_GetSysClockFreq();
 8004410:	f7fe fd4c 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8004414:	61f8      	str	r0, [r7, #28]
          break;
 8004416:	e00c      	b.n	8004432 <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004418:	4b71      	ldr	r3, [pc, #452]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004420:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004424:	d104      	bne.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
            frequency = HSI_VALUE;
 8004426:	4b6f      	ldr	r3, [pc, #444]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004428:	61fb      	str	r3, [r7, #28]
          break;
 800442a:	e001      	b.n	8004430 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
          break;
 800442c:	bf00      	nop
 800442e:	e163      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004430:	bf00      	nop
        break;
 8004432:	e161      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004434:	4b6a      	ldr	r3, [pc, #424]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004446:	d013      	beq.n	8004470 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800444e:	d819      	bhi.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d004      	beq.n	8004460 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800445c:	d004      	beq.n	8004468 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
          break;
 800445e:	e011      	b.n	8004484 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004460:	f7fe fdba 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8004464:	61f8      	str	r0, [r7, #28]
          break;
 8004466:	e010      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          frequency = HAL_RCC_GetSysClockFreq();
 8004468:	f7fe fd20 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 800446c:	61f8      	str	r0, [r7, #28]
          break;
 800446e:	e00c      	b.n	800448a <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004470:	4b5b      	ldr	r3, [pc, #364]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447c:	d104      	bne.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
            frequency = HSI_VALUE;
 800447e:	4b59      	ldr	r3, [pc, #356]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004480:	61fb      	str	r3, [r7, #28]
          break;
 8004482:	e001      	b.n	8004488 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
          break;
 8004484:	bf00      	nop
 8004486:	e137      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004488:	bf00      	nop
        break;
 800448a:	e135      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800448c:	4b54      	ldr	r3, [pc, #336]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800448e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b02      	cmp	r3, #2
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d818      	bhi.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d003      	beq.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d004      	beq.n	80044ba <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
          break;
 80044b0:	e011      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe fd91 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80044b6:	61f8      	str	r0, [r7, #28]
          break;
 80044b8:	e010      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          frequency = HAL_RCC_GetSysClockFreq();
 80044ba:	f7fe fcf7 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80044be:	61f8      	str	r0, [r7, #28]
          break;
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0xc10>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044c2:	4b47      	ldr	r3, [pc, #284]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d104      	bne.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
            frequency = HSI_VALUE;
 80044d0:	4b44      	ldr	r3, [pc, #272]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80044d2:	61fb      	str	r3, [r7, #28]
          break;
 80044d4:	e001      	b.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0xc0e>
          break;
 80044d6:	bf00      	nop
 80044d8:	e10e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80044da:	bf00      	nop
        break;
 80044dc:	e10c      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80044de:	4b40      	ldr	r3, [pc, #256]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044f0:	d02c      	beq.n	800454c <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80044f8:	d833      	bhi.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004500:	d01a      	beq.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004508:	d82b      	bhi.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d004      	beq.n	800451a <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004516:	d004      	beq.n	8004522 <HAL_RCCEx_GetPeriphCLKFreq+0xc56>
          break;
 8004518:	e023      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0xc96>
          frequency = HAL_RCC_GetPCLK1Freq();
 800451a:	f7fe fd5d 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 800451e:	61f8      	str	r0, [r7, #28]
          break;
 8004520:	e026      	b.n	8004570 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004522:	4b2f      	ldr	r3, [pc, #188]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004524:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b02      	cmp	r3, #2
 800452e:	d11a      	bne.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
              frequency = LSI_VALUE;
 8004530:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004534:	61fb      	str	r3, [r7, #28]
          break;
 8004536:	e016      	b.n	8004566 <HAL_RCCEx_GetPeriphCLKFreq+0xc9a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004538:	4b29      	ldr	r3, [pc, #164]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004544:	d111      	bne.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
            frequency = HSI_VALUE;
 8004546:	4b27      	ldr	r3, [pc, #156]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 8004548:	61fb      	str	r3, [r7, #28]
          break;
 800454a:	e00e      	b.n	800456a <HAL_RCCEx_GetPeriphCLKFreq+0xc9e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800454c:	4b24      	ldr	r3, [pc, #144]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 800454e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b02      	cmp	r3, #2
 8004558:	d109      	bne.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
            frequency = LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	61fb      	str	r3, [r7, #28]
          break;
 8004560:	e005      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0xca2>
          break;
 8004562:	bf00      	nop
 8004564:	e0c8      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004566:	bf00      	nop
 8004568:	e0c6      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800456a:	bf00      	nop
 800456c:	e0c4      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800456e:	bf00      	nop
        break;
 8004570:	e0c2      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004572:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 8004574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004578:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004584:	d030      	beq.n	80045e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800458c:	d837      	bhi.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004594:	d01a      	beq.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800459c:	d82f      	bhi.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d004      	beq.n	80045ae <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045aa:	d004      	beq.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcea>
          break;
 80045ac:	e027      	b.n	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = HAL_RCC_GetPCLK1Freq();
 80045ae:	f7fe fd13 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 80045b2:	61f8      	str	r0, [r7, #28]
          break;
 80045b4:	e02a      	b.n	800460c <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80045b6:	4b0a      	ldr	r3, [pc, #40]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d11e      	bne.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
              frequency = LSI_VALUE;
 80045c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80045c8:	61fb      	str	r3, [r7, #28]
          break;
 80045ca:	e01a      	b.n	8004602 <HAL_RCCEx_GetPeriphCLKFreq+0xd36>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045cc:	4b04      	ldr	r3, [pc, #16]	@ (80045e0 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d8:	d115      	bne.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
            frequency = HSI_VALUE;
 80045da:	4b02      	ldr	r3, [pc, #8]	@ (80045e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd18>)
 80045dc:	61fb      	str	r3, [r7, #28]
          break;
 80045de:	e012      	b.n	8004606 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80045e0:	40021000 	.word	0x40021000
 80045e4:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045e8:	4b46      	ldr	r3, [pc, #280]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d109      	bne.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
            frequency = LSE_VALUE;
 80045f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045fa:	61fb      	str	r3, [r7, #28]
          break;
 80045fc:	e005      	b.n	800460a <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
          break;
 80045fe:	bf00      	nop
 8004600:	e07a      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004602:	bf00      	nop
 8004604:	e078      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 8004606:	bf00      	nop
 8004608:	e076      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 800460a:	bf00      	nop
        break;
 800460c:	e074      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800460e:	4b3d      	ldr	r3, [pc, #244]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004610:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004614:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004620:	d02c      	beq.n	800467c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004628:	d855      	bhi.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d004      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004636:	d004      	beq.n	8004642 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
          break;
 8004638:	e04d      	b.n	80046d6 <HAL_RCCEx_GetPeriphCLKFreq+0xe0a>
          frequency = HAL_RCC_GetSysClockFreq();
 800463a:	f7fe fc37 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 800463e:	61f8      	str	r0, [r7, #28]
          break;
 8004640:	e04e      	b.n	80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe14>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004642:	4b30      	ldr	r3, [pc, #192]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b02      	cmp	r3, #2
 800464c:	d145      	bne.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800464e:	4b2d      	ldr	r3, [pc, #180]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0308 	and.w	r3, r3, #8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0xd9a>
 800465a:	4b2a      	ldr	r3, [pc, #168]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	091b      	lsrs	r3, r3, #4
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	e005      	b.n	8004672 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
 8004666:	4b27      	ldr	r3, [pc, #156]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 8004668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800466c:	0a1b      	lsrs	r3, r3, #8
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	4a25      	ldr	r2, [pc, #148]	@ (8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>)
 8004674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004678:	61fb      	str	r3, [r7, #28]
          break;
 800467a:	e02e      	b.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0xe0e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800467c:	4b21      	ldr	r3, [pc, #132]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004688:	d129      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800468a:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004696:	d122      	bne.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004698:	4b1a      	ldr	r3, [pc, #104]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	0a1b      	lsrs	r3, r3, #8
 800469e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a2:	60bb      	str	r3, [r7, #8]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	fb03 f202 	mul.w	r2, r3, r2
 80046ac:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 030f 	and.w	r3, r3, #15
 80046b6:	3301      	adds	r3, #1
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 80046be:	4b11      	ldr	r3, [pc, #68]	@ (8004704 <HAL_RCCEx_GetPeriphCLKFreq+0xe38>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	0d5b      	lsrs	r3, r3, #21
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	3301      	adds	r3, #1
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d2:	61fb      	str	r3, [r7, #28]
          break;
 80046d4:	e003      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0xe12>
          break;
 80046d6:	bf00      	nop
 80046d8:	e00e      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046da:	bf00      	nop
 80046dc:	e00c      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
          break;
 80046de:	bf00      	nop
        break;
 80046e0:	e00a      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046e2:	bf00      	nop
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046e6:	bf00      	nop
 80046e8:	e006      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ea:	bf00      	nop
 80046ec:	e004      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046ee:	bf00      	nop
 80046f0:	e002      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe2c>
      break;
 80046f6:	bf00      	nop
    }
  }

  return(frequency);
 80046f8:	69fb      	ldr	r3, [r7, #28]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	0800a2dc 	.word	0x0800a2dc

0800470c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800471a:	4b72      	ldr	r3, [pc, #456]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004726:	4b6f      	ldr	r3, [pc, #444]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d103      	bne.n	800473e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
       ||
 800473a:	2b00      	cmp	r3, #0
 800473c:	d142      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e03f      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d018      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x72>
 800474c:	2b03      	cmp	r3, #3
 800474e:	d825      	bhi.n	800479c <RCCEx_PLLSAI1_Config+0x90>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d002      	beq.n	800475a <RCCEx_PLLSAI1_Config+0x4e>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d009      	beq.n	800476c <RCCEx_PLLSAI1_Config+0x60>
 8004758:	e020      	b.n	800479c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475a:	4b62      	ldr	r3, [pc, #392]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11d      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476a:	e01a      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800476c:	4b5d      	ldr	r3, [pc, #372]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477c:	e013      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800477e:	4b59      	ldr	r3, [pc, #356]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478a:	4b56      	ldr	r3, [pc, #344]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479a:	e006      	b.n	80047aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e004      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80047aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80047b2:	4b4c      	ldr	r3, [pc, #304]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4949      	ldr	r1, [pc, #292]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8086 	bne.w	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80047cc:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a44      	ldr	r2, [pc, #272]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fd f80a 	bl	80017f0 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047e0:	f7fd f806 	bl	80017f0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
        break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80047f4:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d168      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800480c:	4b35      	ldr	r3, [pc, #212]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	4b35      	ldr	r3, [pc, #212]	@ (80048e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	06d2      	lsls	r2, r2, #27
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	3a01      	subs	r2, #1
 8004828:	0112      	lsls	r2, r2, #4
 800482a:	430a      	orrs	r2, r1
 800482c:	492d      	ldr	r1, [pc, #180]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	610b      	str	r3, [r1, #16]
 8004832:	e02d      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d115      	bne.n	8004866 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800483a:	4b2a      	ldr	r3, [pc, #168]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	4b2b      	ldr	r3, [pc, #172]	@ (80048ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	0211      	lsls	r1, r2, #8
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6912      	ldr	r2, [r2, #16]
 800484c:	0852      	lsrs	r2, r2, #1
 800484e:	3a01      	subs	r2, #1
 8004850:	0552      	lsls	r2, r2, #21
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	3a01      	subs	r2, #1
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	430a      	orrs	r2, r1
 800485e:	4921      	ldr	r1, [pc, #132]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	610b      	str	r3, [r1, #16]
 8004864:	e014      	b.n	8004890 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004866:	4b1f      	ldr	r3, [pc, #124]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	4b21      	ldr	r3, [pc, #132]	@ (80048f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6952      	ldr	r2, [r2, #20]
 8004878:	0852      	lsrs	r2, r2, #1
 800487a:	3a01      	subs	r2, #1
 800487c:	0652      	lsls	r2, r2, #25
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	3a01      	subs	r2, #1
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	430a      	orrs	r2, r1
 800488a:	4916      	ldr	r1, [pc, #88]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004890:	4b14      	ldr	r3, [pc, #80]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a13      	ldr	r2, [pc, #76]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004896:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fc ffa8 	bl	80017f0 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048a4:	f7fc ffa4 	bl	80017f0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
          break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ef      	beq.n	80048a4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80048ca:	4b06      	ldr	r3, [pc, #24]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048cc:	691a      	ldr	r2, [r3, #16]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	4904      	ldr	r1, [pc, #16]	@ (80048e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	07ff800f 	.word	0x07ff800f
 80048ec:	ff9f800f 	.word	0xff9f800f
 80048f0:	f9ff800f 	.word	0xf9ff800f

080048f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004902:	4b72      	ldr	r3, [pc, #456]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00e      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800490e:	4b6f      	ldr	r3, [pc, #444]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004910:	68db      	ldr	r3, [r3, #12]
 8004912:	f003 0203 	and.w	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d103      	bne.n	8004926 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
       ||
 8004922:	2b00      	cmp	r3, #0
 8004924:	d142      	bne.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e03f      	b.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d018      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x72>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCCEx_PLLSAI2_Config+0x90>
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <RCCEx_PLLSAI2_Config+0x4e>
 800493c:	2b02      	cmp	r3, #2
 800493e:	d009      	beq.n	8004954 <RCCEx_PLLSAI2_Config+0x60>
 8004940:	e020      	b.n	8004984 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004942:	4b62      	ldr	r3, [pc, #392]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004952:	e01a      	b.n	800498a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004954:	4b5d      	ldr	r3, [pc, #372]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004964:	e013      	b.n	800498e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004966:	4b59      	ldr	r3, [pc, #356]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004972:	4b56      	ldr	r3, [pc, #344]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004982:	e006      	b.n	8004992 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
      break;
 8004988:	e004      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004992:	bf00      	nop
    }

    if(status == HAL_OK)
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800499a:	4b4c      	ldr	r3, [pc, #304]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 0203 	bic.w	r2, r3, #3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4949      	ldr	r1, [pc, #292]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8086 	bne.w	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80049b4:	4b45      	ldr	r3, [pc, #276]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a44      	ldr	r2, [pc, #272]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c0:	f7fc ff16 	bl	80017f0 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049c6:	e009      	b.n	80049dc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80049c8:	f7fc ff12 	bl	80017f0 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	73fb      	strb	r3, [r7, #15]
        break;
 80049da:	e005      	b.n	80049e8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049dc:	4b3b      	ldr	r3, [pc, #236]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ef      	bne.n	80049c8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d168      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d113      	bne.n	8004a1c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80049f4:	4b35      	ldr	r3, [pc, #212]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049f6:	695a      	ldr	r2, [r3, #20]
 80049f8:	4b35      	ldr	r3, [pc, #212]	@ (8004ad0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6892      	ldr	r2, [r2, #8]
 8004a00:	0211      	lsls	r1, r2, #8
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68d2      	ldr	r2, [r2, #12]
 8004a06:	06d2      	lsls	r2, r2, #27
 8004a08:	4311      	orrs	r1, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6852      	ldr	r2, [r2, #4]
 8004a0e:	3a01      	subs	r2, #1
 8004a10:	0112      	lsls	r2, r2, #4
 8004a12:	430a      	orrs	r2, r1
 8004a14:	492d      	ldr	r1, [pc, #180]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	614b      	str	r3, [r1, #20]
 8004a1a:	e02d      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d115      	bne.n	8004a4e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a22:	4b2a      	ldr	r3, [pc, #168]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a24:	695a      	ldr	r2, [r3, #20]
 8004a26:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004a28:	4013      	ands	r3, r2
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	0211      	lsls	r1, r2, #8
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6912      	ldr	r2, [r2, #16]
 8004a34:	0852      	lsrs	r2, r2, #1
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0552      	lsls	r2, r2, #21
 8004a3a:	4311      	orrs	r1, r2
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	6852      	ldr	r2, [r2, #4]
 8004a40:	3a01      	subs	r2, #1
 8004a42:	0112      	lsls	r2, r2, #4
 8004a44:	430a      	orrs	r2, r1
 8004a46:	4921      	ldr	r1, [pc, #132]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	614b      	str	r3, [r1, #20]
 8004a4c:	e014      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	4b21      	ldr	r3, [pc, #132]	@ (8004ad8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004a54:	4013      	ands	r3, r2
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6892      	ldr	r2, [r2, #8]
 8004a5a:	0211      	lsls	r1, r2, #8
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6952      	ldr	r2, [r2, #20]
 8004a60:	0852      	lsrs	r2, r2, #1
 8004a62:	3a01      	subs	r2, #1
 8004a64:	0652      	lsls	r2, r2, #25
 8004a66:	4311      	orrs	r1, r2
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	6852      	ldr	r2, [r2, #4]
 8004a6c:	3a01      	subs	r2, #1
 8004a6e:	0112      	lsls	r2, r2, #4
 8004a70:	430a      	orrs	r2, r1
 8004a72:	4916      	ldr	r1, [pc, #88]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004a78:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a13      	ldr	r2, [pc, #76]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fc feb4 	bl	80017f0 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004a8c:	f7fc feb0 	bl	80017f0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ef      	beq.n	8004a8c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ab4:	695a      	ldr	r2, [r3, #20]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	4904      	ldr	r1, [pc, #16]	@ (8004acc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40021000 	.word	0x40021000
 8004ad0:	07ff800f 	.word	0x07ff800f
 8004ad4:	ff9f800f 	.word	0xff9f800f
 8004ad8:	f9ff800f 	.word	0xf9ff800f

08004adc <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b089      	sub	sp, #36	@ 0x24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af8:	d10b      	bne.n	8004b12 <RCCEx_GetSAIxPeriphCLKFreq+0x36>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004afa:	4b7e      	ldr	r3, [pc, #504]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b00:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8004b04:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b60      	cmp	r3, #96	@ 0x60
 8004b0a:	d112      	bne.n	8004b32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004b0c:	4b7a      	ldr	r3, [pc, #488]	@ (8004cf8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b0e:	61fb      	str	r3, [r7, #28]
 8004b10:	e00f      	b.n	8004b32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b18:	d10b      	bne.n	8004b32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004b1a:	4b76      	ldr	r3, [pc, #472]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b24:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b2c:	d101      	bne.n	8004b32 <RCCEx_GetSAIxPeriphCLKFreq+0x56>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004b2e:	4b72      	ldr	r3, [pc, #456]	@ (8004cf8 <RCCEx_GetSAIxPeriphCLKFreq+0x21c>)
 8004b30:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 80d6 	bne.w	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
  {
    pllvco = InputFrequency;
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b40      	cmp	r3, #64	@ 0x40
 8004b42:	d003      	beq.n	8004b4c <RCCEx_GetSAIxPeriphCLKFreq+0x70>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b4a:	d13b      	bne.n	8004bc4 <RCCEx_GetSAIxPeriphCLKFreq+0xe8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004b4c:	4b69      	ldr	r3, [pc, #420]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b58:	f040 80c4 	bne.w	8004ce4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
 8004b5c:	4b65      	ldr	r3, [pc, #404]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80bd 	beq.w	8004ce4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b6a:	4b62      	ldr	r3, [pc, #392]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	091b      	lsrs	r3, r3, #4
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	3301      	adds	r3, #1
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b88:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	0edb      	lsrs	r3, r3, #27
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d10a      	bne.n	8004bb2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004b9c:	4b55      	ldr	r3, [pc, #340]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <RCCEx_GetSAIxPeriphCLKFreq+0xd2>
          {
            pllp = 17U;
 8004ba8:	2311      	movs	r3, #17
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e001      	b.n	8004bb2 <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          }
          else
          {
            pllp = 7U;
 8004bae:	2307      	movs	r3, #7
 8004bb0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	fb03 f202 	mul.w	r2, r3, r2
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc0:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004bc2:	e08f      	b.n	8004ce4 <RCCEx_GetSAIxPeriphCLKFreq+0x208>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d13a      	bne.n	8004c40 <RCCEx_GetSAIxPeriphCLKFreq+0x164>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004bca:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bd6:	f040 8086 	bne.w	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004bda:	4b46      	ldr	r3, [pc, #280]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d07f      	beq.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004be6:	4b43      	ldr	r3, [pc, #268]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	091b      	lsrs	r3, r3, #4
 8004bec:	f003 030f 	and.w	r3, r3, #15
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf8:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c04:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004c06:	4b3b      	ldr	r3, [pc, #236]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	0edb      	lsrs	r3, r3, #27
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10a      	bne.n	8004c2e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004c18:	4b36      	ldr	r3, [pc, #216]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d002      	beq.n	8004c2a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
          {
            pllp = 17U;
 8004c24:	2311      	movs	r3, #17
 8004c26:	617b      	str	r3, [r7, #20]
 8004c28:	e001      	b.n	8004c2e <RCCEx_GetSAIxPeriphCLKFreq+0x152>
          }
          else
          {
            pllp = 7U;
 8004c2a:	2307      	movs	r3, #7
 8004c2c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	fb03 f202 	mul.w	r2, r3, r2
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c3c:	61fb      	str	r3, [r7, #28]
 8004c3e:	e052      	b.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      }
    }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    else if((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2b80      	cmp	r3, #128	@ 0x80
 8004c44:	d003      	beq.n	8004c4e <RCCEx_GetSAIxPeriphCLKFreq+0x172>
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c4c:	d109      	bne.n	8004c62 <RCCEx_GetSAIxPeriphCLKFreq+0x186>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c4e:	4b29      	ldr	r3, [pc, #164]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c5a:	d144      	bne.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
        frequency = HSI_VALUE;
 8004c5c:	4b27      	ldr	r3, [pc, #156]	@ (8004cfc <RCCEx_GetSAIxPeriphCLKFreq+0x220>)
 8004c5e:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c60:	e041      	b.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d003      	beq.n	8004c70 <RCCEx_GetSAIxPeriphCLKFreq+0x194>
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c6e:	d13a      	bne.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004c70:	4b20      	ldr	r3, [pc, #128]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c7c:	d133      	bne.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
 8004c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d02d      	beq.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	091b      	lsrs	r3, r3, #4
 8004c90:	f003 030f 	and.w	r3, r3, #15
 8004c94:	3301      	adds	r3, #1
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	613b      	str	r3, [r7, #16]
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004c9e:	4b15      	ldr	r3, [pc, #84]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	0a1b      	lsrs	r3, r3, #8
 8004ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ca8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8004caa:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	0edb      	lsrs	r3, r3, #27
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10a      	bne.n	8004cd2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf4 <RCCEx_GetSAIxPeriphCLKFreq+0x218>)
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <RCCEx_GetSAIxPeriphCLKFreq+0x1f2>
          {
            pllp = 17U;
 8004cc8:	2311      	movs	r3, #17
 8004cca:	617b      	str	r3, [r7, #20]
 8004ccc:	e001      	b.n	8004cd2 <RCCEx_GetSAIxPeriphCLKFreq+0x1f6>
          }
          else
          {
            pllp = 7U;
 8004cce:	2307      	movs	r3, #7
 8004cd0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	fb03 f202 	mul.w	r2, r3, r2
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	e000      	b.n	8004ce6 <RCCEx_GetSAIxPeriphCLKFreq+0x20a>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004ce4:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3724      	adds	r7, #36	@ 0x24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	001fff68 	.word	0x001fff68
 8004cfc:	00f42400 	.word	0x00f42400

08004d00 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	@ 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e1c7      	b.n	80050a2 <HAL_SAI_Init+0x3a2>

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d10e      	bne.n	8004d3a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a81      	ldr	r2, [pc, #516]	@ (8004f28 <HAL_SAI_Init+0x228>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d107      	bne.n	8004d36 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d103      	bne.n	8004d36 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1b3      	b.n	80050a2 <HAL_SAI_Init+0x3a2>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 308d 	ldrb.w	r3, [r3, #141]	@ 0x8d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fbc8 	bl	80014e4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 f9b1 	bl	80050bc <SAI_Disable>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e19e      	b.n	80050a2 <HAL_SAI_Init+0x3a2>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d00c      	beq.n	8004d8e <HAL_SAI_Init+0x8e>
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d80d      	bhi.n	8004d94 <HAL_SAI_Init+0x94>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d002      	beq.n	8004d82 <HAL_SAI_Init+0x82>
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d003      	beq.n	8004d88 <HAL_SAI_Init+0x88>
 8004d80:	e008      	b.n	8004d94 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d86:	e008      	b.n	8004d9a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004d88:	2310      	movs	r3, #16
 8004d8a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d8c:	e005      	b.n	8004d9a <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004d8e:	2320      	movs	r3, #32
 8004d90:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004d98:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d81d      	bhi.n	8004dde <HAL_SAI_Init+0xde>
 8004da2:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <HAL_SAI_Init+0xa8>)
 8004da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dbf 	.word	0x08004dbf
 8004db0:	08004dc7 	.word	0x08004dc7
 8004db4:	08004dcf 	.word	0x08004dcf
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
      break;
 8004dbc:	e012      	b.n	8004de4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004dbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dc2:	61fb      	str	r3, [r7, #28]
      break;
 8004dc4:	e00e      	b.n	8004de4 <HAL_SAI_Init+0xe4>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dc6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dca:	61fb      	str	r3, [r7, #28]
      break;
 8004dcc:	e00a      	b.n	8004de4 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004dce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004dd2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd6:	f043 0301 	orr.w	r3, r3, #1
 8004dda:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8004ddc:	e002      	b.n	8004de4 <HAL_SAI_Init+0xe4>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
      break;
 8004de2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a4f      	ldr	r2, [pc, #316]	@ (8004f28 <HAL_SAI_Init+0x228>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d004      	beq.n	8004df8 <HAL_SAI_Init+0xf8>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a4e      	ldr	r2, [pc, #312]	@ (8004f2c <HAL_SAI_Init+0x22c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8004df8:	4a4d      	ldr	r2, [pc, #308]	@ (8004f30 <HAL_SAI_Init+0x230>)
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	e002      	b.n	8004e06 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004e00:	4a4c      	ldr	r2, [pc, #304]	@ (8004f34 <HAL_SAI_Init+0x234>)
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d073      	beq.n	8004ef6 <HAL_SAI_Init+0x1f6>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a45      	ldr	r2, [pc, #276]	@ (8004f28 <HAL_SAI_Init+0x228>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d004      	beq.n	8004e22 <HAL_SAI_Init+0x122>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a43      	ldr	r2, [pc, #268]	@ (8004f2c <HAL_SAI_Init+0x22c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d105      	bne.n	8004e2e <HAL_SAI_Init+0x12e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004e22:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004e26:	f7fe fd51 	bl	80038cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e2a:	61b8      	str	r0, [r7, #24]
 8004e2c:	e004      	b.n	8004e38 <HAL_SAI_Init+0x138>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004e2e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004e32:	f7fe fd4b 	bl	80038cc <HAL_RCCEx_GetPeriphCLKFreq>
 8004e36:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NOMCK = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NOMCK = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004e40:	d120      	bne.n	8004e84 <HAL_SAI_Init+0x184>
    {
      /* NOMCK = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d102      	bne.n	8004e50 <HAL_SAI_Init+0x150>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8004e4a:	2340      	movs	r3, #64	@ 0x40
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e00a      	b.n	8004e66 <HAL_SAI_Init+0x166>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d103      	bne.n	8004e60 <HAL_SAI_Init+0x160>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8004e58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e002      	b.n	8004e66 <HAL_SAI_Init+0x166>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e64:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4619      	mov	r1, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	fb02 f303 	mul.w	r3, r2, r3
 8004e7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e80:	617b      	str	r3, [r7, #20]
 8004e82:	e017      	b.n	8004eb4 <HAL_SAI_Init+0x1b4>
    }
    else
    {
      /* NOMCK = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e8c:	d101      	bne.n	8004e92 <HAL_SAI_Init+0x192>
 8004e8e:	2302      	movs	r3, #2
 8004e90:	e000      	b.n	8004e94 <HAL_SAI_Init+0x194>
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	fb02 f303 	mul.w	r3, r2, r3
 8004eac:	021b      	lsls	r3, r3, #8
 8004eae:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eb2:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	4a20      	ldr	r2, [pc, #128]	@ (8004f38 <HAL_SAI_Init+0x238>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	08da      	lsrs	r2, r3, #3
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8004f38 <HAL_SAI_Init+0x238>)
 8004ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8004eca:	08da      	lsrs	r2, r3, #3
 8004ecc:	4613      	mov	r3, r2
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	1aca      	subs	r2, r1, r3
 8004ed6:	2a08      	cmp	r2, #8
 8004ed8:	d904      	bls.n	8004ee4 <HAL_SAI_Init+0x1e4>
    {
      hsai->Init.Mckdiv += 1U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	2b04      	cmp	r3, #4
 8004eea:	d104      	bne.n	8004ef6 <HAL_SAI_Init+0x1f6>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	085a      	lsrs	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_SAI_Init+0x206>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d109      	bne.n	8004f1a <HAL_SAI_Init+0x21a>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_SAI_Init+0x212>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e001      	b.n	8004f16 <HAL_SAI_Init+0x216>
 8004f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	e012      	b.n	8004f40 <HAL_SAI_Init+0x240>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10c      	bne.n	8004f3c <HAL_SAI_Init+0x23c>
 8004f22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004f26:	e00a      	b.n	8004f3e <HAL_SAI_Init+0x23e>
 8004f28:	40015404 	.word	0x40015404
 8004f2c:	40015424 	.word	0x40015424
 8004f30:	40015400 	.word	0x40015400
 8004f34:	40015800 	.word	0x40015800
 8004f38:	cccccccd 	.word	0xcccccccd
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b58      	ldr	r3, [pc, #352]	@ (80050ac <HAL_SAI_Init+0x3ac>)
 8004f4c:	400b      	ands	r3, r1
 8004f4e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NOMCK | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6819      	ldr	r1, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f64:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          ckstr_bits | syncen_bits |                             \
 8004f78:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004f84:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	051b      	lsls	r3, r3, #20
 8004f8c:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8004f92:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004faa:	f023 030f 	bic.w	r3, r3, #15
 8004fae:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	699a      	ldr	r2, [r3, #24]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6899      	ldr	r1, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4b35      	ldr	r3, [pc, #212]	@ (80050b0 <HAL_SAI_Init+0x3b0>)
 8004fda:	400b      	ands	r3, r1
 8004fdc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6899      	ldr	r1, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fe8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004fee:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
                           hsai->FrameInit.FSOffset |
 8004ff4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSDefinition |
 8004ffa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005000:	3b01      	subs	r3, #1
 8005002:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005004:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68d9      	ldr	r1, [r3, #12]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800501c:	400b      	ands	r3, r1
 800501e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68d9      	ldr	r1, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800502e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005034:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005036:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800503c:	3b01      	subs	r3, #1
 800503e:	021b      	lsls	r3, r3, #8
 8005040:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	60da      	str	r2, [r3, #12]

#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a19      	ldr	r2, [pc, #100]	@ (80050b4 <HAL_SAI_Init+0x3b4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d119      	bne.n	8005088 <HAL_SAI_Init+0x388>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8005054:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <HAL_SAI_Init+0x3b8>)
 8005056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005058:	4a17      	ldr	r2, [pc, #92]	@ (80050b8 <HAL_SAI_Init+0x3b8>)
 800505a:	f023 0301 	bic.w	r3, r3, #1
 800505e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005066:	2b01      	cmp	r3, #1
 8005068:	d10e      	bne.n	8005088 <HAL_SAI_Init+0x388>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	3b01      	subs	r3, #1
 8005074:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8005076:	4910      	ldr	r1, [pc, #64]	@ (80050b8 <HAL_SAI_Init+0x3b8>)
 8005078:	4313      	orrs	r3, r2
 800507a:	644b      	str	r3, [r1, #68]	@ 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 800507c:	4b0e      	ldr	r3, [pc, #56]	@ (80050b8 <HAL_SAI_Init+0x3b8>)
 800507e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005080:	4a0d      	ldr	r2, [pc, #52]	@ (80050b8 <HAL_SAI_Init+0x3b8>)
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6453      	str	r3, [r2, #68]	@ 0x44
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3728      	adds	r7, #40	@ 0x28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	f805c010 	.word	0xf805c010
 80050b0:	fff88000 	.word	0xfff88000
 80050b4:	40015404 	.word	0x40015404
 80050b8:	40015400 	.word	0x40015400

080050bc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80050c4:	4b18      	ldr	r3, [pc, #96]	@ (8005128 <SAI_Disable+0x6c>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a18      	ldr	r2, [pc, #96]	@ (800512c <SAI_Disable+0x70>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	0b1b      	lsrs	r3, r3, #12
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80050e6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10a      	bne.n	8005104 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      status = HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	72fb      	strb	r3, [r7, #11]
      break;
 8005102:	e009      	b.n	8005118 <SAI_Disable+0x5c>
    }
    count--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	3b01      	subs	r3, #1
 8005108:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e7      	bne.n	80050e8 <SAI_Disable+0x2c>

  return status;
 8005118:	7afb      	ldrb	r3, [r7, #11]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000000 	.word	0x20000000
 800512c:	95cbec1b 	.word	0x95cbec1b

08005130 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e095      	b.n	800526e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	d108      	bne.n	800515c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005152:	d009      	beq.n	8005168 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	61da      	str	r2, [r3, #28]
 800515a:	e005      	b.n	8005168 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fb ff72 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800519e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051a8:	d902      	bls.n	80051b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80051aa:	2300      	movs	r3, #0
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	e002      	b.n	80051b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80051b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80051b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Init+0xa0>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80051c8:	d002      	beq.n	80051d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051e0:	431a      	orrs	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	f003 0301 	and.w	r3, r3, #1
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005208:	431a      	orrs	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	ea42 0103 	orr.w	r1, r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800521a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	f003 0204 	and.w	r2, r3, #4
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	f003 0310 	and.w	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800523e:	f003 0308 	and.w	r3, r3, #8
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800524c:	ea42 0103 	orr.w	r1, r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e038      	b.n	80052fe <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7fc f915 	bl	80014d0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3308      	adds	r3, #8
 80052ae:	4619      	mov	r1, r3
 80052b0:	4610      	mov	r0, r2
 80052b2:	f000 ffed 	bl	8006290 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	461a      	mov	r2, r3
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	f001 f87f 	bl	80063c4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6858      	ldr	r0, [r3, #4]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	6879      	ldr	r1, [r7, #4]
 80052d4:	f001 f8c3 	bl	800645e <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	6892      	ldr	r2, [r2, #8]
 80052e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	6892      	ldr	r2, [r2, #8]
 80052ec:	f041 0101 	orr.w	r1, r1, #1
 80052f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}

08005306 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e042      	b.n	800539e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb ff00 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2224      	movs	r2, #36	@ 0x24
 8005334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0201 	bic.w	r2, r2, #1
 8005346:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	2b00      	cmp	r3, #0
 800534e:	d002      	beq.n	8005356 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fc7b 	bl	8005c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f97c 	bl	8005654 <UART_SetConfig>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e01b      	b.n	800539e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005384:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f042 0201 	orr.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fcfa 	bl	8005d90 <UART_CheckIdleState>
 800539c:	4603      	mov	r3, r0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b08a      	sub	sp, #40	@ 0x28
 80053aa:	af02      	add	r7, sp, #8
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053bc:	2b20      	cmp	r3, #32
 80053be:	d17b      	bne.n	80054b8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d002      	beq.n	80053cc <HAL_UART_Transmit+0x26>
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e074      	b.n	80054ba <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2221      	movs	r2, #33	@ 0x21
 80053dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e0:	f7fc fa06 	bl	80017f0 <HAL_GetTick>
 80053e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fe:	d108      	bne.n	8005412 <HAL_UART_Transmit+0x6c>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d104      	bne.n	8005412 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005408:	2300      	movs	r3, #0
 800540a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	61bb      	str	r3, [r7, #24]
 8005410:	e003      	b.n	800541a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800541a:	e030      	b.n	800547e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2200      	movs	r2, #0
 8005424:	2180      	movs	r1, #128	@ 0x80
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f000 fd5c 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d005      	beq.n	800543e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e03d      	b.n	80054ba <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10b      	bne.n	800545c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	881a      	ldrh	r2, [r3, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005450:	b292      	uxth	r2, r2
 8005452:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	3302      	adds	r3, #2
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e007      	b.n	800546c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	781a      	ldrb	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	3301      	adds	r3, #1
 800546a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29a      	uxth	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005484:	b29b      	uxth	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1c8      	bne.n	800541c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2140      	movs	r1, #64	@ 0x40
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f000 fd25 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e006      	b.n	80054ba <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054b4:	2300      	movs	r3, #0
 80054b6:	e000      	b.n	80054ba <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054b8:	2302      	movs	r3, #2
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b08a      	sub	sp, #40	@ 0x28
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054d8:	2b20      	cmp	r3, #32
 80054da:	f040 80b6 	bne.w	800564a <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_UART_Receive+0x28>
 80054e4:	88fb      	ldrh	r3, [r7, #6]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0ae      	b.n	800564c <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2222      	movs	r2, #34	@ 0x22
 80054fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005504:	f7fc f974 	bl	80017f0 <HAL_GetTick>
 8005508:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	88fa      	ldrh	r2, [r7, #6]
 8005516:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005522:	d10e      	bne.n	8005542 <HAL_UART_Receive+0x80>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <HAL_UART_Receive+0x76>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005532:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005536:	e02d      	b.n	8005594 <HAL_UART_Receive+0xd2>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005540:	e028      	b.n	8005594 <HAL_UART_Receive+0xd2>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <HAL_UART_Receive+0xa4>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_UART_Receive+0x9a>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	22ff      	movs	r2, #255	@ 0xff
 8005556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800555a:	e01b      	b.n	8005594 <HAL_UART_Receive+0xd2>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	227f      	movs	r2, #127	@ 0x7f
 8005560:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005564:	e016      	b.n	8005594 <HAL_UART_Receive+0xd2>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800556e:	d10d      	bne.n	800558c <HAL_UART_Receive+0xca>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <HAL_UART_Receive+0xc0>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	227f      	movs	r2, #127	@ 0x7f
 800557c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005580:	e008      	b.n	8005594 <HAL_UART_Receive+0xd2>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	223f      	movs	r2, #63	@ 0x3f
 8005586:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800558a:	e003      	b.n	8005594 <HAL_UART_Receive+0xd2>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800559a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a4:	d108      	bne.n	80055b8 <HAL_UART_Receive+0xf6>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80055ae:	2300      	movs	r3, #0
 80055b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	61bb      	str	r3, [r7, #24]
 80055b6:	e003      	b.n	80055c0 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055bc:	2300      	movs	r3, #0
 80055be:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80055c0:	e037      	b.n	8005632 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	2200      	movs	r2, #0
 80055ca:	2120      	movs	r1, #32
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f000 fc89 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e033      	b.n	800564c <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10c      	bne.n	8005604 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80055f0:	b29a      	uxth	r2, r3
 80055f2:	8a7b      	ldrh	r3, [r7, #18]
 80055f4:	4013      	ands	r3, r2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	3302      	adds	r3, #2
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	e00d      	b.n	8005620 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800560a:	b29b      	uxth	r3, r3
 800560c:	b2da      	uxtb	r2, r3
 800560e:	8a7b      	ldrh	r3, [r7, #18]
 8005610:	b2db      	uxtb	r3, r3
 8005612:	4013      	ands	r3, r2
 8005614:	b2da      	uxtb	r2, r3
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3301      	adds	r3, #1
 800561e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005638:	b29b      	uxth	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1c1      	bne.n	80055c2 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
  }
}
 800564c:	4618      	mov	r0, r3
 800564e:	3720      	adds	r7, #32
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005658:	b08c      	sub	sp, #48	@ 0x30
 800565a:	af00      	add	r7, sp, #0
 800565c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	431a      	orrs	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	431a      	orrs	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	69db      	ldr	r3, [r3, #28]
 8005678:	4313      	orrs	r3, r2
 800567a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4baa      	ldr	r3, [pc, #680]	@ (800592c <UART_SetConfig+0x2d8>)
 8005684:	4013      	ands	r3, r2
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800568c:	430b      	orrs	r3, r1
 800568e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a9f      	ldr	r2, [pc, #636]	@ (8005930 <UART_SetConfig+0x2dc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056bc:	4313      	orrs	r3, r2
 80056be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80056ca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80056ce:	697a      	ldr	r2, [r7, #20]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056de:	f023 010f 	bic.w	r1, r3, #15
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a90      	ldr	r2, [pc, #576]	@ (8005934 <UART_SetConfig+0x2e0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d125      	bne.n	8005744 <UART_SetConfig+0xf0>
 80056f8:	4b8f      	ldr	r3, [pc, #572]	@ (8005938 <UART_SetConfig+0x2e4>)
 80056fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fe:	f003 0303 	and.w	r3, r3, #3
 8005702:	2b03      	cmp	r3, #3
 8005704:	d81a      	bhi.n	800573c <UART_SetConfig+0xe8>
 8005706:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <UART_SetConfig+0xb8>)
 8005708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570c:	0800571d 	.word	0x0800571d
 8005710:	0800572d 	.word	0x0800572d
 8005714:	08005725 	.word	0x08005725
 8005718:	08005735 	.word	0x08005735
 800571c:	2301      	movs	r3, #1
 800571e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005722:	e116      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005724:	2302      	movs	r3, #2
 8005726:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800572a:	e112      	b.n	8005952 <UART_SetConfig+0x2fe>
 800572c:	2304      	movs	r3, #4
 800572e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005732:	e10e      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005734:	2308      	movs	r3, #8
 8005736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800573a:	e10a      	b.n	8005952 <UART_SetConfig+0x2fe>
 800573c:	2310      	movs	r3, #16
 800573e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005742:	e106      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a7c      	ldr	r2, [pc, #496]	@ (800593c <UART_SetConfig+0x2e8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d138      	bne.n	80057c0 <UART_SetConfig+0x16c>
 800574e:	4b7a      	ldr	r3, [pc, #488]	@ (8005938 <UART_SetConfig+0x2e4>)
 8005750:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b0c      	cmp	r3, #12
 800575a:	d82d      	bhi.n	80057b8 <UART_SetConfig+0x164>
 800575c:	a201      	add	r2, pc, #4	@ (adr r2, 8005764 <UART_SetConfig+0x110>)
 800575e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005762:	bf00      	nop
 8005764:	08005799 	.word	0x08005799
 8005768:	080057b9 	.word	0x080057b9
 800576c:	080057b9 	.word	0x080057b9
 8005770:	080057b9 	.word	0x080057b9
 8005774:	080057a9 	.word	0x080057a9
 8005778:	080057b9 	.word	0x080057b9
 800577c:	080057b9 	.word	0x080057b9
 8005780:	080057b9 	.word	0x080057b9
 8005784:	080057a1 	.word	0x080057a1
 8005788:	080057b9 	.word	0x080057b9
 800578c:	080057b9 	.word	0x080057b9
 8005790:	080057b9 	.word	0x080057b9
 8005794:	080057b1 	.word	0x080057b1
 8005798:	2300      	movs	r3, #0
 800579a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800579e:	e0d8      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057a0:	2302      	movs	r3, #2
 80057a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a6:	e0d4      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057a8:	2304      	movs	r3, #4
 80057aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057ae:	e0d0      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057b0:	2308      	movs	r3, #8
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b6:	e0cc      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057b8:	2310      	movs	r3, #16
 80057ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057be:	e0c8      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a5e      	ldr	r2, [pc, #376]	@ (8005940 <UART_SetConfig+0x2ec>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d125      	bne.n	8005816 <UART_SetConfig+0x1c2>
 80057ca:	4b5b      	ldr	r3, [pc, #364]	@ (8005938 <UART_SetConfig+0x2e4>)
 80057cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057d4:	2b30      	cmp	r3, #48	@ 0x30
 80057d6:	d016      	beq.n	8005806 <UART_SetConfig+0x1b2>
 80057d8:	2b30      	cmp	r3, #48	@ 0x30
 80057da:	d818      	bhi.n	800580e <UART_SetConfig+0x1ba>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d00a      	beq.n	80057f6 <UART_SetConfig+0x1a2>
 80057e0:	2b20      	cmp	r3, #32
 80057e2:	d814      	bhi.n	800580e <UART_SetConfig+0x1ba>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <UART_SetConfig+0x19a>
 80057e8:	2b10      	cmp	r3, #16
 80057ea:	d008      	beq.n	80057fe <UART_SetConfig+0x1aa>
 80057ec:	e00f      	b.n	800580e <UART_SetConfig+0x1ba>
 80057ee:	2300      	movs	r3, #0
 80057f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057f4:	e0ad      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057f6:	2302      	movs	r3, #2
 80057f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fc:	e0a9      	b.n	8005952 <UART_SetConfig+0x2fe>
 80057fe:	2304      	movs	r3, #4
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005804:	e0a5      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005806:	2308      	movs	r3, #8
 8005808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580c:	e0a1      	b.n	8005952 <UART_SetConfig+0x2fe>
 800580e:	2310      	movs	r3, #16
 8005810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005814:	e09d      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a4a      	ldr	r2, [pc, #296]	@ (8005944 <UART_SetConfig+0x2f0>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d125      	bne.n	800586c <UART_SetConfig+0x218>
 8005820:	4b45      	ldr	r3, [pc, #276]	@ (8005938 <UART_SetConfig+0x2e4>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005826:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800582a:	2bc0      	cmp	r3, #192	@ 0xc0
 800582c:	d016      	beq.n	800585c <UART_SetConfig+0x208>
 800582e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005830:	d818      	bhi.n	8005864 <UART_SetConfig+0x210>
 8005832:	2b80      	cmp	r3, #128	@ 0x80
 8005834:	d00a      	beq.n	800584c <UART_SetConfig+0x1f8>
 8005836:	2b80      	cmp	r3, #128	@ 0x80
 8005838:	d814      	bhi.n	8005864 <UART_SetConfig+0x210>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <UART_SetConfig+0x1f0>
 800583e:	2b40      	cmp	r3, #64	@ 0x40
 8005840:	d008      	beq.n	8005854 <UART_SetConfig+0x200>
 8005842:	e00f      	b.n	8005864 <UART_SetConfig+0x210>
 8005844:	2300      	movs	r3, #0
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800584a:	e082      	b.n	8005952 <UART_SetConfig+0x2fe>
 800584c:	2302      	movs	r3, #2
 800584e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005852:	e07e      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005854:	2304      	movs	r3, #4
 8005856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585a:	e07a      	b.n	8005952 <UART_SetConfig+0x2fe>
 800585c:	2308      	movs	r3, #8
 800585e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005862:	e076      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005864:	2310      	movs	r3, #16
 8005866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586a:	e072      	b.n	8005952 <UART_SetConfig+0x2fe>
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a35      	ldr	r2, [pc, #212]	@ (8005948 <UART_SetConfig+0x2f4>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d12a      	bne.n	80058cc <UART_SetConfig+0x278>
 8005876:	4b30      	ldr	r3, [pc, #192]	@ (8005938 <UART_SetConfig+0x2e4>)
 8005878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800587c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005880:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005884:	d01a      	beq.n	80058bc <UART_SetConfig+0x268>
 8005886:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588a:	d81b      	bhi.n	80058c4 <UART_SetConfig+0x270>
 800588c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005890:	d00c      	beq.n	80058ac <UART_SetConfig+0x258>
 8005892:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005896:	d815      	bhi.n	80058c4 <UART_SetConfig+0x270>
 8005898:	2b00      	cmp	r3, #0
 800589a:	d003      	beq.n	80058a4 <UART_SetConfig+0x250>
 800589c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058a0:	d008      	beq.n	80058b4 <UART_SetConfig+0x260>
 80058a2:	e00f      	b.n	80058c4 <UART_SetConfig+0x270>
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058aa:	e052      	b.n	8005952 <UART_SetConfig+0x2fe>
 80058ac:	2302      	movs	r3, #2
 80058ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058b2:	e04e      	b.n	8005952 <UART_SetConfig+0x2fe>
 80058b4:	2304      	movs	r3, #4
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ba:	e04a      	b.n	8005952 <UART_SetConfig+0x2fe>
 80058bc:	2308      	movs	r3, #8
 80058be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c2:	e046      	b.n	8005952 <UART_SetConfig+0x2fe>
 80058c4:	2310      	movs	r3, #16
 80058c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ca:	e042      	b.n	8005952 <UART_SetConfig+0x2fe>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a17      	ldr	r2, [pc, #92]	@ (8005930 <UART_SetConfig+0x2dc>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d13a      	bne.n	800594c <UART_SetConfig+0x2f8>
 80058d6:	4b18      	ldr	r3, [pc, #96]	@ (8005938 <UART_SetConfig+0x2e4>)
 80058d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058e4:	d01a      	beq.n	800591c <UART_SetConfig+0x2c8>
 80058e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058ea:	d81b      	bhi.n	8005924 <UART_SetConfig+0x2d0>
 80058ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f0:	d00c      	beq.n	800590c <UART_SetConfig+0x2b8>
 80058f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f6:	d815      	bhi.n	8005924 <UART_SetConfig+0x2d0>
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <UART_SetConfig+0x2b0>
 80058fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005900:	d008      	beq.n	8005914 <UART_SetConfig+0x2c0>
 8005902:	e00f      	b.n	8005924 <UART_SetConfig+0x2d0>
 8005904:	2300      	movs	r3, #0
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800590a:	e022      	b.n	8005952 <UART_SetConfig+0x2fe>
 800590c:	2302      	movs	r3, #2
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005912:	e01e      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005914:	2304      	movs	r3, #4
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800591a:	e01a      	b.n	8005952 <UART_SetConfig+0x2fe>
 800591c:	2308      	movs	r3, #8
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005922:	e016      	b.n	8005952 <UART_SetConfig+0x2fe>
 8005924:	2310      	movs	r3, #16
 8005926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800592a:	e012      	b.n	8005952 <UART_SetConfig+0x2fe>
 800592c:	cfff69f3 	.word	0xcfff69f3
 8005930:	40008000 	.word	0x40008000
 8005934:	40013800 	.word	0x40013800
 8005938:	40021000 	.word	0x40021000
 800593c:	40004400 	.word	0x40004400
 8005940:	40004800 	.word	0x40004800
 8005944:	40004c00 	.word	0x40004c00
 8005948:	40005000 	.word	0x40005000
 800594c:	2310      	movs	r3, #16
 800594e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4aae      	ldr	r2, [pc, #696]	@ (8005c10 <UART_SetConfig+0x5bc>)
 8005958:	4293      	cmp	r3, r2
 800595a:	f040 8097 	bne.w	8005a8c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800595e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005962:	2b08      	cmp	r3, #8
 8005964:	d823      	bhi.n	80059ae <UART_SetConfig+0x35a>
 8005966:	a201      	add	r2, pc, #4	@ (adr r2, 800596c <UART_SetConfig+0x318>)
 8005968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596c:	08005991 	.word	0x08005991
 8005970:	080059af 	.word	0x080059af
 8005974:	08005999 	.word	0x08005999
 8005978:	080059af 	.word	0x080059af
 800597c:	0800599f 	.word	0x0800599f
 8005980:	080059af 	.word	0x080059af
 8005984:	080059af 	.word	0x080059af
 8005988:	080059af 	.word	0x080059af
 800598c:	080059a7 	.word	0x080059a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005990:	f7fd fb22 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8005994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005996:	e010      	b.n	80059ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005998:	4b9e      	ldr	r3, [pc, #632]	@ (8005c14 <UART_SetConfig+0x5c0>)
 800599a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800599c:	e00d      	b.n	80059ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800599e:	f7fd fa85 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 80059a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80059a4:	e009      	b.n	80059ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80059ac:	e005      	b.n	80059ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80059b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f000 8130 	beq.w	8005c22 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c6:	4a94      	ldr	r2, [pc, #592]	@ (8005c18 <UART_SetConfig+0x5c4>)
 80059c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059cc:	461a      	mov	r2, r3
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d305      	bcc.n	80059f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d903      	bls.n	80059fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059f8:	e113      	b.n	8005c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fc:	2200      	movs	r2, #0
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	60fa      	str	r2, [r7, #12]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a06:	4a84      	ldr	r2, [pc, #528]	@ (8005c18 <UART_SetConfig+0x5c4>)
 8005a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2200      	movs	r2, #0
 8005a10:	603b      	str	r3, [r7, #0]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a1c:	f7fa fc40 	bl	80002a0 <__aeabi_uldivmod>
 8005a20:	4602      	mov	r2, r0
 8005a22:	460b      	mov	r3, r1
 8005a24:	4610      	mov	r0, r2
 8005a26:	4619      	mov	r1, r3
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	f04f 0300 	mov.w	r3, #0
 8005a30:	020b      	lsls	r3, r1, #8
 8005a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a36:	0202      	lsls	r2, r0, #8
 8005a38:	6979      	ldr	r1, [r7, #20]
 8005a3a:	6849      	ldr	r1, [r1, #4]
 8005a3c:	0849      	lsrs	r1, r1, #1
 8005a3e:	2000      	movs	r0, #0
 8005a40:	460c      	mov	r4, r1
 8005a42:	4605      	mov	r5, r0
 8005a44:	eb12 0804 	adds.w	r8, r2, r4
 8005a48:	eb43 0905 	adc.w	r9, r3, r5
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	469a      	mov	sl, r3
 8005a54:	4693      	mov	fp, r2
 8005a56:	4652      	mov	r2, sl
 8005a58:	465b      	mov	r3, fp
 8005a5a:	4640      	mov	r0, r8
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	f7fa fc1f 	bl	80002a0 <__aeabi_uldivmod>
 8005a62:	4602      	mov	r2, r0
 8005a64:	460b      	mov	r3, r1
 8005a66:	4613      	mov	r3, r2
 8005a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a70:	d308      	bcc.n	8005a84 <UART_SetConfig+0x430>
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a78:	d204      	bcs.n	8005a84 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a3a      	ldr	r2, [r7, #32]
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	e0ce      	b.n	8005c22 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a8a:	e0ca      	b.n	8005c22 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a94:	d166      	bne.n	8005b64 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a96:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d827      	bhi.n	8005aee <UART_SetConfig+0x49a>
 8005a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x450>)
 8005aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ad1 	.word	0x08005ad1
 8005aac:	08005ad9 	.word	0x08005ad9
 8005ab0:	08005aef 	.word	0x08005aef
 8005ab4:	08005adf 	.word	0x08005adf
 8005ab8:	08005aef 	.word	0x08005aef
 8005abc:	08005aef 	.word	0x08005aef
 8005ac0:	08005aef 	.word	0x08005aef
 8005ac4:	08005ae7 	.word	0x08005ae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fd fa86 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ace:	e014      	b.n	8005afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ad0:	f7fd fa98 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 8005ad4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ad6:	e010      	b.n	8005afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8005c14 <UART_SetConfig+0x5c0>)
 8005ada:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005adc:	e00d      	b.n	8005afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ade:	f7fd f9e5 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8005ae2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ae4:	e009      	b.n	8005afa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ae6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aec:	e005      	b.n	8005afa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005aee:	2300      	movs	r3, #0
 8005af0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005af8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8090 	beq.w	8005c22 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	4a44      	ldr	r2, [pc, #272]	@ (8005c18 <UART_SetConfig+0x5c4>)
 8005b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b14:	005a      	lsls	r2, r3, #1
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	085b      	lsrs	r3, r3, #1
 8005b1c:	441a      	add	r2, r3
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b26:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	2b0f      	cmp	r3, #15
 8005b2c:	d916      	bls.n	8005b5c <UART_SetConfig+0x508>
 8005b2e:	6a3b      	ldr	r3, [r7, #32]
 8005b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b34:	d212      	bcs.n	8005b5c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	f023 030f 	bic.w	r3, r3, #15
 8005b3e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f003 0307 	and.w	r3, r3, #7
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	8bfb      	ldrh	r3, [r7, #30]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	8bfa      	ldrh	r2, [r7, #30]
 8005b58:	60da      	str	r2, [r3, #12]
 8005b5a:	e062      	b.n	8005c22 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b62:	e05e      	b.n	8005c22 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d828      	bhi.n	8005bbe <UART_SetConfig+0x56a>
 8005b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005b74 <UART_SetConfig+0x520>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005b99 	.word	0x08005b99
 8005b78:	08005ba1 	.word	0x08005ba1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	08005bbf 	.word	0x08005bbf
 8005b84:	08005baf 	.word	0x08005baf
 8005b88:	08005bbf 	.word	0x08005bbf
 8005b8c:	08005bbf 	.word	0x08005bbf
 8005b90:	08005bbf 	.word	0x08005bbf
 8005b94:	08005bb7 	.word	0x08005bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b98:	f7fd fa1e 	bl	8002fd8 <HAL_RCC_GetPCLK1Freq>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b9e:	e014      	b.n	8005bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ba0:	f7fd fa30 	bl	8003004 <HAL_RCC_GetPCLK2Freq>
 8005ba4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005ba6:	e010      	b.n	8005bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <UART_SetConfig+0x5c0>)
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bac:	e00d      	b.n	8005bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bae:	f7fd f97d 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8005bb2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005bb4:	e009      	b.n	8005bca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005bbc:	e005      	b.n	8005bca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d028      	beq.n	8005c22 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	4a10      	ldr	r2, [pc, #64]	@ (8005c18 <UART_SetConfig+0x5c4>)
 8005bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	441a      	add	r2, r3
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	2b0f      	cmp	r3, #15
 8005bf8:	d910      	bls.n	8005c1c <UART_SetConfig+0x5c8>
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c00:	d20c      	bcs.n	8005c1c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60da      	str	r2, [r3, #12]
 8005c0c:	e009      	b.n	8005c22 <UART_SetConfig+0x5ce>
 8005c0e:	bf00      	nop
 8005c10:	40008000 	.word	0x40008000
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	0800a30c 	.word	0x0800a30c
      }
      else
      {
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2201      	movs	r2, #1
 8005c26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	2200      	movs	r2, #0
 8005c36:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005c3e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3730      	adds	r7, #48	@ 0x30
 8005c46:	46bd      	mov	sp, r7
 8005c48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	f003 0308 	and.w	r3, r3, #8
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00a      	beq.n	8005c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00a      	beq.n	8005c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	430a      	orrs	r2, r1
 8005c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00a      	beq.n	8005cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce0:	f003 0310 	and.w	r3, r3, #16
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00a      	beq.n	8005cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00a      	beq.n	8005d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	430a      	orrs	r2, r1
 8005d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d4a:	d10a      	bne.n	8005d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b098      	sub	sp, #96	@ 0x60
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005da0:	f7fb fd26 	bl	80017f0 <HAL_GetTick>
 8005da4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d12f      	bne.n	8005e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f88e 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d022      	beq.n	8005e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	e853 3f00 	ldrex	r3, [r3]
 8005dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005df4:	e841 2300 	strex	r3, r2, [r1]
 8005df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e6      	bne.n	8005dce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2220      	movs	r2, #32
 8005e04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e063      	b.n	8005edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0304 	and.w	r3, r3, #4
 8005e1e:	2b04      	cmp	r3, #4
 8005e20:	d149      	bne.n	8005eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f857 	bl	8005ee4 <UART_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d03c      	beq.n	8005eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	623b      	str	r3, [r7, #32]
   return(result);
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	461a      	mov	r2, r3
 8005e58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e62:	e841 2300 	strex	r3, r2, [r1]
 8005e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1e6      	bne.n	8005e3c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3308      	adds	r3, #8
 8005e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f023 0301 	bic.w	r3, r3, #1
 8005e84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	3308      	adds	r3, #8
 8005e8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e8e:	61fa      	str	r2, [r7, #28]
 8005e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	69b9      	ldr	r1, [r7, #24]
 8005e94:	69fa      	ldr	r2, [r7, #28]
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e5      	bne.n	8005e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e012      	b.n	8005edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3758      	adds	r7, #88	@ 0x58
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ef4:	e04f      	b.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efc:	d04b      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005efe:	f7fb fc77 	bl	80017f0 <HAL_GetTick>
 8005f02:	4602      	mov	r2, r0
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d302      	bcc.n	8005f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d101      	bne.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e04e      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0304 	and.w	r3, r3, #4
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d037      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b80      	cmp	r3, #128	@ 0x80
 8005f2a:	d034      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d031      	beq.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d110      	bne.n	8005f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2208      	movs	r2, #8
 8005f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f48:	68f8      	ldr	r0, [r7, #12]
 8005f4a:	f000 f838 	bl	8005fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2208      	movs	r2, #8
 8005f52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e029      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69db      	ldr	r3, [r3, #28]
 8005f68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f70:	d111      	bne.n	8005f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f000 f81e 	bl	8005fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e00f      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	461a      	mov	r2, r3
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d0a0      	beq.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b095      	sub	sp, #84	@ 0x54
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e6      	bne.n	8005fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3308      	adds	r3, #8
 8005ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	61fb      	str	r3, [r7, #28]
   return(result);
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800600e:	f023 0301 	bic.w	r3, r3, #1
 8006012:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3308      	adds	r3, #8
 800601a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800601c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800601e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006022:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e3      	bne.n	8005ff8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d118      	bne.n	800606a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	60bb      	str	r3, [r7, #8]
   return(result);
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	f023 0310 	bic.w	r3, r3, #16
 800604c:	647b      	str	r3, [r7, #68]	@ 0x44
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006056:	61bb      	str	r3, [r7, #24]
 8006058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6979      	ldr	r1, [r7, #20]
 800605c:	69ba      	ldr	r2, [r7, #24]
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	613b      	str	r3, [r7, #16]
   return(result);
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800607e:	bf00      	nop
 8006080:	3754      	adds	r7, #84	@ 0x54
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800609c:	2302      	movs	r3, #2
 800609e:	e027      	b.n	80060f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2224      	movs	r2, #36	@ 0x24
 80060ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80060ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2220      	movs	r2, #32
 80060e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006110:	2302      	movs	r3, #2
 8006112:	e02d      	b.n	8006170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2224      	movs	r2, #36	@ 0x24
 8006120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	683a      	ldr	r2, [r7, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f84f 	bl	80061f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2220      	movs	r2, #32
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800618c:	2302      	movs	r3, #2
 800618e:	e02d      	b.n	80061ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2224      	movs	r2, #36	@ 0x24
 800619c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	683a      	ldr	r2, [r7, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f811 	bl	80061f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3710      	adds	r7, #16
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006200:	2b00      	cmp	r3, #0
 8006202:	d108      	bne.n	8006216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006214:	e031      	b.n	800627a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006216:	2308      	movs	r3, #8
 8006218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800621a:	2308      	movs	r3, #8
 800621c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	0e5b      	lsrs	r3, r3, #25
 8006226:	b2db      	uxtb	r3, r3
 8006228:	f003 0307 	and.w	r3, r3, #7
 800622c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	0f5b      	lsrs	r3, r3, #29
 8006236:	b2db      	uxtb	r3, r3
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	7b3a      	ldrb	r2, [r7, #12]
 8006242:	4911      	ldr	r1, [pc, #68]	@ (8006288 <UARTEx_SetNbDataToProcess+0x94>)
 8006244:	5c8a      	ldrb	r2, [r1, r2]
 8006246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800624a:	7b3a      	ldrb	r2, [r7, #12]
 800624c:	490f      	ldr	r1, [pc, #60]	@ (800628c <UARTEx_SetNbDataToProcess+0x98>)
 800624e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006250:	fb93 f3f2 	sdiv	r3, r3, r2
 8006254:	b29a      	uxth	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	7b7a      	ldrb	r2, [r7, #13]
 8006260:	4909      	ldr	r1, [pc, #36]	@ (8006288 <UARTEx_SetNbDataToProcess+0x94>)
 8006262:	5c8a      	ldrb	r2, [r1, r2]
 8006264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006268:	7b7a      	ldrb	r2, [r7, #13]
 800626a:	4908      	ldr	r1, [pc, #32]	@ (800628c <UARTEx_SetNbDataToProcess+0x98>)
 800626c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800626e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006272:	b29a      	uxth	r2, r3
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800627a:	bf00      	nop
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	0800a324 	.word	0x0800a324
 800628c:	0800a32c 	.word	0x0800a32c

08006290 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	6812      	ldr	r2, [r2, #0]
 80062a8:	f023 0101 	bic.w	r1, r3, #1
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	2b08      	cmp	r3, #8
 80062b8:	d102      	bne.n	80062c0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80062ba:	2340      	movs	r3, #64	@ 0x40
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	e001      	b.n	80062c4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80062d0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80062d6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80062dc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80062e2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80062e8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80062ee:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80062f4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 80062fa:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 8006300:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8006332:	4b23      	ldr	r3, [pc, #140]	@ (80063c0 <FMC_NORSRAM_Init+0x130>)
 8006334:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800633c:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006344:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f443 0340 	orr.w	r3, r3, #12582912	@ 0xc00000
 800634c:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006354:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	43db      	mvns	r3, r3
 8006364:	ea02 0103 	and.w	r1, r2, r3
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4319      	orrs	r1, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800637e:	d10c      	bne.n	800639a <FMC_NORSRAM_Init+0x10a>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d006      	beq.n	80063b0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063aa:	431a      	orrs	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	0008fb7f 	.word	0x0008fb7f

080063c4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
#if defined(FMC_BTRx_DATAHLD)
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 80063da:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 80063e2:	431a      	orrs	r2, r3
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	079b      	lsls	r3, r3, #30
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 80063ea:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	691b      	ldr	r3, [r3, #16]
 80063f0:	041b      	lsls	r3, r3, #16
    (Timing->DataHoldTime << FMC_BTRx_DATAHLD_Pos) |
 80063f2:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	3b01      	subs	r3, #1
 80063fa:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 80063fc:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	3b02      	subs	r3, #2
 8006404:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 8006406:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	69db      	ldr	r3, [r3, #28]
  Device->BTCR[Bank + 1U] =
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 8006412:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
    Timing->AccessMode;
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006426:	d113      	bne.n	8006450 <FMC_NORSRAM_Timing_Init+0x8c>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006430:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	3b01      	subs	r3, #1
 8006438:	051b      	lsls	r3, r3, #20
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4313      	orrs	r3, r2
 800643e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	431a      	orrs	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800645e:	b480      	push	{r7}
 8006460:	b085      	sub	sp, #20
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	607a      	str	r2, [r7, #4]
 800646a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006472:	d121      	bne.n	80064b8 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FMC_BTRx_DATAHLD)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647c:	f003 627f 	and.w	r2, r3, #267386880	@ 0xff00000
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	6819      	ldr	r1, [r3, #0]
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	4319      	orrs	r1, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	4319      	orrs	r1, r3
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	079b      	lsls	r3, r3, #30
 800649a:	4319      	orrs	r1, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	4319      	orrs	r1, r3
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	041b      	lsls	r3, r3, #16
 80064a8:	430b      	orrs	r3, r1
 80064aa:	ea42 0103 	orr.w	r1, r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80064b6:	e005      	b.n	80064c4 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064d2:	b084      	sub	sp, #16
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	f107 001c 	add.w	r0, r7, #28
 80064e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fa69 	bl	80069c8 <USB_CoreReset>
 80064f6:	4603      	mov	r3, r0
 80064f8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80064fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d106      	bne.n	8006510 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006506:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
 800650e:	e005      	b.n	800651c <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006514:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006528:	b004      	add	sp, #16
 800652a:	4770      	bx	lr

0800652c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f023 0201 	bic.w	r2, r3, #1
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800656a:	78fb      	ldrb	r3, [r7, #3]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d115      	bne.n	800659c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800657c:	200a      	movs	r0, #10
 800657e:	f7fb f943 	bl	8001808 <HAL_Delay>
      ms += 10U;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	330a      	adds	r3, #10
 8006586:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fa0f 	bl	80069ac <USB_GetMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d01e      	beq.n	80065d2 <USB_SetCurrentMode+0x84>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2bc7      	cmp	r3, #199	@ 0xc7
 8006598:	d9f0      	bls.n	800657c <USB_SetCurrentMode+0x2e>
 800659a:	e01a      	b.n	80065d2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d115      	bne.n	80065ce <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065ae:	200a      	movs	r0, #10
 80065b0:	f7fb f92a 	bl	8001808 <HAL_Delay>
      ms += 10U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	330a      	adds	r3, #10
 80065b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f9f6 	bl	80069ac <USB_GetMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <USB_SetCurrentMode+0x84>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80065ca:	d9f0      	bls.n	80065ae <USB_SetCurrentMode+0x60>
 80065cc:	e001      	b.n	80065d2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e005      	b.n	80065de <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2bc8      	cmp	r3, #200	@ 0xc8
 80065d6:	d101      	bne.n	80065dc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
	...

080065e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065e8:	b084      	sub	sp, #16
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
 80065f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065fa:	2300      	movs	r3, #0
 80065fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006602:	2300      	movs	r3, #0
 8006604:	613b      	str	r3, [r7, #16]
 8006606:	e009      	b.n	800661c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	3340      	adds	r3, #64	@ 0x40
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	2200      	movs	r2, #0
 8006614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	3301      	adds	r3, #1
 800661a:	613b      	str	r3, [r7, #16]
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	2b0e      	cmp	r3, #14
 8006620:	d9f2      	bls.n	8006608 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006622:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006626:	2b00      	cmp	r3, #0
 8006628:	d11c      	bne.n	8006664 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006638:	f043 0302 	orr.w	r3, r3, #2
 800663c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e005      	b.n	8006670 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006676:	461a      	mov	r2, r3
 8006678:	2300      	movs	r3, #0
 800667a:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800667c:	2103      	movs	r1, #3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f95a 	bl	8006938 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006684:	2110      	movs	r1, #16
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f8f6 	bl	8006878 <USB_FlushTxFifo>
 800668c:	4603      	mov	r3, r0
 800668e:	2b00      	cmp	r3, #0
 8006690:	d001      	beq.n	8006696 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f920 	bl	80068dc <USB_FlushRxFifo>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d001      	beq.n	80066a6 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066ac:	461a      	mov	r2, r3
 80066ae:	2300      	movs	r3, #0
 80066b0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c4:	461a      	mov	r2, r3
 80066c6:	2300      	movs	r3, #0
 80066c8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
 80066ce:	e043      	b.n	8006758 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e6:	d118      	bne.n	800671a <USB_DevInit+0x132>
    {
      if (i == 0U)
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d10a      	bne.n	8006704 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e013      	b.n	800672c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	015a      	lsls	r2, r3, #5
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4413      	add	r3, r2
 800670c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006710:	461a      	mov	r2, r3
 8006712:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	e008      	b.n	800672c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006726:	461a      	mov	r2, r3
 8006728:	2300      	movs	r3, #0
 800672a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	015a      	lsls	r2, r3, #5
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4413      	add	r3, r2
 8006734:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006738:	461a      	mov	r2, r3
 800673a:	2300      	movs	r3, #0
 800673c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	015a      	lsls	r2, r3, #5
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4413      	add	r3, r2
 8006746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674a:	461a      	mov	r2, r3
 800674c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006750:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	3301      	adds	r3, #1
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800675c:	461a      	mov	r2, r3
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4293      	cmp	r3, r2
 8006762:	d3b5      	bcc.n	80066d0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
 8006768:	e043      	b.n	80067f2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800677c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006780:	d118      	bne.n	80067b4 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e013      	b.n	80067c6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067aa:	461a      	mov	r2, r3
 80067ac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	e008      	b.n	80067c6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067c0:	461a      	mov	r2, r3
 80067c2:	2300      	movs	r3, #0
 80067c4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d2:	461a      	mov	r2, r3
 80067d4:	2300      	movs	r3, #0
 80067d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067e4:	461a      	mov	r2, r3
 80067e6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3301      	adds	r3, #1
 80067f0:	613b      	str	r3, [r7, #16]
 80067f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067f6:	461a      	mov	r2, r3
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d3b5      	bcc.n	800676a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800680c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006810:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800681e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	4b10      	ldr	r3, [pc, #64]	@ (8006874 <USB_DevInit+0x28c>)
 8006832:	4313      	orrs	r3, r2
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006838:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800683c:	2b00      	cmp	r3, #0
 800683e:	d005      	beq.n	800684c <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	f043 0208 	orr.w	r2, r3, #8
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800684c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006850:	2b01      	cmp	r3, #1
 8006852:	d107      	bne.n	8006864 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800685c:	f043 0304 	orr.w	r3, r3, #4
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006864:	7dfb      	ldrb	r3, [r7, #23]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006870:	b004      	add	sp, #16
 8006872:	4770      	bx	lr
 8006874:	803c3800 	.word	0x803c3800

08006878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006892:	d901      	bls.n	8006898 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e01b      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	691b      	ldr	r3, [r3, #16]
 800689c:	2b00      	cmp	r3, #0
 800689e:	daf2      	bge.n	8006886 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	019b      	lsls	r3, r3, #6
 80068a8:	f043 0220 	orr.w	r2, r3, #32
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
 80068b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068bc:	d901      	bls.n	80068c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e006      	b.n	80068d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	f003 0320 	and.w	r3, r3, #32
 80068ca:	2b20      	cmp	r3, #32
 80068cc:	d0f0      	beq.n	80068b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3301      	adds	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068f4:	d901      	bls.n	80068fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e018      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	daf2      	bge.n	80068e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2210      	movs	r2, #16
 800690a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3301      	adds	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006918:	d901      	bls.n	800691e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e006      	b.n	800692c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b10      	cmp	r3, #16
 8006928:	d0f0      	beq.n	800690c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006938:	b480      	push	{r7}
 800693a:	b085      	sub	sp, #20
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	78fb      	ldrb	r3, [r7, #3]
 8006952:	68f9      	ldr	r1, [r7, #12]
 8006954:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006958:	4313      	orrs	r3, r2
 800695a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800696a:	b480      	push	{r7}
 800696c:	b085      	sub	sp, #20
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006984:	f023 0303 	bic.w	r3, r3, #3
 8006988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006998:	f043 0302 	orr.w	r3, r3, #2
 800699c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f003 0301 	and.w	r3, r3, #1
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80069e0:	d901      	bls.n	80069e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e01b      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	daf2      	bge.n	80069d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f043 0201 	orr.w	r2, r3, #1
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a0a:	d901      	bls.n	8006a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e006      	b.n	8006a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d0f0      	beq.n	80069fe <USB_CoreReset+0x36>

  return HAL_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3714      	adds	r7, #20
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr
	...

08006a2c <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d009      	beq.n	8006a50 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8006a3c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006a3e:	461a      	mov	r2, r3
        err.type, err.code);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	4807      	ldr	r0, [pc, #28]	@ (8006a68 <ai_log_err+0x3c>)
 8006a4a:	f002 fbb7 	bl	80091bc <iprintf>
 8006a4e:	e009      	b.n	8006a64 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8006a50:	793b      	ldrb	r3, [r7, #4]
 8006a52:	4619      	mov	r1, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4803      	ldr	r0, [pc, #12]	@ (8006a6c <ai_log_err+0x40>)
 8006a5e:	f002 fbad 	bl	80091bc <iprintf>

  do {} while (1);
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <ai_log_err+0x38>
 8006a68:	0800a0e0 	.word	0x0800a0e0
 8006a6c:	0800a114 	.word	0x0800a114

08006a70 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_predictive_maintenance_create_and_init(&predictive_maintenance, act_addr, NULL);
 8006a78:	2200      	movs	r2, #0
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	4828      	ldr	r0, [pc, #160]	@ (8006b20 <ai_boostrap+0xb0>)
 8006a7e:	f000 fb55 	bl	800712c <ai_predictive_maintenance_create_and_init>
 8006a82:	4603      	mov	r3, r0
 8006a84:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 8006a86:	7b3b      	ldrb	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d006      	beq.n	8006a9a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_predictive_maintenance_create_and_init");
 8006a8c:	4925      	ldr	r1, [pc, #148]	@ (8006b24 <ai_boostrap+0xb4>)
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff ffcc 	bl	8006a2c <ai_log_err>
    return -1;
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295
 8006a98:	e03e      	b.n	8006b18 <ai_boostrap+0xa8>
  }

  ai_input = ai_predictive_maintenance_inputs_get(predictive_maintenance, NULL);
 8006a9a:	4b21      	ldr	r3, [pc, #132]	@ (8006b20 <ai_boostrap+0xb0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fbc1 	bl	8007228 <ai_predictive_maintenance_inputs_get>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b28 <ai_boostrap+0xb8>)
 8006aaa:	6013      	str	r3, [r2, #0]
  ai_output = ai_predictive_maintenance_outputs_get(predictive_maintenance, NULL);
 8006aac:	4b1c      	ldr	r3, [pc, #112]	@ (8006b20 <ai_boostrap+0xb0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fbd2 	bl	800725c <ai_predictive_maintenance_outputs_get>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4a1c      	ldr	r2, [pc, #112]	@ (8006b2c <ai_boostrap+0xbc>)
 8006abc:	6013      	str	r3, [r2, #0]

#if defined(AI_PREDICTIVE_MAINTENANCE_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_PREDICTIVE_MAINTENANCE_IN_NUM; idx++) {
 8006abe:	2300      	movs	r3, #0
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e00f      	b.n	8006ae4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8006ac4:	4b18      	ldr	r3, [pc, #96]	@ (8006b28 <ai_boostrap+0xb8>)
 8006ac6:	6819      	ldr	r1, [r3, #0]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4916      	ldr	r1, [pc, #88]	@ (8006b30 <ai_boostrap+0xc0>)
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_PREDICTIVE_MAINTENANCE_IN_NUM; idx++) {
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	617b      	str	r3, [r7, #20]
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	ddec      	ble.n	8006ac4 <ai_boostrap+0x54>

#if defined(AI_PREDICTIVE_MAINTENANCE_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_PREDICTIVE_MAINTENANCE_OUT_NUM; idx++) {
 8006aea:	2300      	movs	r3, #0
 8006aec:	613b      	str	r3, [r7, #16]
 8006aee:	e00f      	b.n	8006b10 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <ai_boostrap+0xbc>)
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	693a      	ldr	r2, [r7, #16]
 8006af6:	4613      	mov	r3, r2
 8006af8:	00db      	lsls	r3, r3, #3
 8006afa:	1a9b      	subs	r3, r3, r2
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	440b      	add	r3, r1
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	490c      	ldr	r1, [pc, #48]	@ (8006b34 <ai_boostrap+0xc4>)
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_PREDICTIVE_MAINTENANCE_OUT_NUM; idx++) {
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	613b      	str	r3, [r7, #16]
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	ddec      	ble.n	8006af0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_PREDICTIVE_MAINTENANCE_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	200012e0 	.word	0x200012e0
 8006b24:	0800a144 	.word	0x0800a144
 8006b28:	200012e4 	.word	0x200012e4
 8006b2c:	200012e8 	.word	0x200012e8
 8006b30:	20001154 	.word	0x20001154
 8006b34:	20001158 	.word	0x20001158

08006b38 <ai_run>:

static int ai_run(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_predictive_maintenance_run(predictive_maintenance, ai_input, ai_output);
 8006b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b7c <ai_run+0x44>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a0f      	ldr	r2, [pc, #60]	@ (8006b80 <ai_run+0x48>)
 8006b44:	6811      	ldr	r1, [r2, #0]
 8006b46:	4a0f      	ldr	r2, [pc, #60]	@ (8006b84 <ai_run+0x4c>)
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fbdc 	bl	8007308 <ai_predictive_maintenance_run>
 8006b50:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d00c      	beq.n	8006b72 <ai_run+0x3a>
    ai_log_err(ai_predictive_maintenance_get_error(predictive_maintenance),
 8006b58:	4b08      	ldr	r3, [pc, #32]	@ (8006b7c <ai_run+0x44>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f000 fac3 	bl	80070e8 <ai_predictive_maintenance_get_error>
 8006b62:	4603      	mov	r3, r0
 8006b64:	4908      	ldr	r1, [pc, #32]	@ (8006b88 <ai_run+0x50>)
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff ff60 	bl	8006a2c <ai_log_err>
        "ai_predictive_maintenance_run");
    return -1;
 8006b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b70:	e000      	b.n	8006b74 <ai_run+0x3c>
  }

  return 0;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3708      	adds	r7, #8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	200012e0 	.word	0x200012e0
 8006b80:	200012e4 	.word	0x200012e4
 8006b84:	200012e8 	.word	0x200012e8
 8006b88:	0800a170 	.word	0x0800a170

08006b8c <synchronize_UART>:

/* USER CODE BEGIN 2 */
void synchronize_UART(void)

{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0

    bool is_synced = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	71fb      	strb	r3, [r7, #7]

    unsigned char rx[2] = {0};
 8006b96:	2300      	movs	r3, #0
 8006b98:	80bb      	strh	r3, [r7, #4]

    unsigned char tx[2] = {ACKNOWLEDGE, 0};
 8006b9a:	23cd      	movs	r3, #205	@ 0xcd
 8006b9c:	803b      	strh	r3, [r7, #0]

    while (!is_synced)
 8006b9e:	e012      	b.n	8006bc6 <synchronize_UART+0x3a>

    {

      HAL_UART_Receive(&huart2, (uint8_t *)rx, sizeof(rx), TIMEOUT);
 8006ba0:	1d39      	adds	r1, r7, #4
 8006ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	480c      	ldr	r0, [pc, #48]	@ (8006bdc <synchronize_UART+0x50>)
 8006baa:	f7fe fc8a 	bl	80054c2 <HAL_UART_Receive>

      if (rx[0] == SYNCHRONISATION)
 8006bae:	793b      	ldrb	r3, [r7, #4]
 8006bb0:	2bab      	cmp	r3, #171	@ 0xab
 8006bb2:	d108      	bne.n	8006bc6 <synchronize_UART+0x3a>

      {

        HAL_UART_Transmit(&huart2, (uint8_t *)tx, sizeof(tx), TIMEOUT);
 8006bb4:	4639      	mov	r1, r7
 8006bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006bba:	2202      	movs	r2, #2
 8006bbc:	4807      	ldr	r0, [pc, #28]	@ (8006bdc <synchronize_UART+0x50>)
 8006bbe:	f7fe fbf2 	bl	80053a6 <HAL_UART_Transmit>

        is_synced = 1;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	71fb      	strb	r3, [r7, #7]
    while (!is_synced)
 8006bc6:	79fb      	ldrb	r3, [r7, #7]
 8006bc8:	f083 0301 	eor.w	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <synchronize_UART+0x14>

      }

    }

    return;
 8006bd2:	bf00      	nop

}
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	20000ae8 	.word	0x20000ae8

08006be0 <acquire_and_process_data>:

int acquire_and_process_data(ai_i8 *data[])

{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b090      	sub	sp, #64	@ 0x40
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]

    // 1. Variables for data acquisition

    //

    unsigned char tmp[BYTES_IN_FLOATS] = {0};
 8006be8:	2300      	movs	r3, #0
 8006bea:	613b      	str	r3, [r7, #16]
 8006bec:	f107 0314 	add.w	r3, r7, #20
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	60da      	str	r2, [r3, #12]
 8006bfa:	611a      	str	r2, [r3, #16]

    int num_elements = sizeof(tmp) / sizeof(tmp[0]);
 8006bfc:	2318      	movs	r3, #24
 8006bfe:	633b      	str	r3, [r7, #48]	@ 0x30

    int num_floats = num_elements / 4;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	da00      	bge.n	8006c08 <acquire_and_process_data+0x28>
 8006c06:	3303      	adds	r3, #3
 8006c08:	109b      	asrs	r3, r3, #2
 8006c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // 2. Receive data from UART

    //

    HAL_StatusTypeDef status = HAL_UART_Receive(&huart2, (uint8_t *)tmp, sizeof(tmp), TIMEOUT);
 8006c0c:	f107 0110 	add.w	r1, r7, #16
 8006c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006c14:	2218      	movs	r2, #24
 8006c16:	482c      	ldr	r0, [pc, #176]	@ (8006cc8 <acquire_and_process_data+0xe8>)
 8006c18:	f7fe fc53 	bl	80054c2 <HAL_UART_Receive>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    // Check the return status of HAL_UART_Receive

    if (status != HAL_OK)
 8006c22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <acquire_and_process_data+0x5a>

    {

      printf("Failed to receive data from UART. Error code: %d\n", status);
 8006c2a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c2e:	4619      	mov	r1, r3
 8006c30:	4826      	ldr	r0, [pc, #152]	@ (8006ccc <acquire_and_process_data+0xec>)
 8006c32:	f002 fac3 	bl	80091bc <iprintf>

      return (1);
 8006c36:	2301      	movs	r3, #1
 8006c38:	e042      	b.n	8006cc0 <acquire_and_process_data+0xe0>

    // 3. Reconstruct floats from bytes

    //

    if (num_elements % 4 != 0)
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d004      	beq.n	8006c4e <acquire_and_process_data+0x6e>

    {

      printf("The array length is not a multiple of 4 bytes. Cannot reconstruct floats.\n");
 8006c44:	4822      	ldr	r0, [pc, #136]	@ (8006cd0 <acquire_and_process_data+0xf0>)
 8006c46:	f002 fb21 	bl	800928c <puts>

      return (1);
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e038      	b.n	8006cc0 <acquire_and_process_data+0xe0>

    }

    for (size_t i = 0; i < num_floats; i++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c52:	e030      	b.n	8006cb6 <acquire_and_process_data+0xd6>

    {

      unsigned char bytes[4] = {0};
 8006c54:	2300      	movs	r3, #0
 8006c56:	60fb      	str	r3, [r7, #12]

      // Reconstruction of the bytes

      for (size_t j = 0; j < 4; j++)
 8006c58:	2300      	movs	r3, #0
 8006c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c5c:	e010      	b.n	8006c80 <acquire_and_process_data+0xa0>

      {

        bytes[j] = tmp[i * 4 + j];
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c60:	009a      	lsls	r2, r3, #2
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	4413      	add	r3, r2
 8006c66:	3340      	adds	r3, #64	@ 0x40
 8006c68:	443b      	add	r3, r7
 8006c6a:	f813 1c30 	ldrb.w	r1, [r3, #-48]
 8006c6e:	f107 020c 	add.w	r2, r7, #12
 8006c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c74:	4413      	add	r3, r2
 8006c76:	460a      	mov	r2, r1
 8006c78:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++)
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d9eb      	bls.n	8006c5e <acquire_and_process_data+0x7e>

      }

      // Store the bytes in 'data'

      for (size_t k = 0; k < 4; k++)
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8a:	e00e      	b.n	8006caa <acquire_and_process_data+0xca>

      {

        ((uint8_t *)data)[(i * 4 + k)] = bytes[k];
 8006c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c8e:	009a      	lsls	r2, r3, #2
 8006c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c92:	4413      	add	r3, r2
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	4413      	add	r3, r2
 8006c98:	f107 010c 	add.w	r1, r7, #12
 8006c9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c9e:	440a      	add	r2, r1
 8006ca0:	7812      	ldrb	r2, [r2, #0]
 8006ca2:	701a      	strb	r2, [r3, #0]
      for (size_t k = 0; k < 4; k++)
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cac:	2b03      	cmp	r3, #3
 8006cae:	d9ed      	bls.n	8006c8c <acquire_and_process_data+0xac>
    for (size_t i = 0; i < num_floats; i++)
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d3ca      	bcc.n	8006c54 <acquire_and_process_data+0x74>

      }

    }

    return (0);
 8006cbe:	2300      	movs	r3, #0

}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3740      	adds	r7, #64	@ 0x40
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000ae8 	.word	0x20000ae8
 8006ccc:	0800a190 	.word	0x0800a190
 8006cd0:	0800a1c4 	.word	0x0800a1c4

08006cd4 <post_process>:

int post_process(ai_i8 *data[])

{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	@ 0x38
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]

    // Get the output data

    //

    if (data == NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d104      	bne.n	8006cec <post_process+0x18>

    {

      printf("The output data is NULL.\n");
 8006ce2:	4838      	ldr	r0, [pc, #224]	@ (8006dc4 <post_process+0xf0>)
 8006ce4:	f002 fad2 	bl	800928c <puts>

      return (1);
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e066      	b.n	8006dba <post_process+0xe6>

    }

    uint8_t *output = data;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // An array to store the float outputs

    float outs[CLASS_NUMBER] = {0.0};
 8006cf0:	f107 0314 	add.w	r3, r7, #20
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	605a      	str	r2, [r3, #4]
 8006cfa:	609a      	str	r2, [r3, #8]
 8006cfc:	60da      	str	r2, [r3, #12]
 8006cfe:	611a      	str	r2, [r3, #16]

    uint8_t outs_uint8[CLASS_NUMBER] = {0};
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	2300      	movs	r3, #0
 8006d06:	743b      	strb	r3, [r7, #16]

    /* Convert the probability to float */

    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0c:	e03a      	b.n	8006d84 <post_process+0xb0>

    {

      uint8_t temp[4] = {0};
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60bb      	str	r3, [r7, #8]

      // Extract 4 bytes to reconstruct a float

      for (size_t j = 0; j < 4; j++)
 8006d12:	2300      	movs	r3, #0
 8006d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d16:	e00f      	b.n	8006d38 <post_process+0x64>

      {

        temp[j] = output[i * 4 + j];
 8006d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d1a:	009a      	lsls	r2, r3, #2
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d1e:	4413      	add	r3, r2
 8006d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d22:	4413      	add	r3, r2
 8006d24:	7819      	ldrb	r1, [r3, #0]
 8006d26:	f107 0208 	add.w	r2, r7, #8
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	4413      	add	r3, r2
 8006d2e:	460a      	mov	r2, r1
 8006d30:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < 4; j++)
 8006d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d34:	3301      	adds	r3, #1
 8006d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d9ec      	bls.n	8006d18 <post_process+0x44>

      }

      // Reconstruct the float from the bytes

      outs[i] = *(float *)&temp;
 8006d3e:	f107 0308 	add.w	r3, r7, #8
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	3338      	adds	r3, #56	@ 0x38
 8006d4a:	443b      	add	r3, r7
 8006d4c:	3b24      	subs	r3, #36	@ 0x24
 8006d4e:	601a      	str	r2, [r3, #0]

      // Convert the float to uint8_t for UART transmission

      outs_uint8[i] = (char)(outs[i] * 255);
 8006d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	3338      	adds	r3, #56	@ 0x38
 8006d56:	443b      	add	r3, r7
 8006d58:	3b24      	subs	r3, #36	@ 0x24
 8006d5a:	edd3 7a00 	vldr	s15, [r3]
 8006d5e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006dc8 <post_process+0xf4>
 8006d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d6a:	edc7 7a00 	vstr	s15, [r7]
 8006d6e:	783b      	ldrb	r3, [r7, #0]
 8006d70:	b2d9      	uxtb	r1, r3
 8006d72:	f107 020c 	add.w	r2, r7, #12
 8006d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d78:	4413      	add	r3, r2
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < CLASS_NUMBER; i++)
 8006d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d80:	3301      	adds	r3, #1
 8006d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d9c1      	bls.n	8006d0e <post_process+0x3a>

// Transmit the output data

//

HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, (uint8_t *)outs_uint8, sizeof(outs_uint8), TIMEOUT);
 8006d8a:	f107 010c 	add.w	r1, r7, #12
 8006d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006d92:	2205      	movs	r2, #5
 8006d94:	480d      	ldr	r0, [pc, #52]	@ (8006dcc <post_process+0xf8>)
 8006d96:	f7fe fb06 	bl	80053a6 <HAL_UART_Transmit>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// Check the return status of HAL_UART_Transmit

if (status != HAL_OK)
 8006da0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d007      	beq.n	8006db8 <post_process+0xe4>

{

printf("Failed to transmit data to UART. Error code: %d\n", status);
 8006da8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006dac:	4619      	mov	r1, r3
 8006dae:	4808      	ldr	r0, [pc, #32]	@ (8006dd0 <post_process+0xfc>)
 8006db0:	f002 fa04 	bl	80091bc <iprintf>

return (1);
 8006db4:	2301      	movs	r3, #1
 8006db6:	e000      	b.n	8006dba <post_process+0xe6>

}

return 0;
 8006db8:	2300      	movs	r3, #0

}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3738      	adds	r7, #56	@ 0x38
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	0800a210 	.word	0x0800a210
 8006dc8:	437f0000 	.word	0x437f0000
 8006dcc:	20000ae8 	.word	0x20000ae8
 8006dd0:	0800a22c 	.word	0x0800a22c

08006dd4 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8006dd8:	4803      	ldr	r0, [pc, #12]	@ (8006de8 <MX_X_CUBE_AI_Init+0x14>)
 8006dda:	f002 fa57 	bl	800928c <puts>

  ai_boostrap(data_activations0);
 8006dde:	4803      	ldr	r0, [pc, #12]	@ (8006dec <MX_X_CUBE_AI_Init+0x18>)
 8006de0:	f7ff fe46 	bl	8006a70 <ai_boostrap>
    /* USER CODE END 5 */
}
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	0800a260 	.word	0x0800a260
 8006dec:	2000000c 	.word	0x2000000c

08006df0 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)

{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN 6 */

  int res = -1;
 8006df6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dfa:	60fb      	str	r3, [r7, #12]

  uint8_t *in_data = ai_input[0].data;
 8006dfc:	4b19      	ldr	r3, [pc, #100]	@ (8006e64 <MX_X_CUBE_AI_Process+0x74>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	60bb      	str	r3, [r7, #8]

  uint8_t *out_data = ai_output[0].data;
 8006e04:	4b18      	ldr	r3, [pc, #96]	@ (8006e68 <MX_X_CUBE_AI_Process+0x78>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	607b      	str	r3, [r7, #4]

  synchronize_UART();
 8006e0c:	f7ff febe 	bl	8006b8c <synchronize_UART>

  if (predictive_maintenance) {
 8006e10:	4b16      	ldr	r3, [pc, #88]	@ (8006e6c <MX_X_CUBE_AI_Process+0x7c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d013      	beq.n	8006e40 <MX_X_CUBE_AI_Process+0x50>

    do {

      /* 1 - acquire and pre-process input data */

      res = acquire_and_process_data(in_data);
 8006e18:	68b8      	ldr	r0, [r7, #8]
 8006e1a:	f7ff fee1 	bl	8006be0 <acquire_and_process_data>
 8006e1e:	60f8      	str	r0, [r7, #12]

      /* 2 - process the data - call inference engine */

      if (res == 0)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <MX_X_CUBE_AI_Process+0x3c>

        res = ai_run();
 8006e26:	f7ff fe87 	bl	8006b38 <ai_run>
 8006e2a:	60f8      	str	r0, [r7, #12]

      /* 3- post-process the predictions */

      if (res == 0)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <MX_X_CUBE_AI_Process+0x4a>

        res = post_process(out_data);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f7ff ff4e 	bl	8006cd4 <post_process>
 8006e38:	60f8      	str	r0, [r7, #12]

    } while (res==0);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0eb      	beq.n	8006e18 <MX_X_CUBE_AI_Process+0x28>

  }

  if (res) {
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00a      	beq.n	8006e5c <MX_X_CUBE_AI_Process+0x6c>

    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 8006e46:	2311      	movs	r3, #17
 8006e48:	703b      	strb	r3, [r7, #0]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2210      	movs	r2, #16
 8006e4e:	f362 231f 	bfi	r3, r2, #8, #24
 8006e52:	603b      	str	r3, [r7, #0]

    ai_log_err(err, "Process has FAILED");
 8006e54:	4906      	ldr	r1, [pc, #24]	@ (8006e70 <MX_X_CUBE_AI_Process+0x80>)
 8006e56:	6838      	ldr	r0, [r7, #0]
 8006e58:	f7ff fde8 	bl	8006a2c <ai_log_err>

  }

    /* USER CODE END 6 */

}
 8006e5c:	bf00      	nop
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	200012e4 	.word	0x200012e4
 8006e68:	200012e8 	.word	0x200012e8
 8006e6c:	200012e0 	.word	0x200012e0
 8006e70:	0800a280 	.word	0x0800a280

08006e74 <predictive_maintenance_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool predictive_maintenance_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_predictive_maintenance_activations_map, 1, params)) {
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	2101      	movs	r1, #1
 8006e82:	4833      	ldr	r0, [pc, #204]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006e84:	f000 fb1a 	bl	80074bc <ai_platform_get_activations_map>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d055      	beq.n	8006f3a <predictive_maintenance_configure_activations+0xc6>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 104);
 8006e8e:	4b30      	ldr	r3, [pc, #192]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3368      	adds	r3, #104	@ 0x68
 8006e94:	4a2f      	ldr	r2, [pc, #188]	@ (8006f54 <predictive_maintenance_configure_activations+0xe0>)
 8006e96:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 104);
 8006e98:	4b2d      	ldr	r3, [pc, #180]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3368      	adds	r3, #104	@ 0x68
 8006e9e:	4a2d      	ldr	r2, [pc, #180]	@ (8006f54 <predictive_maintenance_configure_activations+0xe0>)
 8006ea0:	60d3      	str	r3, [r2, #12]
    dense_4_dense_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3380      	adds	r3, #128	@ 0x80
 8006ea8:	4a2b      	ldr	r2, [pc, #172]	@ (8006f58 <predictive_maintenance_configure_activations+0xe4>)
 8006eaa:	6093      	str	r3, [r2, #8]
    dense_4_dense_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006eac:	4b28      	ldr	r3, [pc, #160]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	3380      	adds	r3, #128	@ 0x80
 8006eb2:	4a29      	ldr	r2, [pc, #164]	@ (8006f58 <predictive_maintenance_configure_activations+0xe4>)
 8006eb4:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006eb6:	4b26      	ldr	r3, [pc, #152]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3380      	adds	r3, #128	@ 0x80
 8006ebc:	4a27      	ldr	r2, [pc, #156]	@ (8006f5c <predictive_maintenance_configure_activations+0xe8>)
 8006ebe:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006ec0:	4b23      	ldr	r3, [pc, #140]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3380      	adds	r3, #128	@ 0x80
 8006ec6:	4a25      	ldr	r2, [pc, #148]	@ (8006f5c <predictive_maintenance_configure_activations+0xe8>)
 8006ec8:	60d3      	str	r3, [r2, #12]
    dense_5_dense_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006eca:	4b21      	ldr	r3, [pc, #132]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a24      	ldr	r2, [pc, #144]	@ (8006f60 <predictive_maintenance_configure_activations+0xec>)
 8006ed0:	6093      	str	r3, [r2, #8]
    dense_5_dense_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006ed2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a22      	ldr	r2, [pc, #136]	@ (8006f60 <predictive_maintenance_configure_activations+0xec>)
 8006ed8:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006eda:	4b1d      	ldr	r3, [pc, #116]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3380      	adds	r3, #128	@ 0x80
 8006ee0:	4a20      	ldr	r2, [pc, #128]	@ (8006f64 <predictive_maintenance_configure_activations+0xf0>)
 8006ee2:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 128);
 8006ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3380      	adds	r3, #128	@ 0x80
 8006eea:	4a1e      	ldr	r2, [pc, #120]	@ (8006f64 <predictive_maintenance_configure_activations+0xf0>)
 8006eec:	60d3      	str	r3, [r2, #12]
    dense_6_dense_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006eee:	4b18      	ldr	r3, [pc, #96]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1d      	ldr	r2, [pc, #116]	@ (8006f68 <predictive_maintenance_configure_activations+0xf4>)
 8006ef4:	6093      	str	r3, [r2, #8]
    dense_6_dense_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006ef6:	4b16      	ldr	r3, [pc, #88]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a1b      	ldr	r2, [pc, #108]	@ (8006f68 <predictive_maintenance_configure_activations+0xf4>)
 8006efc:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 64);
 8006efe:	4b14      	ldr	r3, [pc, #80]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3340      	adds	r3, #64	@ 0x40
 8006f04:	4a19      	ldr	r2, [pc, #100]	@ (8006f6c <predictive_maintenance_configure_activations+0xf8>)
 8006f06:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 64);
 8006f08:	4b11      	ldr	r3, [pc, #68]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3340      	adds	r3, #64	@ 0x40
 8006f0e:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <predictive_maintenance_configure_activations+0xf8>)
 8006f10:	60d3      	str	r3, [r2, #12]
    dense_7_dense_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006f12:	4b0f      	ldr	r3, [pc, #60]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <predictive_maintenance_configure_activations+0xfc>)
 8006f18:	6093      	str	r3, [r2, #8]
    dense_7_dense_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 0);
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a14      	ldr	r2, [pc, #80]	@ (8006f70 <predictive_maintenance_configure_activations+0xfc>)
 8006f20:	60d3      	str	r3, [r2, #12]
    dense_7_output_array.data = AI_PTR(g_predictive_maintenance_activations_map[0] + 20);
 8006f22:	4b0b      	ldr	r3, [pc, #44]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3314      	adds	r3, #20
 8006f28:	4a12      	ldr	r2, [pc, #72]	@ (8006f74 <predictive_maintenance_configure_activations+0x100>)
 8006f2a:	6093      	str	r3, [r2, #8]
    dense_7_output_array.data_start = AI_PTR(g_predictive_maintenance_activations_map[0] + 20);
 8006f2c:	4b08      	ldr	r3, [pc, #32]	@ (8006f50 <predictive_maintenance_configure_activations+0xdc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3314      	adds	r3, #20
 8006f32:	4a10      	ldr	r2, [pc, #64]	@ (8006f74 <predictive_maintenance_configure_activations+0x100>)
 8006f34:	60d3      	str	r3, [r2, #12]
    return true;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e005      	b.n	8006f46 <predictive_maintenance_configure_activations+0xd2>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8006f3a:	2213      	movs	r2, #19
 8006f3c:	2130      	movs	r1, #48	@ 0x30
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fb3e 	bl	80075c0 <ai_platform_network_set_error>
  return false;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	200012ec 	.word	0x200012ec
 8006f54:	20000010 	.word	0x20000010
 8006f58:	20000020 	.word	0x20000020
 8006f5c:	20000030 	.word	0x20000030
 8006f60:	20000040 	.word	0x20000040
 8006f64:	20000050 	.word	0x20000050
 8006f68:	20000060 	.word	0x20000060
 8006f6c:	20000070 	.word	0x20000070
 8006f70:	20000080 	.word	0x20000080
 8006f74:	20000090 	.word	0x20000090

08006f78 <predictive_maintenance_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool predictive_maintenance_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_predictive_maintenance_weights_map, 1, params)) {
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	2101      	movs	r1, #1
 8006f86:	484f      	ldr	r0, [pc, #316]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006f88:	f000 fa44 	bl	8007414 <ai_platform_get_weights_map>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 808e 	beq.w	80070b0 <predictive_maintenance_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    dense_4_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006f94:	4b4c      	ldr	r3, [pc, #304]	@ (80070c8 <predictive_maintenance_configure_weights+0x150>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80070c8 <predictive_maintenance_configure_weights+0x150>)
 8006f9e:	6013      	str	r3, [r2, #0]
    dense_4_dense_weights_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 0);
 8006fa0:	4b48      	ldr	r3, [pc, #288]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a48      	ldr	r2, [pc, #288]	@ (80070c8 <predictive_maintenance_configure_weights+0x150>)
 8006fa6:	6093      	str	r3, [r2, #8]
    dense_4_dense_weights_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 0);
 8006fa8:	4b46      	ldr	r3, [pc, #280]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a46      	ldr	r2, [pc, #280]	@ (80070c8 <predictive_maintenance_configure_weights+0x150>)
 8006fae:	60d3      	str	r3, [r2, #12]
    dense_4_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006fb0:	4b46      	ldr	r3, [pc, #280]	@ (80070cc <predictive_maintenance_configure_weights+0x154>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fb8:	4a44      	ldr	r2, [pc, #272]	@ (80070cc <predictive_maintenance_configure_weights+0x154>)
 8006fba:	6013      	str	r3, [r2, #0]
    dense_4_dense_bias_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 1536);
 8006fbc:	4b41      	ldr	r3, [pc, #260]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006fc4:	4a41      	ldr	r2, [pc, #260]	@ (80070cc <predictive_maintenance_configure_weights+0x154>)
 8006fc6:	6093      	str	r3, [r2, #8]
    dense_4_dense_bias_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 1536);
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8006fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80070cc <predictive_maintenance_configure_weights+0x154>)
 8006fd2:	60d3      	str	r3, [r2, #12]
    dense_5_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8006fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80070d0 <predictive_maintenance_configure_weights+0x158>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fdc:	4a3c      	ldr	r2, [pc, #240]	@ (80070d0 <predictive_maintenance_configure_weights+0x158>)
 8006fde:	6013      	str	r3, [r2, #0]
    dense_5_dense_weights_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 1792);
 8006fe0:	4b38      	ldr	r3, [pc, #224]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8006fe8:	4a39      	ldr	r2, [pc, #228]	@ (80070d0 <predictive_maintenance_configure_weights+0x158>)
 8006fea:	6093      	str	r3, [r2, #8]
    dense_5_dense_weights_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 1792);
 8006fec:	4b35      	ldr	r3, [pc, #212]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f503 63e0 	add.w	r3, r3, #1792	@ 0x700
 8006ff4:	4a36      	ldr	r2, [pc, #216]	@ (80070d0 <predictive_maintenance_configure_weights+0x158>)
 8006ff6:	60d3      	str	r3, [r2, #12]
    dense_5_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8006ff8:	4b36      	ldr	r3, [pc, #216]	@ (80070d4 <predictive_maintenance_configure_weights+0x15c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007000:	4a34      	ldr	r2, [pc, #208]	@ (80070d4 <predictive_maintenance_configure_weights+0x15c>)
 8007002:	6013      	str	r3, [r2, #0]
    dense_5_dense_bias_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 9984);
 8007004:	4b2f      	ldr	r3, [pc, #188]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800700c:	4a31      	ldr	r2, [pc, #196]	@ (80070d4 <predictive_maintenance_configure_weights+0x15c>)
 800700e:	6093      	str	r3, [r2, #8]
    dense_5_dense_bias_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 9984);
 8007010:	4b2c      	ldr	r3, [pc, #176]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8007018:	4a2e      	ldr	r2, [pc, #184]	@ (80070d4 <predictive_maintenance_configure_weights+0x15c>)
 800701a:	60d3      	str	r3, [r2, #12]
    dense_6_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800701c:	4b2e      	ldr	r3, [pc, #184]	@ (80070d8 <predictive_maintenance_configure_weights+0x160>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007024:	4a2c      	ldr	r2, [pc, #176]	@ (80070d8 <predictive_maintenance_configure_weights+0x160>)
 8007026:	6013      	str	r3, [r2, #0]
    dense_6_dense_weights_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 10112);
 8007028:	4b26      	ldr	r3, [pc, #152]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 8007030:	4a29      	ldr	r2, [pc, #164]	@ (80070d8 <predictive_maintenance_configure_weights+0x160>)
 8007032:	6093      	str	r3, [r2, #8]
    dense_6_dense_weights_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 10112);
 8007034:	4b23      	ldr	r3, [pc, #140]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f503 531e 	add.w	r3, r3, #10112	@ 0x2780
 800703c:	4a26      	ldr	r2, [pc, #152]	@ (80070d8 <predictive_maintenance_configure_weights+0x160>)
 800703e:	60d3      	str	r3, [r2, #12]
    dense_6_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007040:	4b26      	ldr	r3, [pc, #152]	@ (80070dc <predictive_maintenance_configure_weights+0x164>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007048:	4a24      	ldr	r2, [pc, #144]	@ (80070dc <predictive_maintenance_configure_weights+0x164>)
 800704a:	6013      	str	r3, [r2, #0]
    dense_6_dense_bias_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 12160);
 800704c:	4b1d      	ldr	r3, [pc, #116]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f503 533e 	add.w	r3, r3, #12160	@ 0x2f80
 8007054:	4a21      	ldr	r2, [pc, #132]	@ (80070dc <predictive_maintenance_configure_weights+0x164>)
 8007056:	6093      	str	r3, [r2, #8]
    dense_6_dense_bias_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 12160);
 8007058:	4b1a      	ldr	r3, [pc, #104]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f503 533e 	add.w	r3, r3, #12160	@ 0x2f80
 8007060:	4a1e      	ldr	r2, [pc, #120]	@ (80070dc <predictive_maintenance_configure_weights+0x164>)
 8007062:	60d3      	str	r3, [r2, #12]
    dense_7_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8007064:	4b1e      	ldr	r3, [pc, #120]	@ (80070e0 <predictive_maintenance_configure_weights+0x168>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800706c:	4a1c      	ldr	r2, [pc, #112]	@ (80070e0 <predictive_maintenance_configure_weights+0x168>)
 800706e:	6013      	str	r3, [r2, #0]
    dense_7_dense_weights_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 12224);
 8007070:	4b14      	ldr	r3, [pc, #80]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f503 533f 	add.w	r3, r3, #12224	@ 0x2fc0
 8007078:	4a19      	ldr	r2, [pc, #100]	@ (80070e0 <predictive_maintenance_configure_weights+0x168>)
 800707a:	6093      	str	r3, [r2, #8]
    dense_7_dense_weights_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 12224);
 800707c:	4b11      	ldr	r3, [pc, #68]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f503 533f 	add.w	r3, r3, #12224	@ 0x2fc0
 8007084:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <predictive_maintenance_configure_weights+0x168>)
 8007086:	60d3      	str	r3, [r2, #12]
    dense_7_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8007088:	4b16      	ldr	r3, [pc, #88]	@ (80070e4 <predictive_maintenance_configure_weights+0x16c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007090:	4a14      	ldr	r2, [pc, #80]	@ (80070e4 <predictive_maintenance_configure_weights+0x16c>)
 8007092:	6013      	str	r3, [r2, #0]
    dense_7_dense_bias_array.data = AI_PTR(g_predictive_maintenance_weights_map[0] + 12544);
 8007094:	4b0b      	ldr	r3, [pc, #44]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 800709c:	4a11      	ldr	r2, [pc, #68]	@ (80070e4 <predictive_maintenance_configure_weights+0x16c>)
 800709e:	6093      	str	r3, [r2, #8]
    dense_7_dense_bias_array.data_start = AI_PTR(g_predictive_maintenance_weights_map[0] + 12544);
 80070a0:	4b08      	ldr	r3, [pc, #32]	@ (80070c4 <predictive_maintenance_configure_weights+0x14c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f503 5344 	add.w	r3, r3, #12544	@ 0x3100
 80070a8:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <predictive_maintenance_configure_weights+0x16c>)
 80070aa:	60d3      	str	r3, [r2, #12]
    return true;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e005      	b.n	80070bc <predictive_maintenance_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80070b0:	2212      	movs	r2, #18
 80070b2:	2130      	movs	r1, #48	@ 0x30
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa83 	bl	80075c0 <ai_platform_network_set_error>
  return false;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	200012f0 	.word	0x200012f0
 80070c8:	200000a0 	.word	0x200000a0
 80070cc:	200000b0 	.word	0x200000b0
 80070d0:	200000c0 	.word	0x200000c0
 80070d4:	200000d0 	.word	0x200000d0
 80070d8:	200000e0 	.word	0x200000e0
 80070dc:	200000f0 	.word	0x200000f0
 80070e0:	20000100 	.word	0x20000100
 80070e4:	20000110 	.word	0x20000110

080070e8 <ai_predictive_maintenance_get_error>:
}


AI_API_ENTRY
ai_error ai_predictive_maintenance_get_error(ai_handle network)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fa59 	bl	80075a8 <ai_platform_network_get_error>
 80070f6:	4603      	mov	r3, r0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <ai_predictive_maintenance_create>:


AI_API_ENTRY
ai_error ai_predictive_maintenance_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af02      	add	r7, sp, #8
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800710a:	2300      	movs	r3, #0
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	2305      	movs	r3, #5
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	2301      	movs	r3, #1
 8007114:	4a04      	ldr	r2, [pc, #16]	@ (8007128 <ai_predictive_maintenance_create+0x28>)
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb41 	bl	80077a0 <ai_platform_network_create>
 800711e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000880 	.word	0x20000880

0800712c <ai_predictive_maintenance_create_and_init>:


AI_API_ENTRY
ai_error ai_predictive_maintenance_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b094      	sub	sp, #80	@ 0x50
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_predictive_maintenance_create(network, AI_PREDICTIVE_MAINTENANCE_DATA_CONFIG);
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f7ff ffe0 	bl	8007100 <ai_predictive_maintenance_create>
 8007140:	4603      	mov	r3, r0
 8007142:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8007144:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8007148:	2b00      	cmp	r3, #0
 800714a:	d001      	beq.n	8007150 <ai_predictive_maintenance_create_and_init+0x24>
    return err;
 800714c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800714e:	e067      	b.n	8007220 <ai_predictive_maintenance_create_and_init+0xf4>
  }
  
  if (ai_predictive_maintenance_data_params_get(&params) != true) {
 8007150:	f107 0310 	add.w	r3, r7, #16
 8007154:	4618      	mov	r0, r3
 8007156:	f000 f8e7 	bl	8007328 <ai_predictive_maintenance_data_params_get>
 800715a:	4603      	mov	r3, r0
 800715c:	f083 0301 	eor.w	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d008      	beq.n	8007178 <ai_predictive_maintenance_create_and_init+0x4c>
    err = ai_predictive_maintenance_get_error(*network);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ffbc 	bl	80070e8 <ai_predictive_maintenance_get_error>
 8007170:	4603      	mov	r3, r0
 8007172:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8007174:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007176:	e053      	b.n	8007220 <ai_predictive_maintenance_create_and_init+0xf4>
  }
#if defined(AI_PREDICTIVE_MAINTENANCE_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8007178:	2300      	movs	r3, #0
 800717a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800717e:	e012      	b.n	80071a6 <ai_predictive_maintenance_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8007180:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8007184:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	4413      	add	r3, r2
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	f107 0310 	add.w	r3, r7, #16
 8007194:	330c      	adds	r3, #12
 8007196:	4618      	mov	r0, r3
 8007198:	f000 f92c 	bl	80073f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 800719c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80071a0:	3301      	adds	r3, #1
 80071a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <ai_predictive_maintenance_create_and_init+0x8a>
 80071ac:	8bfb      	ldrh	r3, [r7, #30]
 80071ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d3e4      	bcc.n	8007180 <ai_predictive_maintenance_create_and_init+0x54>
  }
#endif
#if defined(AI_PREDICTIVE_MAINTENANCE_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80071b6:	2300      	movs	r3, #0
 80071b8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80071bc:	e012      	b.n	80071e4 <ai_predictive_maintenance_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80071be:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 80071c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	f107 0310 	add.w	r3, r7, #16
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 f90d 	bl	80073f4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 80071da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80071de:	3301      	adds	r3, #1
 80071e0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d004      	beq.n	80071f4 <ai_predictive_maintenance_create_and_init+0xc8>
 80071ea:	8afb      	ldrh	r3, [r7, #22]
 80071ec:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d3e4      	bcc.n	80071be <ai_predictive_maintenance_create_and_init+0x92>
  }
#endif
  if (ai_predictive_maintenance_init(*network, &params) != true) {
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f107 0210 	add.w	r2, r7, #16
 80071fc:	4611      	mov	r1, r2
 80071fe:	4618      	mov	r0, r3
 8007200:	f000 f846 	bl	8007290 <ai_predictive_maintenance_init>
 8007204:	4603      	mov	r3, r0
 8007206:	f083 0301 	eor.w	r3, r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d006      	beq.n	800721e <ai_predictive_maintenance_create_and_init+0xf2>
    err = ai_predictive_maintenance_get_error(*network);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4618      	mov	r0, r3
 8007216:	f7ff ff67 	bl	80070e8 <ai_predictive_maintenance_get_error>
 800721a:	4603      	mov	r3, r0
 800721c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 800721e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007220:	4618      	mov	r0, r3
 8007222:	3750      	adds	r7, #80	@ 0x50
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <ai_predictive_maintenance_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_predictive_maintenance_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <ai_predictive_maintenance_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8007238:	4b06      	ldr	r3, [pc, #24]	@ (8007254 <ai_predictive_maintenance_inputs_get+0x2c>)
 800723a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a06      	ldr	r2, [pc, #24]	@ (8007258 <ai_predictive_maintenance_inputs_get+0x30>)
 8007240:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9c1 	bl	80075cc <ai_platform_inputs_get>
 800724a:	4603      	mov	r3, r0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3708      	adds	r7, #8
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}
 8007254:	20000880 	.word	0x20000880
 8007258:	a1c00100 	.word	0xa1c00100

0800725c <ai_predictive_maintenance_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_predictive_maintenance_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d104      	bne.n	8007276 <ai_predictive_maintenance_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <ai_predictive_maintenance_outputs_get+0x2c>)
 800726e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a06      	ldr	r2, [pc, #24]	@ (800728c <ai_predictive_maintenance_outputs_get+0x30>)
 8007274:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fa1d 	bl	80076b8 <ai_platform_outputs_get>
 800727e:	4603      	mov	r3, r0
}
 8007280:	4618      	mov	r0, r3
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000880 	.word	0x20000880
 800728c:	a1c00100 	.word	0xa1c00100

08007290 <ai_predictive_maintenance_init>:


AI_API_ENTRY
ai_bool ai_predictive_maintenance_init(
  ai_handle network, const ai_network_params* params)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 800729a:	6839      	ldr	r1, [r7, #0]
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fac1 	bl	8007824 <ai_platform_network_init>
 80072a2:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 80072a4:	2301      	movs	r3, #1
 80072a6:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <ai_predictive_maintenance_init+0x22>
 80072ae:	2300      	movs	r3, #0
 80072b0:	e026      	b.n	8007300 <ai_predictive_maintenance_init+0x70>
  ok &= predictive_maintenance_configure_weights(net_ctx, params);
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f7ff fe5f 	bl	8006f78 <predictive_maintenance_configure_weights>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	4013      	ands	r3, r2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	bf14      	ite	ne
 80072c6:	2301      	movne	r3, #1
 80072c8:	2300      	moveq	r3, #0
 80072ca:	72fb      	strb	r3, [r7, #11]
  ok &= predictive_maintenance_configure_activations(net_ctx, params);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fdd0 	bl	8006e74 <predictive_maintenance_configure_activations>
 80072d4:	4603      	mov	r3, r0
 80072d6:	461a      	mov	r2, r3
 80072d8:	7afb      	ldrb	r3, [r7, #11]
 80072da:	4013      	ands	r3, r2
 80072dc:	2b00      	cmp	r3, #0
 80072de:	bf14      	ite	ne
 80072e0:	2301      	movne	r3, #1
 80072e2:	2300      	moveq	r3, #0
 80072e4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fb6a 	bl	80079c0 <ai_platform_network_post_init>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	7afb      	ldrb	r3, [r7, #11]
 80072f2:	4013      	ands	r3, r2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	bf14      	ite	ne
 80072f8:	2301      	movne	r3, #1
 80072fa:	2300      	moveq	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]

  return ok;
 80072fe:	7afb      	ldrb	r3, [r7, #11]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <ai_predictive_maintenance_run>:


AI_API_ENTRY
ai_i32 ai_predictive_maintenance_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 fb81 	bl	8007a20 <ai_platform_network_process>
 800731e:	4603      	mov	r3, r0
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <ai_predictive_maintenance_data_params_get>:
 * @ingroup predictive_maintenance_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_predictive_maintenance_data_params_get(ai_network_params* params)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <ai_predictive_maintenance_data_params_get+0x12>
 8007336:	2300      	movs	r3, #0
 8007338:	e016      	b.n	8007368 <ai_predictive_maintenance_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800733a:	4a0d      	ldr	r2, [pc, #52]	@ (8007370 <ai_predictive_maintenance_data_params_get+0x48>)
 800733c:	f107 0310 	add.w	r3, r7, #16
 8007340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007344:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_PREDICTIVE_MAINTENANCE_DATA_ACTIVATIONS_COUNT, g_predictive_maintenance_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8007348:	4a0a      	ldr	r2, [pc, #40]	@ (8007374 <ai_predictive_maintenance_data_params_get+0x4c>)
 800734a:	f107 0308 	add.w	r3, r7, #8
 800734e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007352:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_PREDICTIVE_MAINTENANCE_DATA_WEIGHTS_COUNT, g_predictive_maintenance_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8007356:	f107 0210 	add.w	r2, r7, #16
 800735a:	f107 0308 	add.w	r3, r7, #8
 800735e:	4619      	mov	r1, r3
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8ff 	bl	8007564 <ai_platform_bind_network_params>
 8007366:	4603      	mov	r3, r0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3718      	adds	r7, #24
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	0800a2b4 	.word	0x0800a2b4
 8007374:	0800a2bc 	.word	0x0800a2bc

08007378 <ai_buffer_get_size>:
 8007378:	b378      	cbz	r0, 80073da <ai_buffer_get_size+0x62>
 800737a:	b410      	push	{r4}
 800737c:	6803      	ldr	r3, [r0, #0]
 800737e:	4a17      	ldr	r2, [pc, #92]	@ (80073dc <ai_buffer_get_size+0x64>)
 8007380:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8007384:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007388:	4293      	cmp	r3, r2
 800738a:	d01e      	beq.n	80073ca <ai_buffer_get_size+0x52>
 800738c:	6984      	ldr	r4, [r0, #24]
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	7d03      	ldrb	r3, [r0, #20]
 8007392:	6941      	ldr	r1, [r0, #20]
 8007394:	f1a3 0301 	sub.w	r3, r3, #1
 8007398:	fab3 f383 	clz	r3, r3
 800739c:	095b      	lsrs	r3, r3, #5
 800739e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80073a2:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80073a6:	da0b      	bge.n	80073c0 <ai_buffer_get_size+0x48>
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d102      	bne.n	80073b2 <ai_buffer_get_size+0x3a>
 80073ac:	2802      	cmp	r0, #2
 80073ae:	d007      	beq.n	80073c0 <ai_buffer_get_size+0x48>
 80073b0:	2302      	movs	r3, #2
 80073b2:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80073b6:	3301      	adds	r3, #1
 80073b8:	4298      	cmp	r0, r3
 80073ba:	fb01 f202 	mul.w	r2, r1, r2
 80073be:	d1f3      	bne.n	80073a8 <ai_buffer_get_size+0x30>
 80073c0:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80073c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c8:	4770      	bx	lr
 80073ca:	2900      	cmp	r1, #0
 80073cc:	d0de      	beq.n	800738c <ai_buffer_get_size+0x14>
 80073ce:	6984      	ldr	r4, [r0, #24]
 80073d0:	6862      	ldr	r2, [r4, #4]
 80073d2:	321f      	adds	r2, #31
 80073d4:	f022 021f 	bic.w	r2, r2, #31
 80073d8:	e7da      	b.n	8007390 <ai_buffer_get_size+0x18>
 80073da:	4770      	bx	lr
 80073dc:	000400c0 	.word	0x000400c0

080073e0 <ai_buffer_array_sane>:
 80073e0:	b138      	cbz	r0, 80073f2 <ai_buffer_array_sane+0x12>
 80073e2:	6843      	ldr	r3, [r0, #4]
 80073e4:	b123      	cbz	r3, 80073f0 <ai_buffer_array_sane+0x10>
 80073e6:	8840      	ldrh	r0, [r0, #2]
 80073e8:	3800      	subs	r0, #0
 80073ea:	bf18      	it	ne
 80073ec:	2001      	movne	r0, #1
 80073ee:	4770      	bx	lr
 80073f0:	4618      	mov	r0, r3
 80073f2:	4770      	bx	lr

080073f4 <ai_buffer_array_item_set_address>:
 80073f4:	b150      	cbz	r0, 800740c <ai_buffer_array_item_set_address+0x18>
 80073f6:	6843      	ldr	r3, [r0, #4]
 80073f8:	b14b      	cbz	r3, 800740e <ai_buffer_array_item_set_address+0x1a>
 80073fa:	8840      	ldrh	r0, [r0, #2]
 80073fc:	b900      	cbnz	r0, 8007400 <ai_buffer_array_item_set_address+0xc>
 80073fe:	4770      	bx	lr
 8007400:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8007404:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007408:	2001      	movs	r0, #1
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	4770      	bx	lr
 800740e:	4618      	mov	r0, r3
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop

08007414 <ai_platform_get_weights_map>:
 8007414:	2a00      	cmp	r2, #0
 8007416:	d037      	beq.n	8007488 <ai_platform_get_weights_map+0x74>
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	4604      	mov	r4, r0
 800741c:	b1a0      	cbz	r0, 8007448 <ai_platform_get_weights_map+0x34>
 800741e:	460f      	mov	r7, r1
 8007420:	b191      	cbz	r1, 8007448 <ai_platform_get_weights_map+0x34>
 8007422:	4b25      	ldr	r3, [pc, #148]	@ (80074b8 <ai_platform_get_weights_map+0xa4>)
 8007424:	6810      	ldr	r0, [r2, #0]
 8007426:	4298      	cmp	r0, r3
 8007428:	4615      	mov	r5, r2
 800742a:	d00f      	beq.n	800744c <ai_platform_get_weights_map+0x38>
 800742c:	6855      	ldr	r5, [r2, #4]
 800742e:	b15d      	cbz	r5, 8007448 <ai_platform_get_weights_map+0x34>
 8007430:	682e      	ldr	r6, [r5, #0]
 8007432:	429e      	cmp	r6, r3
 8007434:	d02a      	beq.n	800748c <ai_platform_get_weights_map+0x78>
 8007436:	f1a1 0001 	sub.w	r0, r1, #1
 800743a:	6025      	str	r5, [r4, #0]
 800743c:	fab0 f080 	clz	r0, r0
 8007440:	0940      	lsrs	r0, r0, #5
 8007442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007444:	42a7      	cmp	r7, r4
 8007446:	d034      	beq.n	80074b2 <ai_platform_get_weights_map+0x9e>
 8007448:	2000      	movs	r0, #0
 800744a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800744c:	1d10      	adds	r0, r2, #4
 800744e:	f7ff ffc7 	bl	80073e0 <ai_buffer_array_sane>
 8007452:	2800      	cmp	r0, #0
 8007454:	d0f8      	beq.n	8007448 <ai_platform_get_weights_map+0x34>
 8007456:	88eb      	ldrh	r3, [r5, #6]
 8007458:	429f      	cmp	r7, r3
 800745a:	d1f5      	bne.n	8007448 <ai_platform_get_weights_map+0x34>
 800745c:	f04f 0c00 	mov.w	ip, #0
 8007460:	1f20      	subs	r0, r4, #4
 8007462:	46e6      	mov	lr, ip
 8007464:	68ab      	ldr	r3, [r5, #8]
 8007466:	4463      	add	r3, ip
 8007468:	f10c 0c1c 	add.w	ip, ip, #28
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	b12b      	cbz	r3, 800747c <ai_platform_get_weights_map+0x68>
 8007470:	f10e 0e01 	add.w	lr, lr, #1
 8007474:	4577      	cmp	r7, lr
 8007476:	f840 3f04 	str.w	r3, [r0, #4]!
 800747a:	d1f3      	bne.n	8007464 <ai_platform_get_weights_map+0x50>
 800747c:	eba7 000e 	sub.w	r0, r7, lr
 8007480:	fab0 f080 	clz	r0, r0
 8007484:	0940      	lsrs	r0, r0, #5
 8007486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007488:	2000      	movs	r0, #0
 800748a:	4770      	bx	lr
 800748c:	1f20      	subs	r0, r4, #4
 800748e:	462a      	mov	r2, r5
 8007490:	2400      	movs	r4, #0
 8007492:	e000      	b.n	8007496 <ai_platform_get_weights_map+0x82>
 8007494:	461c      	mov	r4, r3
 8007496:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800749a:	42b3      	cmp	r3, r6
 800749c:	d0d2      	beq.n	8007444 <ai_platform_get_weights_map+0x30>
 800749e:	f840 3f04 	str.w	r3, [r0, #4]!
 80074a2:	1c63      	adds	r3, r4, #1
 80074a4:	429f      	cmp	r7, r3
 80074a6:	d1f5      	bne.n	8007494 <ai_platform_get_weights_map+0x80>
 80074a8:	3402      	adds	r4, #2
 80074aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80074ae:	42b3      	cmp	r3, r6
 80074b0:	d1ca      	bne.n	8007448 <ai_platform_get_weights_map+0x34>
 80074b2:	2001      	movs	r0, #1
 80074b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b6:	bf00      	nop
 80074b8:	a1facade 	.word	0xa1facade

080074bc <ai_platform_get_activations_map>:
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d038      	beq.n	8007532 <ai_platform_get_activations_map+0x76>
 80074c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074c2:	4604      	mov	r4, r0
 80074c4:	b1a0      	cbz	r0, 80074f0 <ai_platform_get_activations_map+0x34>
 80074c6:	460f      	mov	r7, r1
 80074c8:	b191      	cbz	r1, 80074f0 <ai_platform_get_activations_map+0x34>
 80074ca:	4b25      	ldr	r3, [pc, #148]	@ (8007560 <ai_platform_get_activations_map+0xa4>)
 80074cc:	6810      	ldr	r0, [r2, #0]
 80074ce:	4298      	cmp	r0, r3
 80074d0:	4615      	mov	r5, r2
 80074d2:	d00f      	beq.n	80074f4 <ai_platform_get_activations_map+0x38>
 80074d4:	6a15      	ldr	r5, [r2, #32]
 80074d6:	b15d      	cbz	r5, 80074f0 <ai_platform_get_activations_map+0x34>
 80074d8:	682e      	ldr	r6, [r5, #0]
 80074da:	429e      	cmp	r6, r3
 80074dc:	d02b      	beq.n	8007536 <ai_platform_get_activations_map+0x7a>
 80074de:	f1a1 0001 	sub.w	r0, r1, #1
 80074e2:	6025      	str	r5, [r4, #0]
 80074e4:	fab0 f080 	clz	r0, r0
 80074e8:	0940      	lsrs	r0, r0, #5
 80074ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ec:	42a7      	cmp	r7, r4
 80074ee:	d035      	beq.n	800755c <ai_platform_get_activations_map+0xa0>
 80074f0:	2000      	movs	r0, #0
 80074f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074f4:	f102 000c 	add.w	r0, r2, #12
 80074f8:	f7ff ff72 	bl	80073e0 <ai_buffer_array_sane>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d0f7      	beq.n	80074f0 <ai_platform_get_activations_map+0x34>
 8007500:	89eb      	ldrh	r3, [r5, #14]
 8007502:	429f      	cmp	r7, r3
 8007504:	d1f4      	bne.n	80074f0 <ai_platform_get_activations_map+0x34>
 8007506:	f04f 0c00 	mov.w	ip, #0
 800750a:	1f20      	subs	r0, r4, #4
 800750c:	46e6      	mov	lr, ip
 800750e:	692b      	ldr	r3, [r5, #16]
 8007510:	4463      	add	r3, ip
 8007512:	f10c 0c1c 	add.w	ip, ip, #28
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	b12b      	cbz	r3, 8007526 <ai_platform_get_activations_map+0x6a>
 800751a:	f10e 0e01 	add.w	lr, lr, #1
 800751e:	4577      	cmp	r7, lr
 8007520:	f840 3f04 	str.w	r3, [r0, #4]!
 8007524:	d1f3      	bne.n	800750e <ai_platform_get_activations_map+0x52>
 8007526:	eba7 000e 	sub.w	r0, r7, lr
 800752a:	fab0 f080 	clz	r0, r0
 800752e:	0940      	lsrs	r0, r0, #5
 8007530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007532:	2000      	movs	r0, #0
 8007534:	4770      	bx	lr
 8007536:	1f20      	subs	r0, r4, #4
 8007538:	462a      	mov	r2, r5
 800753a:	2400      	movs	r4, #0
 800753c:	e000      	b.n	8007540 <ai_platform_get_activations_map+0x84>
 800753e:	461c      	mov	r4, r3
 8007540:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8007544:	42b3      	cmp	r3, r6
 8007546:	d0d1      	beq.n	80074ec <ai_platform_get_activations_map+0x30>
 8007548:	f840 3f04 	str.w	r3, [r0, #4]!
 800754c:	1c63      	adds	r3, r4, #1
 800754e:	429f      	cmp	r7, r3
 8007550:	d1f5      	bne.n	800753e <ai_platform_get_activations_map+0x82>
 8007552:	3402      	adds	r4, #2
 8007554:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007558:	42b3      	cmp	r3, r6
 800755a:	d1c9      	bne.n	80074f0 <ai_platform_get_activations_map+0x34>
 800755c:	2001      	movs	r0, #1
 800755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007560:	a1facade 	.word	0xa1facade

08007564 <ai_platform_bind_network_params>:
 8007564:	b1a0      	cbz	r0, 8007590 <ai_platform_bind_network_params+0x2c>
 8007566:	b1b1      	cbz	r1, 8007596 <ai_platform_bind_network_params+0x32>
 8007568:	b1c2      	cbz	r2, 800759c <ai_platform_bind_network_params+0x38>
 800756a:	b410      	push	{r4}
 800756c:	4603      	mov	r3, r0
 800756e:	4c0d      	ldr	r4, [pc, #52]	@ (80075a4 <ai_platform_bind_network_params+0x40>)
 8007570:	f843 4b04 	str.w	r4, [r3], #4
 8007574:	f100 0c0c 	add.w	ip, r0, #12
 8007578:	c903      	ldmia	r1, {r0, r1}
 800757a:	e883 0003 	stmia.w	r3, {r0, r1}
 800757e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007582:	e88c 0003 	stmia.w	ip, {r0, r1}
 8007586:	2301      	movs	r3, #1
 8007588:	4618      	mov	r0, r3
 800758a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	4603      	mov	r3, r0
 8007592:	4618      	mov	r0, r3
 8007594:	4770      	bx	lr
 8007596:	460b      	mov	r3, r1
 8007598:	4618      	mov	r0, r3
 800759a:	4770      	bx	lr
 800759c:	4613      	mov	r3, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	a1facade 	.word	0xa1facade

080075a8 <ai_platform_network_get_error>:
 80075a8:	4b04      	ldr	r3, [pc, #16]	@ (80075bc <ai_platform_network_get_error+0x14>)
 80075aa:	6802      	ldr	r2, [r0, #0]
 80075ac:	4393      	bics	r3, r2
 80075ae:	d102      	bne.n	80075b6 <ai_platform_network_get_error+0xe>
 80075b0:	300c      	adds	r0, #12
 80075b2:	f000 bc77 	b.w	8007ea4 <core_get_error>
 80075b6:	f241 0010 	movw	r0, #4112	@ 0x1010
 80075ba:	4770      	bx	lr
 80075bc:	a1c00100 	.word	0xa1c00100

080075c0 <ai_platform_network_set_error>:
 80075c0:	b110      	cbz	r0, 80075c8 <ai_platform_network_set_error+0x8>
 80075c2:	300c      	adds	r0, #12
 80075c4:	f000 bc74 	b.w	8007eb0 <core_set_error>
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop

080075cc <ai_platform_inputs_get>:
 80075cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d0:	4b38      	ldr	r3, [pc, #224]	@ (80076b4 <ai_platform_inputs_get+0xe8>)
 80075d2:	6802      	ldr	r2, [r0, #0]
 80075d4:	b085      	sub	sp, #20
 80075d6:	4393      	bics	r3, r2
 80075d8:	9003      	str	r0, [sp, #12]
 80075da:	9102      	str	r1, [sp, #8]
 80075dc:	d160      	bne.n	80076a0 <ai_platform_inputs_get+0xd4>
 80075de:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d04f      	beq.n	8007684 <ai_platform_inputs_get+0xb8>
 80075e4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80075e8:	f1ba 0f00 	cmp.w	sl, #0
 80075ec:	d04a      	beq.n	8007684 <ai_platform_inputs_get+0xb8>
 80075ee:	f04f 0b00 	mov.w	fp, #0
 80075f2:	465d      	mov	r5, fp
 80075f4:	e016      	b.n	8007624 <ai_platform_inputs_get+0x58>
 80075f6:	9901      	ldr	r1, [sp, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	507a      	str	r2, [r7, r1]
 80075fc:	69b1      	ldr	r1, [r6, #24]
 80075fe:	684e      	ldr	r6, [r1, #4]
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	f04f 0201 	mov.w	r2, #1
 8007606:	7522      	strb	r2, [r4, #20]
 8007608:	6961      	ldr	r1, [r4, #20]
 800760a:	6020      	str	r0, [r4, #0]
 800760c:	f369 211f 	bfi	r1, r9, #8, #24
 8007610:	2300      	movs	r3, #0
 8007612:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8007616:	e9c4 1805 	strd	r1, r8, [r4, #20]
 800761a:	f8c4 c004 	str.w	ip, [r4, #4]
 800761e:	3501      	adds	r5, #1
 8007620:	f10b 0b1c 	add.w	fp, fp, #28
 8007624:	f8ba 3000 	ldrh.w	r3, [sl]
 8007628:	42ab      	cmp	r3, r5
 800762a:	b2aa      	uxth	r2, r5
 800762c:	d93c      	bls.n	80076a8 <ai_platform_inputs_get+0xdc>
 800762e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007632:	00e9      	lsls	r1, r5, #3
 8007634:	9101      	str	r1, [sp, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d036      	beq.n	80076a8 <ai_platform_inputs_get+0xdc>
 800763a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800763e:	2e00      	cmp	r6, #0
 8007640:	d032      	beq.n	80076a8 <ai_platform_inputs_get+0xdc>
 8007642:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007646:	69b2      	ldr	r2, [r6, #24]
 8007648:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800764c:	6810      	ldr	r0, [r2, #0]
 800764e:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007652:	68b3      	ldr	r3, [r6, #8]
 8007654:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8007658:	f001 fba0 	bl	8008d9c <ai_array_to_buffer_fmt>
 800765c:	69b1      	ldr	r1, [r6, #24]
 800765e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8007662:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007666:	445c      	add	r4, fp
 8007668:	2b00      	cmp	r3, #0
 800766a:	d0c8      	beq.n	80075fe <ai_platform_inputs_get+0x32>
 800766c:	2100      	movs	r1, #0
 800766e:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8007672:	6831      	ldr	r1, [r6, #0]
 8007674:	6059      	str	r1, [r3, #4]
 8007676:	b111      	cbz	r1, 800767e <ai_platform_inputs_get+0xb2>
 8007678:	8849      	ldrh	r1, [r1, #2]
 800767a:	2900      	cmp	r1, #0
 800767c:	d1bb      	bne.n	80075f6 <ai_platform_inputs_get+0x2a>
 800767e:	69b1      	ldr	r1, [r6, #24]
 8007680:	2300      	movs	r3, #0
 8007682:	e7bc      	b.n	80075fe <ai_platform_inputs_get+0x32>
 8007684:	9803      	ldr	r0, [sp, #12]
 8007686:	2218      	movs	r2, #24
 8007688:	2111      	movs	r1, #17
 800768a:	300c      	adds	r0, #12
 800768c:	f000 fc10 	bl	8007eb0 <core_set_error>
 8007690:	2200      	movs	r2, #0
 8007692:	4610      	mov	r0, r2
 8007694:	9b02      	ldr	r3, [sp, #8]
 8007696:	b103      	cbz	r3, 800769a <ai_platform_inputs_get+0xce>
 8007698:	801a      	strh	r2, [r3, #0]
 800769a:	b005      	add	sp, #20
 800769c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a0:	2000      	movs	r0, #0
 80076a2:	b005      	add	sp, #20
 80076a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076a8:	2a00      	cmp	r2, #0
 80076aa:	d0eb      	beq.n	8007684 <ai_platform_inputs_get+0xb8>
 80076ac:	f8da 3008 	ldr.w	r3, [sl, #8]
 80076b0:	6858      	ldr	r0, [r3, #4]
 80076b2:	e7ef      	b.n	8007694 <ai_platform_inputs_get+0xc8>
 80076b4:	a1c00100 	.word	0xa1c00100

080076b8 <ai_platform_outputs_get>:
 80076b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076bc:	4b37      	ldr	r3, [pc, #220]	@ (800779c <ai_platform_outputs_get+0xe4>)
 80076be:	6802      	ldr	r2, [r0, #0]
 80076c0:	b085      	sub	sp, #20
 80076c2:	4393      	bics	r3, r2
 80076c4:	9003      	str	r0, [sp, #12]
 80076c6:	9102      	str	r1, [sp, #8]
 80076c8:	d15d      	bne.n	8007786 <ai_platform_outputs_get+0xce>
 80076ca:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d94c      	bls.n	800776a <ai_platform_outputs_get+0xb2>
 80076d0:	f04f 0b00 	mov.w	fp, #0
 80076d4:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80076d8:	465d      	mov	r5, fp
 80076da:	46d8      	mov	r8, fp
 80076dc:	e016      	b.n	800770c <ai_platform_outputs_get+0x54>
 80076de:	9a01      	ldr	r2, [sp, #4]
 80076e0:	2101      	movs	r1, #1
 80076e2:	50b9      	str	r1, [r7, r2]
 80076e4:	69b2      	ldr	r2, [r6, #24]
 80076e6:	6856      	ldr	r6, [r2, #4]
 80076e8:	6020      	str	r0, [r4, #0]
 80076ea:	f04f 0201 	mov.w	r2, #1
 80076ee:	7522      	strb	r2, [r4, #20]
 80076f0:	6960      	ldr	r0, [r4, #20]
 80076f2:	f8c4 c004 	str.w	ip, [r4, #4]
 80076f6:	f369 201f 	bfi	r0, r9, #8, #24
 80076fa:	e9c4 6004 	strd	r6, r0, [r4, #16]
 80076fe:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8007702:	9b00      	ldr	r3, [sp, #0]
 8007704:	61a3      	str	r3, [r4, #24]
 8007706:	3501      	adds	r5, #1
 8007708:	f10b 0b1c 	add.w	fp, fp, #28
 800770c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8007710:	42ab      	cmp	r3, r5
 8007712:	b2aa      	uxth	r2, r5
 8007714:	d93b      	bls.n	800778e <ai_platform_outputs_get+0xd6>
 8007716:	f8da 3010 	ldr.w	r3, [sl, #16]
 800771a:	00e9      	lsls	r1, r5, #3
 800771c:	9101      	str	r1, [sp, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d035      	beq.n	800778e <ai_platform_outputs_get+0xd6>
 8007722:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8007726:	2e00      	cmp	r6, #0
 8007728:	d031      	beq.n	800778e <ai_platform_outputs_get+0xd6>
 800772a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800772e:	69b2      	ldr	r2, [r6, #24]
 8007730:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8007734:	68b3      	ldr	r3, [r6, #8]
 8007736:	6810      	ldr	r0, [r2, #0]
 8007738:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800773c:	68f3      	ldr	r3, [r6, #12]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	f001 fb2c 	bl	8008d9c <ai_array_to_buffer_fmt>
 8007744:	69b2      	ldr	r2, [r6, #24]
 8007746:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800774a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 800774e:	445c      	add	r4, fp
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0c8      	beq.n	80076e6 <ai_platform_outputs_get+0x2e>
 8007754:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8007758:	6832      	ldr	r2, [r6, #0]
 800775a:	605a      	str	r2, [r3, #4]
 800775c:	b112      	cbz	r2, 8007764 <ai_platform_outputs_get+0xac>
 800775e:	8852      	ldrh	r2, [r2, #2]
 8007760:	2a00      	cmp	r2, #0
 8007762:	d1bc      	bne.n	80076de <ai_platform_outputs_get+0x26>
 8007764:	69b2      	ldr	r2, [r6, #24]
 8007766:	2300      	movs	r3, #0
 8007768:	e7bd      	b.n	80076e6 <ai_platform_outputs_get+0x2e>
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	2218      	movs	r2, #24
 800776e:	2111      	movs	r1, #17
 8007770:	300c      	adds	r0, #12
 8007772:	f000 fb9d 	bl	8007eb0 <core_set_error>
 8007776:	2200      	movs	r2, #0
 8007778:	4610      	mov	r0, r2
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	b103      	cbz	r3, 8007780 <ai_platform_outputs_get+0xc8>
 800777e:	801a      	strh	r2, [r3, #0]
 8007780:	b005      	add	sp, #20
 8007782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007786:	2000      	movs	r0, #0
 8007788:	b005      	add	sp, #20
 800778a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800778e:	2a00      	cmp	r2, #0
 8007790:	d0eb      	beq.n	800776a <ai_platform_outputs_get+0xb2>
 8007792:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007796:	6858      	ldr	r0, [r3, #4]
 8007798:	e7ef      	b.n	800777a <ai_platform_outputs_get+0xc2>
 800779a:	bf00      	nop
 800779c:	a1c00100 	.word	0xa1c00100

080077a0 <ai_platform_network_create>:
 80077a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077a4:	b083      	sub	sp, #12
 80077a6:	f89d 9028 	ldrb.w	r9, [sp, #40]	@ 0x28
 80077aa:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80077ae:	b320      	cbz	r0, 80077fa <ai_platform_network_create+0x5a>
 80077b0:	6002      	str	r2, [r0, #0]
 80077b2:	4616      	mov	r6, r2
 80077b4:	461f      	mov	r7, r3
 80077b6:	4604      	mov	r4, r0
 80077b8:	f000 fb72 	bl	8007ea0 <core_init>
 80077bc:	b970      	cbnz	r0, 80077dc <ai_platform_network_create+0x3c>
 80077be:	2530      	movs	r5, #48	@ 0x30
 80077c0:	2300      	movs	r3, #0
 80077c2:	6023      	str	r3, [r4, #0]
 80077c4:	2410      	movs	r4, #16
 80077c6:	4642      	mov	r2, r8
 80077c8:	4649      	mov	r1, r9
 80077ca:	4638      	mov	r0, r7
 80077cc:	f001 fb68 	bl	8008ea0 <ai_version_get>
 80077d0:	60b0      	str	r0, [r6, #8]
 80077d2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80077d6:	b003      	add	sp, #12
 80077d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077dc:	2200      	movs	r2, #0
 80077de:	4649      	mov	r1, r9
 80077e0:	4638      	mov	r0, r7
 80077e2:	f001 fb5d 	bl	8008ea0 <ai_version_get>
 80077e6:	2200      	movs	r2, #0
 80077e8:	4605      	mov	r5, r0
 80077ea:	2105      	movs	r1, #5
 80077ec:	2001      	movs	r0, #1
 80077ee:	f001 fb57 	bl	8008ea0 <ai_version_get>
 80077f2:	4285      	cmp	r5, r0
 80077f4:	d008      	beq.n	8007808 <ai_platform_network_create+0x68>
 80077f6:	2501      	movs	r5, #1
 80077f8:	e7e2      	b.n	80077c0 <ai_platform_network_create+0x20>
 80077fa:	2510      	movs	r5, #16
 80077fc:	462c      	mov	r4, r5
 80077fe:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8007802:	b003      	add	sp, #12
 8007804:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007808:	4b05      	ldr	r3, [pc, #20]	@ (8007820 <ai_platform_network_create+0x80>)
 800780a:	9301      	str	r3, [sp, #4]
 800780c:	a801      	add	r0, sp, #4
 800780e:	f000 fb5b 	bl	8007ec8 <ai_check_custom_types>
 8007812:	b110      	cbz	r0, 800781a <ai_platform_network_create+0x7a>
 8007814:	2400      	movs	r4, #0
 8007816:	4625      	mov	r5, r4
 8007818:	e7d5      	b.n	80077c6 <ai_platform_network_create+0x26>
 800781a:	2502      	movs	r5, #2
 800781c:	e7d0      	b.n	80077c0 <ai_platform_network_create+0x20>
 800781e:	bf00      	nop
 8007820:	84048403 	.word	0x84048403

08007824 <ai_platform_network_init>:
 8007824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007828:	4b63      	ldr	r3, [pc, #396]	@ (80079b8 <ai_platform_network_init+0x194>)
 800782a:	6802      	ldr	r2, [r0, #0]
 800782c:	4393      	bics	r3, r2
 800782e:	b083      	sub	sp, #12
 8007830:	d156      	bne.n	80078e0 <ai_platform_network_init+0xbc>
 8007832:	4604      	mov	r4, r0
 8007834:	460f      	mov	r7, r1
 8007836:	2900      	cmp	r1, #0
 8007838:	f000 80a9 	beq.w	800798e <ai_platform_network_init+0x16a>
 800783c:	680b      	ldr	r3, [r1, #0]
 800783e:	495f      	ldr	r1, [pc, #380]	@ (80079bc <ai_platform_network_init+0x198>)
 8007840:	428b      	cmp	r3, r1
 8007842:	d113      	bne.n	800786c <ai_platform_network_init+0x48>
 8007844:	495c      	ldr	r1, [pc, #368]	@ (80079b8 <ai_platform_network_init+0x194>)
 8007846:	89bd      	ldrh	r5, [r7, #12]
 8007848:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 800784c:	f8d7 8010 	ldr.w	r8, [r7, #16]
 8007850:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 8007854:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8007858:	68be      	ldr	r6, [r7, #8]
 800785a:	428a      	cmp	r2, r1
 800785c:	d02c      	beq.n	80078b8 <ai_platform_network_init+0x94>
 800785e:	2303      	movs	r3, #3
 8007860:	6123      	str	r3, [r4, #16]
 8007862:	4627      	mov	r7, r4
 8007864:	4638      	mov	r0, r7
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786c:	2101      	movs	r1, #1
 800786e:	4638      	mov	r0, r7
 8007870:	9301      	str	r3, [sp, #4]
 8007872:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8007876:	f7ff fd7f 	bl	8007378 <ai_buffer_get_size>
 800787a:	f107 081c 	add.w	r8, r7, #28
 800787e:	4605      	mov	r5, r0
 8007880:	2101      	movs	r1, #1
 8007882:	4640      	mov	r0, r8
 8007884:	463e      	mov	r6, r7
 8007886:	6a3f      	ldr	r7, [r7, #32]
 8007888:	f7ff fd76 	bl	8007378 <ai_buffer_get_size>
 800788c:	2d00      	cmp	r5, #0
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	bf0a      	itet	eq
 8007892:	46a9      	moveq	r9, r5
 8007894:	f04f 0901 	movne.w	r9, #1
 8007898:	462e      	moveq	r6, r5
 800789a:	b330      	cbz	r0, 80078ea <ai_platform_network_init+0xc6>
 800789c:	2f00      	cmp	r7, #0
 800789e:	f000 8084 	beq.w	80079aa <ai_platform_network_init+0x186>
 80078a2:	f04f 0a01 	mov.w	sl, #1
 80078a6:	f1bb 0f00 	cmp.w	fp, #0
 80078aa:	d021      	beq.n	80078f0 <ai_platform_network_init+0xcc>
 80078ac:	2500      	movs	r5, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	4941      	ldr	r1, [pc, #260]	@ (80079b8 <ai_platform_network_init+0x194>)
 80078b2:	428a      	cmp	r2, r1
 80078b4:	46ab      	mov	fp, r5
 80078b6:	d1d2      	bne.n	800785e <ai_platform_network_init+0x3a>
 80078b8:	8c62      	ldrh	r2, [r4, #34]	@ 0x22
 80078ba:	454a      	cmp	r2, r9
 80078bc:	4a3f      	ldr	r2, [pc, #252]	@ (80079bc <ai_platform_network_init+0x198>)
 80078be:	d221      	bcs.n	8007904 <ai_platform_network_init+0xe0>
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d15c      	bne.n	800797e <ai_platform_network_init+0x15a>
 80078c4:	6266      	str	r6, [r4, #36]	@ 0x24
 80078c6:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 80078ca:	f8a4 b020 	strh.w	fp, [r4, #32]
 80078ce:	f8c4 802c 	str.w	r8, [r4, #44]	@ 0x2c
 80078d2:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
 80078d6:	8525      	strh	r5, [r4, #40]	@ 0x28
 80078d8:	4620      	mov	r0, r4
 80078da:	f000 fb1f 	bl	8007f1c <ai_layers_init_all>
 80078de:	e7be      	b.n	800785e <ai_platform_network_init+0x3a>
 80078e0:	2700      	movs	r7, #0
 80078e2:	4638      	mov	r0, r7
 80078e4:	b003      	add	sp, #12
 80078e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ea:	4680      	mov	r8, r0
 80078ec:	4682      	mov	sl, r0
 80078ee:	e7da      	b.n	80078a6 <ai_platform_network_init+0x82>
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	d0dc      	beq.n	80078ae <ai_platform_network_init+0x8a>
 80078f4:	2212      	movs	r2, #18
 80078f6:	2110      	movs	r1, #16
 80078f8:	f104 000c 	add.w	r0, r4, #12
 80078fc:	f000 fad8 	bl	8007eb0 <core_set_error>
 8007900:	465f      	mov	r7, fp
 8007902:	e7af      	b.n	8007864 <ai_platform_network_init+0x40>
 8007904:	4293      	cmp	r3, r2
 8007906:	d0dd      	beq.n	80078c4 <ai_platform_network_init+0xa0>
 8007908:	f1b9 0f00 	cmp.w	r9, #0
 800790c:	d018      	beq.n	8007940 <ai_platform_network_init+0x11c>
 800790e:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	f8cd 9004 	str.w	r9, [sp, #4]
 8007918:	2700      	movs	r7, #0
 800791a:	4699      	mov	r9, r3
 800791c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800791e:	eb06 0e07 	add.w	lr, r6, r7
 8007922:	eb03 0c07 	add.w	ip, r3, r7
 8007926:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800792a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800792e:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8007932:	371c      	adds	r7, #28
 8007934:	45b9      	cmp	r9, r7
 8007936:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800793a:	d1ef      	bne.n	800791c <ai_platform_network_init+0xf8>
 800793c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007940:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007942:	f8a4 9022 	strh.w	r9, [r4, #34]	@ 0x22
 8007946:	4553      	cmp	r3, sl
 8007948:	f8a4 b020 	strh.w	fp, [r4, #32]
 800794c:	d325      	bcc.n	800799a <ai_platform_network_init+0x176>
 800794e:	f1ba 0f00 	cmp.w	sl, #0
 8007952:	d0be      	beq.n	80078d2 <ai_platform_network_init+0xae>
 8007954:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8007958:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800795c:	f04f 0c00 	mov.w	ip, #0
 8007960:	eb08 070c 	add.w	r7, r8, ip
 8007964:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8007966:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007968:	4466      	add	r6, ip
 800796a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800796c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8007970:	f10c 0c1c 	add.w	ip, ip, #28
 8007974:	45f4      	cmp	ip, lr
 8007976:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800797a:	d1f1      	bne.n	8007960 <ai_platform_network_init+0x13c>
 800797c:	e7a9      	b.n	80078d2 <ai_platform_network_init+0xae>
 800797e:	2212      	movs	r2, #18
 8007980:	2116      	movs	r1, #22
 8007982:	f104 000c 	add.w	r0, r4, #12
 8007986:	f000 fa93 	bl	8007eb0 <core_set_error>
 800798a:	2700      	movs	r7, #0
 800798c:	e76a      	b.n	8007864 <ai_platform_network_init+0x40>
 800798e:	2211      	movs	r2, #17
 8007990:	2110      	movs	r1, #16
 8007992:	300c      	adds	r0, #12
 8007994:	f000 fa8c 	bl	8007eb0 <core_set_error>
 8007998:	e764      	b.n	8007864 <ai_platform_network_init+0x40>
 800799a:	2213      	movs	r2, #19
 800799c:	2116      	movs	r1, #22
 800799e:	f104 000c 	add.w	r0, r4, #12
 80079a2:	f000 fa85 	bl	8007eb0 <core_set_error>
 80079a6:	2700      	movs	r7, #0
 80079a8:	e75c      	b.n	8007864 <ai_platform_network_init+0x40>
 80079aa:	2213      	movs	r2, #19
 80079ac:	2110      	movs	r1, #16
 80079ae:	f104 000c 	add.w	r0, r4, #12
 80079b2:	f000 fa7d 	bl	8007eb0 <core_set_error>
 80079b6:	e755      	b.n	8007864 <ai_platform_network_init+0x40>
 80079b8:	a1c00100 	.word	0xa1c00100
 80079bc:	a1facade 	.word	0xa1facade

080079c0 <ai_platform_network_post_init>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4b16      	ldr	r3, [pc, #88]	@ (8007a1c <ai_platform_network_post_init+0x5c>)
 80079c4:	6802      	ldr	r2, [r0, #0]
 80079c6:	ea02 0103 	and.w	r1, r2, r3
 80079ca:	4393      	bics	r3, r2
 80079cc:	d108      	bne.n	80079e0 <ai_platform_network_post_init+0x20>
 80079ce:	6903      	ldr	r3, [r0, #16]
 80079d0:	f013 0502 	ands.w	r5, r3, #2
 80079d4:	4604      	mov	r4, r0
 80079d6:	d005      	beq.n	80079e4 <ai_platform_network_post_init+0x24>
 80079d8:	428a      	cmp	r2, r1
 80079da:	d00a      	beq.n	80079f2 <ai_platform_network_post_init+0x32>
 80079dc:	2001      	movs	r0, #1
 80079de:	bd38      	pop	{r3, r4, r5, pc}
 80079e0:	2000      	movs	r0, #0
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	2210      	movs	r2, #16
 80079e6:	2111      	movs	r1, #17
 80079e8:	300c      	adds	r0, #12
 80079ea:	f000 fa61 	bl	8007eb0 <core_set_error>
 80079ee:	4628      	mov	r0, r5
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	f000 faa1 	bl	8007f38 <ai_layers_post_init_all>
 80079f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d0ef      	beq.n	80079dc <ai_platform_network_post_init+0x1c>
 80079fc:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80079fe:	e008      	b.n	8007a12 <ai_platform_network_post_init+0x52>
 8007a00:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	@ 0x40
 8007a04:	4798      	blx	r3
 8007a06:	692b      	ldr	r3, [r5, #16]
 8007a08:	42ab      	cmp	r3, r5
 8007a0a:	d0e7      	beq.n	80079dc <ai_platform_network_post_init+0x1c>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d0e5      	beq.n	80079dc <ai_platform_network_post_init+0x1c>
 8007a10:	461d      	mov	r5, r3
 8007a12:	4629      	mov	r1, r5
 8007a14:	2000      	movs	r0, #0
 8007a16:	2d00      	cmp	r5, #0
 8007a18:	d1f2      	bne.n	8007a00 <ai_platform_network_post_init+0x40>
 8007a1a:	e7df      	b.n	80079dc <ai_platform_network_post_init+0x1c>
 8007a1c:	a1c00100 	.word	0xa1c00100

08007a20 <ai_platform_network_process>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	4bb5      	ldr	r3, [pc, #724]	@ (8007cfc <ai_platform_network_process+0x2dc>)
 8007a26:	4605      	mov	r5, r0
 8007a28:	6800      	ldr	r0, [r0, #0]
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	4383      	bics	r3, r0
 8007a2e:	9202      	str	r2, [sp, #8]
 8007a30:	f040 8140 	bne.w	8007cb4 <ai_platform_network_process+0x294>
 8007a34:	8e2b      	ldrh	r3, [r5, #48]	@ 0x30
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f000 8125 	beq.w	8007c86 <ai_platform_network_process+0x266>
 8007a3c:	692b      	ldr	r3, [r5, #16]
 8007a3e:	f8d5 a034 	ldr.w	sl, [r5, #52]	@ 0x34
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	2700      	movs	r7, #0
 8007a48:	2b03      	cmp	r3, #3
 8007a4a:	61af      	str	r7, [r5, #24]
 8007a4c:	f040 8137 	bne.w	8007cbe <ai_platform_network_process+0x29e>
 8007a50:	2900      	cmp	r1, #0
 8007a52:	f000 811e 	beq.w	8007c92 <ai_platform_network_process+0x272>
 8007a56:	f1ba 0f00 	cmp.w	sl, #0
 8007a5a:	f000 811a 	beq.w	8007c92 <ai_platform_network_process+0x272>
 8007a5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 8115 	beq.w	8007c92 <ai_platform_network_process+0x272>
 8007a68:	698b      	ldr	r3, [r1, #24]
 8007a6a:	9503      	str	r5, [sp, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	9301      	str	r3, [sp, #4]
 8007a70:	460e      	mov	r6, r1
 8007a72:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d072      	beq.n	8007b60 <ai_platform_network_process+0x140>
 8007a7a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007a7e:	2c00      	cmp	r4, #0
 8007a80:	d06e      	beq.n	8007b60 <ai_platform_network_process+0x140>
 8007a82:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007a86:	f8d3 9000 	ldr.w	r9, [r3]
 8007a8a:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8007a8e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007a92:	f000 81d3 	beq.w	8007e3c <ai_platform_network_process+0x41c>
 8007a96:	69a3      	ldr	r3, [r4, #24]
 8007a98:	2101      	movs	r1, #1
 8007a9a:	4630      	mov	r0, r6
 8007a9c:	685d      	ldr	r5, [r3, #4]
 8007a9e:	f7ff fc6b 	bl	8007378 <ai_buffer_get_size>
 8007aa2:	4285      	cmp	r5, r0
 8007aa4:	f0c0 8116 	bcc.w	8007cd4 <ai_platform_network_process+0x2b4>
 8007aa8:	68e0      	ldr	r0, [r4, #12]
 8007aaa:	69b1      	ldr	r1, [r6, #24]
 8007aac:	68c2      	ldr	r2, [r0, #12]
 8007aae:	68cb      	ldr	r3, [r1, #12]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	f040 810f 	bne.w	8007cd4 <ai_platform_network_process+0x2b4>
 8007ab6:	6882      	ldr	r2, [r0, #8]
 8007ab8:	688b      	ldr	r3, [r1, #8]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	f040 810a 	bne.w	8007cd4 <ai_platform_network_process+0x2b4>
 8007ac0:	6842      	ldr	r2, [r0, #4]
 8007ac2:	684b      	ldr	r3, [r1, #4]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	f040 8105 	bne.w	8007cd4 <ai_platform_network_process+0x2b4>
 8007aca:	69a3      	ldr	r3, [r4, #24]
 8007acc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007ad0:	f001 f9d4 	bl	8008e7c <ai_array_get_data_byte_size>
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 f9e8 	bl	8008eac <get_tensor_byte_size>
 8007adc:	4285      	cmp	r5, r0
 8007ade:	f0c0 80f9 	bcc.w	8007cd4 <ai_platform_network_process+0x2b4>
 8007ae2:	69a3      	ldr	r3, [r4, #24]
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f001 f959 	bl	8008d9c <ai_array_to_buffer_fmt>
 8007aea:	6833      	ldr	r3, [r6, #0]
 8007aec:	4058      	eors	r0, r3
 8007aee:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007af2:	f040 81a5 	bne.w	8007e40 <ai_platform_network_process+0x420>
 8007af6:	6873      	ldr	r3, [r6, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 819f 	beq.w	8007e3c <ai_platform_network_process+0x41c>
 8007afe:	69b3      	ldr	r3, [r6, #24]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 81a5 	beq.w	8007e52 <ai_platform_network_process+0x432>
 8007b08:	9a01      	ldr	r2, [sp, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	bf38      	it	cc
 8007b0e:	461a      	movcc	r2, r3
 8007b10:	4620      	mov	r0, r4
 8007b12:	9201      	str	r2, [sp, #4]
 8007b14:	f001 f9ca 	bl	8008eac <get_tensor_byte_size>
 8007b18:	f8c8 0008 	str.w	r0, [r8, #8]
 8007b1c:	69b3      	ldr	r3, [r6, #24]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	fb00 f303 	mul.w	r3, r0, r3
 8007b24:	f8c8 300c 	str.w	r3, [r8, #12]
 8007b28:	6871      	ldr	r1, [r6, #4]
 8007b2a:	f8c8 1004 	str.w	r1, [r8, #4]
 8007b2e:	440b      	add	r3, r1
 8007b30:	f849 300b 	str.w	r3, [r9, fp]
 8007b34:	69a0      	ldr	r0, [r4, #24]
 8007b36:	6803      	ldr	r3, [r0, #0]
 8007b38:	009a      	lsls	r2, r3, #2
 8007b3a:	f107 0701 	add.w	r7, r7, #1
 8007b3e:	f106 061c 	add.w	r6, r6, #28
 8007b42:	f100 80b1 	bmi.w	8007ca8 <ai_platform_network_process+0x288>
 8007b46:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	4419      	add	r1, r3
 8007b4e:	6081      	str	r1, [r0, #8]
 8007b50:	69a3      	ldr	r3, [r4, #24]
 8007b52:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007b56:	60da      	str	r2, [r3, #12]
 8007b58:	f8ba 3000 	ldrh.w	r3, [sl]
 8007b5c:	42bb      	cmp	r3, r7
 8007b5e:	d888      	bhi.n	8007a72 <ai_platform_network_process+0x52>
 8007b60:	9d03      	ldr	r5, [sp, #12]
 8007b62:	9b02      	ldr	r3, [sp, #8]
 8007b64:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 817c 	beq.w	8007e64 <ai_platform_network_process+0x444>
 8007b6c:	2a01      	cmp	r2, #1
 8007b6e:	f240 80bd 	bls.w	8007cec <ai_platform_network_process+0x2cc>
 8007b72:	f8d5 8034 	ldr.w	r8, [r5, #52]	@ 0x34
 8007b76:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80b6 	beq.w	8007cec <ai_platform_network_process+0x2cc>
 8007b80:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007b84:	2700      	movs	r7, #0
 8007b86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	f000 80bd 	beq.w	8007d0a <ai_platform_network_process+0x2ea>
 8007b90:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	f000 80b8 	beq.w	8007d0a <ai_platform_network_process+0x2ea>
 8007b9a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007b9e:	681c      	ldr	r4, [r3, #0]
 8007ba0:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 8007ba4:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8007ba8:	f000 8160 	beq.w	8007e6c <ai_platform_network_process+0x44c>
 8007bac:	69b3      	ldr	r3, [r6, #24]
 8007bae:	2101      	movs	r1, #1
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	9302      	str	r3, [sp, #8]
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f7ff fbdf 	bl	8007378 <ai_buffer_get_size>
 8007bba:	9b02      	ldr	r3, [sp, #8]
 8007bbc:	4283      	cmp	r3, r0
 8007bbe:	f0c0 8095 	bcc.w	8007cec <ai_platform_network_process+0x2cc>
 8007bc2:	68f0      	ldr	r0, [r6, #12]
 8007bc4:	f8db 1018 	ldr.w	r1, [fp, #24]
 8007bc8:	68c2      	ldr	r2, [r0, #12]
 8007bca:	68cb      	ldr	r3, [r1, #12]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	f040 808d 	bne.w	8007cec <ai_platform_network_process+0x2cc>
 8007bd2:	6882      	ldr	r2, [r0, #8]
 8007bd4:	688b      	ldr	r3, [r1, #8]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	f040 8088 	bne.w	8007cec <ai_platform_network_process+0x2cc>
 8007bdc:	6842      	ldr	r2, [r0, #4]
 8007bde:	684b      	ldr	r3, [r1, #4]
 8007be0:	429a      	cmp	r2, r3
 8007be2:	f040 8083 	bne.w	8007cec <ai_platform_network_process+0x2cc>
 8007be6:	69b3      	ldr	r3, [r6, #24]
 8007be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007bec:	f001 f946 	bl	8008e7c <ai_array_get_data_byte_size>
 8007bf0:	9002      	str	r0, [sp, #8]
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f001 f95a 	bl	8008eac <get_tensor_byte_size>
 8007bf8:	9b02      	ldr	r3, [sp, #8]
 8007bfa:	4283      	cmp	r3, r0
 8007bfc:	d376      	bcc.n	8007cec <ai_platform_network_process+0x2cc>
 8007bfe:	69b3      	ldr	r3, [r6, #24]
 8007c00:	6818      	ldr	r0, [r3, #0]
 8007c02:	f001 f8cb 	bl	8008d9c <ai_array_to_buffer_fmt>
 8007c06:	f8db 3000 	ldr.w	r3, [fp]
 8007c0a:	4058      	eors	r0, r3
 8007c0c:	f030 407e 	bics.w	r0, r0, #4261412864	@ 0xfe000000
 8007c10:	f040 8134 	bne.w	8007e7c <ai_platform_network_process+0x45c>
 8007c14:	f8db 3004 	ldr.w	r3, [fp, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8127 	beq.w	8007e6c <ai_platform_network_process+0x44c>
 8007c1e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f000 8133 	beq.w	8007e90 <ai_platform_network_process+0x470>
 8007c2a:	9a01      	ldr	r2, [sp, #4]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	bf38      	it	cc
 8007c30:	461a      	movcc	r2, r3
 8007c32:	4630      	mov	r0, r6
 8007c34:	9201      	str	r2, [sp, #4]
 8007c36:	f001 f939 	bl	8008eac <get_tensor_byte_size>
 8007c3a:	f8c9 0008 	str.w	r0, [r9, #8]
 8007c3e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	fb00 f303 	mul.w	r3, r0, r3
 8007c48:	f8c9 300c 	str.w	r3, [r9, #12]
 8007c4c:	f8db 1004 	ldr.w	r1, [fp, #4]
 8007c50:	f8c9 1004 	str.w	r1, [r9, #4]
 8007c54:	440b      	add	r3, r1
 8007c56:	f844 300a 	str.w	r3, [r4, sl]
 8007c5a:	69b0      	ldr	r0, [r6, #24]
 8007c5c:	6803      	ldr	r3, [r0, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	f107 0701 	add.w	r7, r7, #1
 8007c64:	f10b 0b1c 	add.w	fp, fp, #28
 8007c68:	d44a      	bmi.n	8007d00 <ai_platform_network_process+0x2e0>
 8007c6a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007c6e:	1a9b      	subs	r3, r3, r2
 8007c70:	4419      	add	r1, r3
 8007c72:	6081      	str	r1, [r0, #8]
 8007c74:	69b3      	ldr	r3, [r6, #24]
 8007c76:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007c7a:	60da      	str	r2, [r3, #12]
 8007c7c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007c80:	42bb      	cmp	r3, r7
 8007c82:	d880      	bhi.n	8007b86 <ai_platform_network_process+0x166>
 8007c84:	e041      	b.n	8007d0a <ai_platform_network_process+0x2ea>
 8007c86:	692a      	ldr	r2, [r5, #16]
 8007c88:	61ab      	str	r3, [r5, #24]
 8007c8a:	f002 0203 	and.w	r2, r2, #3
 8007c8e:	2a03      	cmp	r2, #3
 8007c90:	d115      	bne.n	8007cbe <ai_platform_network_process+0x29e>
 8007c92:	2217      	movs	r2, #23
 8007c94:	2112      	movs	r1, #18
 8007c96:	f105 000c 	add.w	r0, r5, #12
 8007c9a:	f000 f909 	bl	8007eb0 <core_set_error>
 8007c9e:	2400      	movs	r4, #0
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	b005      	add	sp, #20
 8007ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca8:	f8ba 3000 	ldrh.w	r3, [sl]
 8007cac:	429f      	cmp	r7, r3
 8007cae:	f4ff aee0 	bcc.w	8007a72 <ai_platform_network_process+0x52>
 8007cb2:	e755      	b.n	8007b60 <ai_platform_network_process+0x140>
 8007cb4:	2400      	movs	r4, #0
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	b005      	add	sp, #20
 8007cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbe:	2230      	movs	r2, #48	@ 0x30
 8007cc0:	2111      	movs	r1, #17
 8007cc2:	f105 000c 	add.w	r0, r5, #12
 8007cc6:	f000 f8f3 	bl	8007eb0 <core_set_error>
 8007cca:	2400      	movs	r4, #0
 8007ccc:	4620      	mov	r0, r4
 8007cce:	b005      	add	sp, #20
 8007cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd4:	9d03      	ldr	r5, [sp, #12]
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	2112      	movs	r1, #18
 8007cda:	f105 000c 	add.w	r0, r5, #12
 8007cde:	f000 f8e7 	bl	8007eb0 <core_set_error>
 8007ce2:	2400      	movs	r4, #0
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	b005      	add	sp, #20
 8007ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cec:	2218      	movs	r2, #24
 8007cee:	2113      	movs	r1, #19
 8007cf0:	f105 000c 	add.w	r0, r5, #12
 8007cf4:	f000 f8dc 	bl	8007eb0 <core_set_error>
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	e7d1      	b.n	8007ca0 <ai_platform_network_process+0x280>
 8007cfc:	a1c00100 	.word	0xa1c00100
 8007d00:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8007d04:	429f      	cmp	r7, r3
 8007d06:	f4ff af3e 	bcc.w	8007b86 <ai_platform_network_process+0x166>
 8007d0a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007d0e:	8e2a      	ldrh	r2, [r5, #48]	@ 0x30
 8007d10:	832b      	strh	r3, [r5, #24]
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	f040 808c 	bne.w	8007e30 <ai_platform_network_process+0x410>
 8007d18:	4616      	mov	r6, r2
 8007d1a:	4617      	mov	r7, r2
 8007d1c:	8b6c      	ldrh	r4, [r5, #26]
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	bf38      	it	cc
 8007d22:	46ab      	movcc	fp, r5
 8007d24:	d2bc      	bcs.n	8007ca0 <ai_platform_network_process+0x280>
 8007d26:	2e00      	cmp	r6, #0
 8007d28:	d030      	beq.n	8007d8c <ai_platform_network_process+0x36c>
 8007d2a:	f04f 0800 	mov.w	r8, #0
 8007d2e:	e014      	b.n	8007d5a <ai_platform_network_process+0x33a>
 8007d30:	6882      	ldr	r2, [r0, #8]
 8007d32:	68c5      	ldr	r5, [r0, #12]
 8007d34:	6863      	ldr	r3, [r4, #4]
 8007d36:	1b52      	subs	r2, r2, r5
 8007d38:	4413      	add	r3, r2
 8007d3a:	6083      	str	r3, [r0, #8]
 8007d3c:	698b      	ldr	r3, [r1, #24]
 8007d3e:	6862      	ldr	r2, [r4, #4]
 8007d40:	60da      	str	r2, [r3, #12]
 8007d42:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007d46:	f859 200a 	ldr.w	r2, [r9, sl]
 8007d4a:	440b      	add	r3, r1
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	bf24      	itt	cs
 8007d50:	68e3      	ldrcs	r3, [r4, #12]
 8007d52:	1ad3      	subcs	r3, r2, r3
 8007d54:	6063      	str	r3, [r4, #4]
 8007d56:	f108 0801 	add.w	r8, r8, #1
 8007d5a:	8833      	ldrh	r3, [r6, #0]
 8007d5c:	4543      	cmp	r3, r8
 8007d5e:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007d62:	d913      	bls.n	8007d8c <ai_platform_network_process+0x36c>
 8007d64:	6873      	ldr	r3, [r6, #4]
 8007d66:	b18b      	cbz	r3, 8007d8c <ai_platform_network_process+0x36c>
 8007d68:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007d6c:	b171      	cbz	r1, 8007d8c <ai_platform_network_process+0x36c>
 8007d6e:	6988      	ldr	r0, [r1, #24]
 8007d70:	68b2      	ldr	r2, [r6, #8]
 8007d72:	6803      	ldr	r3, [r0, #0]
 8007d74:	f8d2 9000 	ldr.w	r9, [r2]
 8007d78:	009d      	lsls	r5, r3, #2
 8007d7a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007d7e:	d5d7      	bpl.n	8007d30 <ai_platform_network_process+0x310>
 8007d80:	6881      	ldr	r1, [r0, #8]
 8007d82:	68a2      	ldr	r2, [r4, #8]
 8007d84:	6860      	ldr	r0, [r4, #4]
 8007d86:	f000 ff67 	bl	8008c58 <st_int8_copy>
 8007d8a:	e7da      	b.n	8007d42 <ai_platform_network_process+0x322>
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f000 f8e7 	bl	8007f60 <ai_layers_forward_all>
 8007d92:	2f00      	cmp	r7, #0
 8007d94:	d03d      	beq.n	8007e12 <ai_platform_network_process+0x3f2>
 8007d96:	2400      	movs	r4, #0
 8007d98:	e016      	b.n	8007dc8 <ai_platform_network_process+0x3a8>
 8007d9a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007d9e:	f859 100a 	ldr.w	r1, [r9, sl]
 8007da2:	4413      	add	r3, r2
 8007da4:	428b      	cmp	r3, r1
 8007da6:	bf24      	itt	cs
 8007da8:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007dac:	1acb      	subcs	r3, r1, r3
 8007dae:	f8c8 3004 	str.w	r3, [r8, #4]
 8007db2:	6981      	ldr	r1, [r0, #24]
 8007db4:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007db8:	1b52      	subs	r2, r2, r5
 8007dba:	4413      	add	r3, r2
 8007dbc:	608b      	str	r3, [r1, #8]
 8007dbe:	6983      	ldr	r3, [r0, #24]
 8007dc0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007dc4:	60da      	str	r2, [r3, #12]
 8007dc6:	3401      	adds	r4, #1
 8007dc8:	883b      	ldrh	r3, [r7, #0]
 8007dca:	42a3      	cmp	r3, r4
 8007dcc:	d921      	bls.n	8007e12 <ai_platform_network_process+0x3f2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	b1fb      	cbz	r3, 8007e12 <ai_platform_network_process+0x3f2>
 8007dd2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007dd6:	b1e0      	cbz	r0, 8007e12 <ai_platform_network_process+0x3f2>
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	6983      	ldr	r3, [r0, #24]
 8007ddc:	f8d2 9000 	ldr.w	r9, [r2]
 8007de0:	681a      	ldr	r2, [r3, #0]
 8007de2:	0092      	lsls	r2, r2, #2
 8007de4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007de8:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007dec:	d5d5      	bpl.n	8007d9a <ai_platform_network_process+0x37a>
 8007dee:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007df2:	6898      	ldr	r0, [r3, #8]
 8007df4:	f000 ff30 	bl	8008c58 <st_int8_copy>
 8007df8:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007dfc:	f859 200a 	ldr.w	r2, [r9, sl]
 8007e00:	440b      	add	r3, r1
 8007e02:	4293      	cmp	r3, r2
 8007e04:	bf24      	itt	cs
 8007e06:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8007e0a:	1ad3      	subcs	r3, r2, r3
 8007e0c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e10:	e7d9      	b.n	8007dc6 <ai_platform_network_process+0x3a6>
 8007e12:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 8007e16:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8007e1a:	3401      	adds	r4, #1
 8007e1c:	b2a4      	uxth	r4, r4
 8007e1e:	42a3      	cmp	r3, r4
 8007e20:	f8ab 401a 	strh.w	r4, [fp, #26]
 8007e24:	f63f af7f 	bhi.w	8007d26 <ai_platform_network_process+0x306>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	b005      	add	sp, #20
 8007e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e30:	2a01      	cmp	r2, #1
 8007e32:	6b6e      	ldr	r6, [r5, #52]	@ 0x34
 8007e34:	d02a      	beq.n	8007e8c <ai_platform_network_process+0x46c>
 8007e36:	f106 070c 	add.w	r7, r6, #12
 8007e3a:	e76f      	b.n	8007d1c <ai_platform_network_process+0x2fc>
 8007e3c:	9d03      	ldr	r5, [sp, #12]
 8007e3e:	e728      	b.n	8007c92 <ai_platform_network_process+0x272>
 8007e40:	9d03      	ldr	r5, [sp, #12]
 8007e42:	2219      	movs	r2, #25
 8007e44:	2112      	movs	r1, #18
 8007e46:	f105 000c 	add.w	r0, r5, #12
 8007e4a:	f000 f831 	bl	8007eb0 <core_set_error>
 8007e4e:	2400      	movs	r4, #0
 8007e50:	e726      	b.n	8007ca0 <ai_platform_network_process+0x280>
 8007e52:	9d03      	ldr	r5, [sp, #12]
 8007e54:	4604      	mov	r4, r0
 8007e56:	2221      	movs	r2, #33	@ 0x21
 8007e58:	2112      	movs	r1, #18
 8007e5a:	f105 000c 	add.w	r0, r5, #12
 8007e5e:	f000 f827 	bl	8007eb0 <core_set_error>
 8007e62:	e71d      	b.n	8007ca0 <ai_platform_network_process+0x280>
 8007e64:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8007e68:	832b      	strh	r3, [r5, #24]
 8007e6a:	e752      	b.n	8007d12 <ai_platform_network_process+0x2f2>
 8007e6c:	2217      	movs	r2, #23
 8007e6e:	2113      	movs	r1, #19
 8007e70:	f105 000c 	add.w	r0, r5, #12
 8007e74:	f000 f81c 	bl	8007eb0 <core_set_error>
 8007e78:	2400      	movs	r4, #0
 8007e7a:	e711      	b.n	8007ca0 <ai_platform_network_process+0x280>
 8007e7c:	2219      	movs	r2, #25
 8007e7e:	2113      	movs	r1, #19
 8007e80:	f105 000c 	add.w	r0, r5, #12
 8007e84:	f000 f814 	bl	8007eb0 <core_set_error>
 8007e88:	2400      	movs	r4, #0
 8007e8a:	e709      	b.n	8007ca0 <ai_platform_network_process+0x280>
 8007e8c:	2700      	movs	r7, #0
 8007e8e:	e745      	b.n	8007d1c <ai_platform_network_process+0x2fc>
 8007e90:	4604      	mov	r4, r0
 8007e92:	2221      	movs	r2, #33	@ 0x21
 8007e94:	2113      	movs	r1, #19
 8007e96:	f105 000c 	add.w	r0, r5, #12
 8007e9a:	f000 f809 	bl	8007eb0 <core_set_error>
 8007e9e:	e6ff      	b.n	8007ca0 <ai_platform_network_process+0x280>

08007ea0 <core_init>:
 8007ea0:	2001      	movs	r0, #1
 8007ea2:	4770      	bx	lr

08007ea4 <core_get_error>:
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6800      	ldr	r0, [r0, #0]
 8007eaa:	601a      	str	r2, [r3, #0]
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop

08007eb0 <core_set_error>:
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	7800      	ldrb	r0, [r0, #0]
 8007eb4:	b108      	cbz	r0, 8007eba <core_set_error+0xa>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4770      	bx	lr
 8007eba:	7019      	strb	r1, [r3, #0]
 8007ebc:	6819      	ldr	r1, [r3, #0]
 8007ebe:	f362 211f 	bfi	r1, r2, #8, #24
 8007ec2:	2001      	movs	r0, #1
 8007ec4:	6019      	str	r1, [r3, #0]
 8007ec6:	4770      	bx	lr

08007ec8 <ai_check_custom_types>:
 8007ec8:	b082      	sub	sp, #8
 8007eca:	4b13      	ldr	r3, [pc, #76]	@ (8007f18 <ai_check_custom_types+0x50>)
 8007ecc:	9301      	str	r3, [sp, #4]
 8007ece:	b118      	cbz	r0, 8007ed8 <ai_check_custom_types+0x10>
 8007ed0:	7803      	ldrb	r3, [r0, #0]
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d002      	beq.n	8007edc <ai_check_custom_types+0x14>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	b002      	add	sp, #8
 8007eda:	4770      	bx	lr
 8007edc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <ai_check_custom_types+0x26>
 8007ee4:	2001      	movs	r0, #1
 8007ee6:	f080 0001 	eor.w	r0, r0, #1
 8007eea:	b002      	add	sp, #8
 8007eec:	4770      	bx	lr
 8007eee:	7842      	ldrb	r2, [r0, #1]
 8007ef0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	f100 0001 	add.w	r0, r0, #1
 8007efa:	d1f3      	bne.n	8007ee4 <ai_check_custom_types+0x1c>
 8007efc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007f00:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d1ed      	bne.n	8007ee4 <ai_check_custom_types+0x1c>
 8007f08:	7842      	ldrb	r2, [r0, #1]
 8007f0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d1e8      	bne.n	8007ee4 <ai_check_custom_types+0x1c>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e7e7      	b.n	8007ee6 <ai_check_custom_types+0x1e>
 8007f16:	bf00      	nop
 8007f18:	84048403 	.word	0x84048403

08007f1c <ai_layers_init_all>:
 8007f1c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8007f1e:	2100      	movs	r1, #0
 8007f20:	b143      	cbz	r3, 8007f34 <ai_layers_init_all+0x18>
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	60d8      	str	r0, [r3, #12]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	f101 0101 	add.w	r1, r1, #1
 8007f2c:	d002      	beq.n	8007f34 <ai_layers_init_all+0x18>
 8007f2e:	b10a      	cbz	r2, 8007f34 <ai_layers_init_all+0x18>
 8007f30:	4613      	mov	r3, r2
 8007f32:	e7f5      	b.n	8007f20 <ai_layers_init_all+0x4>
 8007f34:	4608      	mov	r0, r1
 8007f36:	4770      	bx	lr

08007f38 <ai_layers_post_init_all>:
 8007f38:	b538      	push	{r3, r4, r5, lr}
 8007f3a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007f3c:	2500      	movs	r5, #0
 8007f3e:	b16c      	cbz	r4, 8007f5c <ai_layers_post_init_all+0x24>
 8007f40:	6863      	ldr	r3, [r4, #4]
 8007f42:	07db      	lsls	r3, r3, #31
 8007f44:	d504      	bpl.n	8007f50 <ai_layers_post_init_all+0x18>
 8007f46:	6a23      	ldr	r3, [r4, #32]
 8007f48:	4620      	mov	r0, r4
 8007f4a:	b10b      	cbz	r3, 8007f50 <ai_layers_post_init_all+0x18>
 8007f4c:	4798      	blx	r3
 8007f4e:	3501      	adds	r5, #1
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	d002      	beq.n	8007f5c <ai_layers_post_init_all+0x24>
 8007f56:	b10b      	cbz	r3, 8007f5c <ai_layers_post_init_all+0x24>
 8007f58:	461c      	mov	r4, r3
 8007f5a:	e7f0      	b.n	8007f3e <ai_layers_post_init_all+0x6>
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}

08007f60 <ai_layers_forward_all>:
 8007f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f64:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8007f68:	4604      	mov	r4, r0
 8007f6a:	f1b8 0f00 	cmp.w	r8, #0
 8007f6e:	d02b      	beq.n	8007fc8 <ai_layers_forward_all+0x68>
 8007f70:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8007f72:	63c1      	str	r1, [r0, #60]	@ 0x3c
 8007f74:	b321      	cbz	r1, 8007fc0 <ai_layers_forward_all+0x60>
 8007f76:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8007f78:	2001      	movs	r0, #1
 8007f7a:	47c0      	blx	r8
 8007f7c:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8007f7e:	b1fe      	cbz	r6, 8007fc0 <ai_layers_forward_all+0x60>
 8007f80:	2700      	movs	r7, #0
 8007f82:	4631      	mov	r1, r6
 8007f84:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007f86:	2002      	movs	r0, #2
 8007f88:	47c0      	blx	r8
 8007f8a:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	696b      	ldr	r3, [r5, #20]
 8007f90:	4798      	blx	r3
 8007f92:	692e      	ldr	r6, [r5, #16]
 8007f94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8007f96:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007f98:	42b5      	cmp	r5, r6
 8007f9a:	f04f 0003 	mov.w	r0, #3
 8007f9e:	d007      	beq.n	8007fb0 <ai_layers_forward_all+0x50>
 8007fa0:	47c0      	blx	r8
 8007fa2:	3701      	adds	r7, #1
 8007fa4:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8007fa6:	2e00      	cmp	r6, #0
 8007fa8:	d1eb      	bne.n	8007f82 <ai_layers_forward_all+0x22>
 8007faa:	4638      	mov	r0, r7
 8007fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fb0:	2003      	movs	r0, #3
 8007fb2:	47c0      	blx	r8
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	3701      	adds	r7, #1
 8007fb8:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007fba:	4638      	mov	r0, r7
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	2700      	movs	r7, #0
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 8007fca:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	d0f7      	beq.n	8007fc0 <ai_layers_forward_all+0x60>
 8007fd0:	4647      	mov	r7, r8
 8007fd2:	696b      	ldr	r3, [r5, #20]
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	4798      	blx	r3
 8007fd8:	462b      	mov	r3, r5
 8007fda:	692d      	ldr	r5, [r5, #16]
 8007fdc:	429d      	cmp	r5, r3
 8007fde:	d004      	beq.n	8007fea <ai_layers_forward_all+0x8a>
 8007fe0:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8007fe2:	3701      	adds	r7, #1
 8007fe4:	2d00      	cmp	r5, #0
 8007fe6:	d1f4      	bne.n	8007fd2 <ai_layers_forward_all+0x72>
 8007fe8:	e7df      	b.n	8007faa <ai_layers_forward_all+0x4a>
 8007fea:	2300      	movs	r3, #0
 8007fec:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8007fee:	3701      	adds	r7, #1
 8007ff0:	e7db      	b.n	8007faa <ai_layers_forward_all+0x4a>
 8007ff2:	bf00      	nop

08007ff4 <forward_dense>:
 8007ff4:	6982      	ldr	r2, [r0, #24]
 8007ff6:	8813      	ldrh	r3, [r2, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d043      	beq.n	8008084 <forward_dense+0x90>
 8007ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008000:	6855      	ldr	r5, [r2, #4]
 8008002:	6869      	ldr	r1, [r5, #4]
 8008004:	b08e      	sub	sp, #56	@ 0x38
 8008006:	b101      	cbz	r1, 800800a <forward_dense+0x16>
 8008008:	6809      	ldr	r1, [r1, #0]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d069      	beq.n	80080e2 <forward_dense+0xee>
 800800e:	692a      	ldr	r2, [r5, #16]
 8008010:	b102      	cbz	r2, 8008014 <forward_dense+0x20>
 8008012:	6812      	ldr	r2, [r2, #0]
 8008014:	2b02      	cmp	r3, #2
 8008016:	d061      	beq.n	80080dc <forward_dense+0xe8>
 8008018:	69ec      	ldr	r4, [r5, #28]
 800801a:	2c00      	cmp	r4, #0
 800801c:	d057      	beq.n	80080ce <forward_dense+0xda>
 800801e:	8b2e      	ldrh	r6, [r5, #24]
 8008020:	6820      	ldr	r0, [r4, #0]
 8008022:	2e01      	cmp	r6, #1
 8008024:	d955      	bls.n	80080d2 <forward_dense+0xde>
 8008026:	6864      	ldr	r4, [r4, #4]
 8008028:	f8d0 9018 	ldr.w	r9, [r0, #24]
 800802c:	68cf      	ldr	r7, [r1, #12]
 800802e:	68d0      	ldr	r0, [r2, #12]
 8008030:	f8d7 a004 	ldr.w	sl, [r7, #4]
 8008034:	f8d0 e004 	ldr.w	lr, [r0, #4]
 8008038:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 800803c:	f8d9 0000 	ldr.w	r0, [r9]
 8008040:	2b03      	cmp	r3, #3
 8008042:	fb06 f807 	mul.w	r8, r6, r7
 8008046:	f020 4c7e 	bic.w	ip, r0, #4261412864	@ 0xfe000000
 800804a:	d044      	beq.n	80080d6 <forward_dense+0xe2>
 800804c:	6aad      	ldr	r5, [r5, #40]	@ 0x28
 800804e:	b11d      	cbz	r5, 8008058 <forward_dense+0x64>
 8008050:	682d      	ldr	r5, [r5, #0]
 8008052:	b10d      	cbz	r5, 8008058 <forward_dense+0x64>
 8008054:	69ab      	ldr	r3, [r5, #24]
 8008056:	689d      	ldr	r5, [r3, #8]
 8008058:	6992      	ldr	r2, [r2, #24]
 800805a:	698b      	ldr	r3, [r1, #24]
 800805c:	6890      	ldr	r0, [r2, #8]
 800805e:	6899      	ldr	r1, [r3, #8]
 8008060:	b10c      	cbz	r4, 8008066 <forward_dense+0x72>
 8008062:	69a3      	ldr	r3, [r4, #24]
 8008064:	689c      	ldr	r4, [r3, #8]
 8008066:	4b20      	ldr	r3, [pc, #128]	@ (80080e8 <forward_dense+0xf4>)
 8008068:	459c      	cmp	ip, r3
 800806a:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800806e:	d023      	beq.n	80080b8 <forward_dense+0xc4>
 8008070:	4e1e      	ldr	r6, [pc, #120]	@ (80080ec <forward_dense+0xf8>)
 8008072:	45b4      	cmp	ip, r6
 8008074:	d015      	beq.n	80080a2 <forward_dense+0xae>
 8008076:	f5a3 039c 	sub.w	r3, r3, #5111808	@ 0x4e0000
 800807a:	459c      	cmp	ip, r3
 800807c:	d004      	beq.n	8008088 <forward_dense+0x94>
 800807e:	b00e      	add	sp, #56	@ 0x38
 8008080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	deff      	udf	#255	@ 0xff
 8008088:	e9cd 0107 	strd	r0, r1, [sp, #28]
 800808c:	a807      	add	r0, sp, #28
 800808e:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	@ 0x28
 8008092:	e9cd e80c 	strd	lr, r8, [sp, #48]	@ 0x30
 8008096:	9209      	str	r2, [sp, #36]	@ 0x24
 8008098:	f000 f9f8 	bl	800848c <forward_lite_dense_if32of32wf32>
 800809c:	b00e      	add	sp, #56	@ 0x38
 800809e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a2:	e9cd e803 	strd	lr, r8, [sp, #12]
 80080a6:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80080aa:	9500      	str	r5, [sp, #0]
 80080ac:	464b      	mov	r3, r9
 80080ae:	f000 fb47 	bl	8008740 <forward_lite_dense_if32of32wf32_lut4>
 80080b2:	b00e      	add	sp, #56	@ 0x38
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b8:	e9cd e803 	strd	lr, r8, [sp, #12]
 80080bc:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 80080c0:	9500      	str	r5, [sp, #0]
 80080c2:	464b      	mov	r3, r9
 80080c4:	f000 fc64 	bl	8008990 <forward_lite_dense_if32of32wf32_lut8>
 80080c8:	b00e      	add	sp, #56	@ 0x38
 80080ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ce:	4620      	mov	r0, r4
 80080d0:	e7aa      	b.n	8008028 <forward_dense+0x34>
 80080d2:	2400      	movs	r4, #0
 80080d4:	e7a8      	b.n	8008028 <forward_dense+0x34>
 80080d6:	2300      	movs	r3, #0
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	deff      	udf	#255	@ 0xff
 80080dc:	2300      	movs	r3, #0
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	deff      	udf	#255	@ 0xff
 80080e2:	2300      	movs	r3, #0
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	deff      	udf	#255	@ 0xff
 80080e8:	00d01040 	.word	0x00d01040
 80080ec:	00f01040 	.word	0x00f01040

080080f0 <forward_relu>:
 80080f0:	6982      	ldr	r2, [r0, #24]
 80080f2:	8813      	ldrh	r3, [r2, #0]
 80080f4:	b323      	cbz	r3, 8008140 <forward_relu+0x50>
 80080f6:	6851      	ldr	r1, [r2, #4]
 80080f8:	684a      	ldr	r2, [r1, #4]
 80080fa:	b102      	cbz	r2, 80080fe <forward_relu+0xe>
 80080fc:	6812      	ldr	r2, [r2, #0]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	f000 808d 	beq.w	800821e <forward_relu+0x12e>
 8008104:	b470      	push	{r4, r5, r6}
 8008106:	6909      	ldr	r1, [r1, #16]
 8008108:	b101      	cbz	r1, 800810c <forward_relu+0x1c>
 800810a:	6809      	ldr	r1, [r1, #0]
 800810c:	69c6      	ldr	r6, [r0, #28]
 800810e:	b1ce      	cbz	r6, 8008144 <forward_relu+0x54>
 8008110:	6873      	ldr	r3, [r6, #4]
 8008112:	6988      	ldr	r0, [r1, #24]
 8008114:	6991      	ldr	r1, [r2, #24]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d044      	beq.n	80081a4 <forward_relu+0xb4>
 800811a:	6893      	ldr	r3, [r2, #8]
 800811c:	6880      	ldr	r0, [r0, #8]
 800811e:	6889      	ldr	r1, [r1, #8]
 8008120:	0a1b      	lsrs	r3, r3, #8
 8008122:	d073      	beq.n	800820c <forward_relu+0x11c>
 8008124:	68d5      	ldr	r5, [r2, #12]
 8008126:	2201      	movs	r2, #1
 8008128:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800812c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8008130:	429d      	cmp	r5, r3
 8008132:	fb04 f202 	mul.w	r2, r4, r2
 8008136:	d1f9      	bne.n	800812c <forward_relu+0x3c>
 8008138:	68b3      	ldr	r3, [r6, #8]
 800813a:	bc70      	pop	{r4, r5, r6}
 800813c:	f000 b928 	b.w	8008390 <forward_lite_nl_relu_generic_if32of32_kernel>
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	deff      	udf	#255	@ 0xff
 8008144:	6893      	ldr	r3, [r2, #8]
 8008146:	6989      	ldr	r1, [r1, #24]
 8008148:	6990      	ldr	r0, [r2, #24]
 800814a:	6889      	ldr	r1, [r1, #8]
 800814c:	6884      	ldr	r4, [r0, #8]
 800814e:	0a1b      	lsrs	r3, r3, #8
 8008150:	d05e      	beq.n	8008210 <forward_relu+0x120>
 8008152:	68d5      	ldr	r5, [r2, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800815a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 800815e:	429d      	cmp	r5, r3
 8008160:	fb00 f202 	mul.w	r2, r0, r2
 8008164:	d1f9      	bne.n	800815a <forward_relu+0x6a>
 8008166:	f102 4380 	add.w	r3, r2, #1073741824	@ 0x40000000
 800816a:	3b01      	subs	r3, #1
 800816c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008170:	4294      	cmp	r4, r2
 8008172:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008176:	d813      	bhi.n	80081a0 <forward_relu+0xb0>
 8008178:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8008224 <forward_relu+0x134>
 800817c:	3204      	adds	r2, #4
 800817e:	3104      	adds	r1, #4
 8008180:	4613      	mov	r3, r2
 8008182:	ed72 7a01 	vldmdb	r2!, {s15}
 8008186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800818a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800818e:	f1a3 0308 	sub.w	r3, r3, #8
 8008192:	bfb8      	it	lt
 8008194:	eef0 7a47 	vmovlt.f32	s15, s14
 8008198:	429c      	cmp	r4, r3
 800819a:	ed61 7a01 	vstmdb	r1!, {s15}
 800819e:	d9ef      	bls.n	8008180 <forward_relu+0x90>
 80081a0:	bc70      	pop	{r4, r5, r6}
 80081a2:	4770      	bx	lr
 80081a4:	688c      	ldr	r4, [r1, #8]
 80081a6:	6891      	ldr	r1, [r2, #8]
 80081a8:	6880      	ldr	r0, [r0, #8]
 80081aa:	0a09      	lsrs	r1, r1, #8
 80081ac:	d032      	beq.n	8008214 <forward_relu+0x124>
 80081ae:	68d5      	ldr	r5, [r2, #12]
 80081b0:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80081b4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80081b8:	4295      	cmp	r5, r2
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	d1f9      	bne.n	80081b4 <forward_relu+0xc4>
 80081c0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80081c4:	3a01      	subs	r2, #1
 80081c6:	68b1      	ldr	r1, [r6, #8]
 80081c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081cc:	429c      	cmp	r4, r3
 80081ce:	ed91 7a00 	vldr	s14, [r1]
 80081d2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80081d6:	d8e3      	bhi.n	80081a0 <forward_relu+0xb0>
 80081d8:	2500      	movs	r5, #0
 80081da:	3304      	adds	r3, #4
 80081dc:	1d02      	adds	r2, r0, #4
 80081de:	ed53 7a01 	vldr	s15, [r3, #-4]
 80081e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80081e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ea:	f1a3 0104 	sub.w	r1, r3, #4
 80081ee:	f1a3 0308 	sub.w	r3, r3, #8
 80081f2:	d405      	bmi.n	8008200 <forward_relu+0x110>
 80081f4:	429c      	cmp	r4, r3
 80081f6:	f842 5d04 	str.w	r5, [r2, #-4]!
 80081fa:	d8d1      	bhi.n	80081a0 <forward_relu+0xb0>
 80081fc:	460b      	mov	r3, r1
 80081fe:	e7ee      	b.n	80081de <forward_relu+0xee>
 8008200:	429c      	cmp	r4, r3
 8008202:	ed62 7a01 	vstmdb	r2!, {s15}
 8008206:	d8cb      	bhi.n	80081a0 <forward_relu+0xb0>
 8008208:	460b      	mov	r3, r1
 800820a:	e7e8      	b.n	80081de <forward_relu+0xee>
 800820c:	2201      	movs	r2, #1
 800820e:	e793      	b.n	8008138 <forward_relu+0x48>
 8008210:	4622      	mov	r2, r4
 8008212:	e7b1      	b.n	8008178 <forward_relu+0x88>
 8008214:	68b2      	ldr	r2, [r6, #8]
 8008216:	4623      	mov	r3, r4
 8008218:	ed92 7a00 	vldr	s14, [r2]
 800821c:	e7dc      	b.n	80081d8 <forward_relu+0xe8>
 800821e:	2300      	movs	r3, #0
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	deff      	udf	#255	@ 0xff
 8008224:	00000000 	.word	0x00000000

08008228 <forward_sm>:
 8008228:	6982      	ldr	r2, [r0, #24]
 800822a:	8813      	ldrh	r3, [r2, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d036      	beq.n	800829e <forward_sm+0x76>
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	6852      	ldr	r2, [r2, #4]
 8008234:	6855      	ldr	r5, [r2, #4]
 8008236:	b082      	sub	sp, #8
 8008238:	b105      	cbz	r5, 800823c <forward_sm+0x14>
 800823a:	682d      	ldr	r5, [r5, #0]
 800823c:	2b01      	cmp	r3, #1
 800823e:	d032      	beq.n	80082a6 <forward_sm+0x7e>
 8008240:	6916      	ldr	r6, [r2, #16]
 8008242:	b106      	cbz	r6, 8008246 <forward_sm+0x1e>
 8008244:	6836      	ldr	r6, [r6, #0]
 8008246:	68ab      	ldr	r3, [r5, #8]
 8008248:	ea5f 2c13 	movs.w	ip, r3, lsr #8
 800824c:	d029      	beq.n	80082a2 <forward_sm+0x7a>
 800824e:	68ec      	ldr	r4, [r5, #12]
 8008250:	2201      	movs	r2, #1
 8008252:	eb04 038c 	add.w	r3, r4, ip, lsl #2
 8008256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800825a:	429c      	cmp	r4, r3
 800825c:	fb01 f202 	mul.w	r2, r1, r2
 8008260:	d1f9      	bne.n	8008256 <forward_sm+0x2e>
 8008262:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8008266:	69b0      	ldr	r0, [r6, #24]
 8008268:	4563      	cmp	r3, ip
 800826a:	bfb8      	it	lt
 800826c:	68e9      	ldrlt	r1, [r5, #12]
 800826e:	6880      	ldr	r0, [r0, #8]
 8008270:	bfb8      	it	lt
 8008272:	f851 4023 	ldrlt.w	r4, [r1, r3, lsl #2]
 8008276:	6929      	ldr	r1, [r5, #16]
 8008278:	bfa8      	it	ge
 800827a:	2401      	movge	r4, #1
 800827c:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8008280:	bfbc      	itt	lt
 8008282:	6969      	ldrlt	r1, [r5, #20]
 8008284:	f851 3023 	ldrlt.w	r3, [r1, r3, lsl #2]
 8008288:	69a9      	ldr	r1, [r5, #24]
 800828a:	bfb8      	it	lt
 800828c:	089b      	lsrlt	r3, r3, #2
 800828e:	6889      	ldr	r1, [r1, #8]
 8008290:	9400      	str	r4, [sp, #0]
 8008292:	bfa8      	it	ge
 8008294:	2300      	movge	r3, #0
 8008296:	f000 fca9 	bl	8008bec <forward_lite_nl_softmax_if32of32>
 800829a:	b002      	add	sp, #8
 800829c:	bd70      	pop	{r4, r5, r6, pc}
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	deff      	udf	#255	@ 0xff
 80082a2:	2201      	movs	r2, #1
 80082a4:	e7dd      	b.n	8008262 <forward_sm+0x3a>
 80082a6:	2300      	movs	r3, #0
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	deff      	udf	#255	@ 0xff

080082ac <forward_lite_nl_softmax_if32of32_kernel>:
 80082ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082b0:	2a01      	cmp	r2, #1
 80082b2:	ed2d 8b02 	vpush	{d8}
 80082b6:	4691      	mov	r9, r2
 80082b8:	ed91 8a00 	vldr	s16, [r1]
 80082bc:	4698      	mov	r8, r3
 80082be:	d960      	bls.n	8008382 <forward_lite_nl_softmax_if32of32_kernel+0xd6>
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d14a      	bne.n	800835a <forward_lite_nl_softmax_if32of32_kernel+0xae>
 80082c4:	1d0c      	adds	r4, r1, #4
 80082c6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80082ca:	ecf4 7a01 	vldmia	r4!, {s15}
 80082ce:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80082d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d6:	bfb8      	it	lt
 80082d8:	eeb0 8a67 	vmovlt.f32	s16, s15
 80082dc:	429c      	cmp	r4, r3
 80082de:	d1f4      	bne.n	80082ca <forward_lite_nl_softmax_if32of32_kernel+0x1e>
 80082e0:	f04f 0a04 	mov.w	sl, #4
 80082e4:	eddf 8a29 	vldr	s17, [pc, #164]	@ 800838c <forward_lite_nl_softmax_if32of32_kernel+0xe0>
 80082e8:	4607      	mov	r7, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	4606      	mov	r6, r0
 80082ee:	2500      	movs	r5, #0
 80082f0:	ed94 0a00 	vldr	s0, [r4]
 80082f4:	ee30 0a48 	vsub.f32	s0, s0, s16
 80082f8:	f001 fd7e 	bl	8009df8 <expf>
 80082fc:	3501      	adds	r5, #1
 80082fe:	45a9      	cmp	r9, r5
 8008300:	ed86 0a00 	vstr	s0, [r6]
 8008304:	ee78 8a80 	vadd.f32	s17, s17, s0
 8008308:	4454      	add	r4, sl
 800830a:	4456      	add	r6, sl
 800830c:	d8f0      	bhi.n	80082f0 <forward_lite_nl_softmax_if32of32_kernel+0x44>
 800830e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8008312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008316:	d011      	beq.n	800833c <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8008318:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800831c:	f1b8 0f01 	cmp.w	r8, #1
 8008320:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8008324:	f04f 0300 	mov.w	r3, #0
 8008328:	d10c      	bne.n	8008344 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 800832a:	3301      	adds	r3, #1
 800832c:	4599      	cmp	r9, r3
 800832e:	edd7 7a00 	vldr	s15, [r7]
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	ece7 7a01 	vstmia	r7!, {s15}
 800833a:	d8f6      	bhi.n	800832a <forward_lite_nl_softmax_if32of32_kernel+0x7e>
 800833c:	ecbd 8b02 	vpop	{d8}
 8008340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008344:	edd7 7a00 	vldr	s15, [r7]
 8008348:	3301      	adds	r3, #1
 800834a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800834e:	4599      	cmp	r9, r3
 8008350:	edc7 7a00 	vstr	s15, [r7]
 8008354:	4457      	add	r7, sl
 8008356:	d8f5      	bhi.n	8008344 <forward_lite_nl_softmax_if32of32_kernel+0x98>
 8008358:	e7f0      	b.n	800833c <forward_lite_nl_softmax_if32of32_kernel+0x90>
 800835a:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800835e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8008362:	2301      	movs	r3, #1
 8008364:	edd2 7a00 	vldr	s15, [r2]
 8008368:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800836c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008370:	f103 0301 	add.w	r3, r3, #1
 8008374:	bfb8      	it	lt
 8008376:	eeb0 8a67 	vmovlt.f32	s16, s15
 800837a:	4599      	cmp	r9, r3
 800837c:	4452      	add	r2, sl
 800837e:	d1f1      	bne.n	8008364 <forward_lite_nl_softmax_if32of32_kernel+0xb8>
 8008380:	e7b0      	b.n	80082e4 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 8008382:	2a00      	cmp	r2, #0
 8008384:	d0da      	beq.n	800833c <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8008386:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800838a:	e7ab      	b.n	80082e4 <forward_lite_nl_softmax_if32of32_kernel+0x38>
 800838c:	00000000 	.word	0x00000000

08008390 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8008390:	edd3 6a02 	vldr	s13, [r3, #8]
 8008394:	ed93 7a00 	vldr	s14, [r3]
 8008398:	ed93 6a01 	vldr	s12, [r3, #4]
 800839c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80083a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a4:	d42a      	bmi.n	80083fc <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80083a6:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80083aa:	3a01      	subs	r2, #1
 80083ac:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 80083b0:	4561      	cmp	r1, ip
 80083b2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80083b6:	d85d      	bhi.n	8008474 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 80083b8:	1d11      	adds	r1, r2, #4
 80083ba:	f10c 0304 	add.w	r3, ip, #4
 80083be:	4408      	add	r0, r1
 80083c0:	ebac 0202 	sub.w	r2, ip, r2
 80083c4:	e00c      	b.n	80083e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80083c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ce:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80083d2:	db01      	blt.n	80083d8 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 80083d4:	ee65 7a86 	vmul.f32	s15, s11, s12
 80083d8:	4293      	cmp	r3, r2
 80083da:	ed60 7a01 	vstmdb	r0!, {s15}
 80083de:	d00c      	beq.n	80083fa <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 80083e0:	ed73 7a01 	vldmdb	r3!, {s15}
 80083e4:	eef4 6ae7 	vcmpe.f32	s13, s15
 80083e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ec:	daeb      	bge.n	80083c6 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 80083ee:	eef0 7a66 	vmov.f32	s15, s13
 80083f2:	4293      	cmp	r3, r2
 80083f4:	ed60 7a01 	vstmdb	r0!, {s15}
 80083f8:	d1f2      	bne.n	80083e0 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 80083fa:	4770      	bx	lr
 80083fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008400:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8008404:	3a01      	subs	r2, #1
 8008406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 800840e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8008412:	d017      	beq.n	8008444 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8008414:	4561      	cmp	r1, ip
 8008416:	d82d      	bhi.n	8008474 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008418:	1d11      	adds	r1, r2, #4
 800841a:	f10c 0304 	add.w	r3, ip, #4
 800841e:	4401      	add	r1, r0
 8008420:	ebac 0202 	sub.w	r2, ip, r2
 8008424:	ed73 7a01 	vldmdb	r3!, {s15}
 8008428:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800842c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008434:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008438:	d81d      	bhi.n	8008476 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 800843a:	4293      	cmp	r3, r2
 800843c:	ed61 6a01 	vstmdb	r1!, {s13}
 8008440:	d1f0      	bne.n	8008424 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8008442:	4770      	bx	lr
 8008444:	4561      	cmp	r1, ip
 8008446:	d815      	bhi.n	8008474 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8008448:	1d11      	adds	r1, r2, #4
 800844a:	b500      	push	{lr}
 800844c:	f10c 0304 	add.w	r3, ip, #4
 8008450:	f04f 0e00 	mov.w	lr, #0
 8008454:	4401      	add	r1, r0
 8008456:	ebac 0202 	sub.w	r2, ip, r2
 800845a:	ed73 7a01 	vldmdb	r3!, {s15}
 800845e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	d40b      	bmi.n	8008480 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8008468:	4293      	cmp	r3, r2
 800846a:	f841 ed04 	str.w	lr, [r1, #-4]!
 800846e:	d1f4      	bne.n	800845a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008470:	f85d fb04 	ldr.w	pc, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	4293      	cmp	r3, r2
 8008478:	ed61 7a01 	vstmdb	r1!, {s15}
 800847c:	d1d2      	bne.n	8008424 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 800847e:	4770      	bx	lr
 8008480:	4293      	cmp	r3, r2
 8008482:	ed61 7a01 	vstmdb	r1!, {s15}
 8008486:	d1e8      	bne.n	800845a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8008488:	e7f2      	b.n	8008470 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 800848a:	bf00      	nop

0800848c <forward_lite_dense_if32of32wf32>:
 800848c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008490:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8008494:	6801      	ldr	r1, [r0, #0]
 8008496:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800849a:	fb02 f303 	mul.w	r3, r2, r3
 800849e:	b083      	sub	sp, #12
 80084a0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80084a4:	4299      	cmp	r1, r3
 80084a6:	9100      	str	r1, [sp, #0]
 80084a8:	9301      	str	r3, [sp, #4]
 80084aa:	f080 811e 	bcs.w	80086ea <forward_lite_dense_if32of32wf32+0x25e>
 80084ae:	6904      	ldr	r4, [r0, #16]
 80084b0:	4607      	mov	r7, r0
 80084b2:	0096      	lsls	r6, r2, #2
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	68bd      	ldr	r5, [r7, #8]
 80084b8:	eb03 0e06 	add.w	lr, r3, r6
 80084bc:	459e      	cmp	lr, r3
 80084be:	461e      	mov	r6, r3
 80084c0:	f240 8104 	bls.w	80086cc <forward_lite_dense_if32of32wf32+0x240>
 80084c4:	f1a4 0c10 	sub.w	ip, r4, #16
 80084c8:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80084cc:	f10c 0c01 	add.w	ip, ip, #1
 80084d0:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 80084d4:	ea4f 0984 	mov.w	r9, r4, lsl #2
 80084d8:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 80084dc:	2c0f      	cmp	r4, #15
 80084de:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800873c <forward_lite_dense_if32of32wf32+0x2b0>
 80084e2:	f240 8105 	bls.w	80086f0 <forward_lite_dense_if32of32wf32+0x264>
 80084e6:	f108 0240 	add.w	r2, r8, #64	@ 0x40
 80084ea:	f105 0340 	add.w	r3, r5, #64	@ 0x40
 80084ee:	4621      	mov	r1, r4
 80084f0:	ed53 5a0f 	vldr	s11, [r3, #-60]	@ 0xffffffc4
 80084f4:	ed52 7a0f 	vldr	s15, [r2, #-60]	@ 0xffffffc4
 80084f8:	ed12 6a10 	vldr	s12, [r2, #-64]	@ 0xffffffc0
 80084fc:	ed53 6a10 	vldr	s13, [r3, #-64]	@ 0xffffffc0
 8008500:	ed52 4a0d 	vldr	s9, [r2, #-52]	@ 0xffffffcc
 8008504:	ed12 5a0c 	vldr	s10, [r2, #-48]	@ 0xffffffd0
 8008508:	ed12 3a0a 	vldr	s6, [r2, #-40]	@ 0xffffffd8
 800850c:	ed53 3a0a 	vldr	s7, [r3, #-40]	@ 0xffffffd8
 8008510:	ed12 4a09 	vldr	s8, [r2, #-36]	@ 0xffffffdc
 8008514:	ed12 1a06 	vldr	s2, [r2, #-24]	@ 0xffffffe8
 8008518:	ed53 1a06 	vldr	s3, [r3, #-24]	@ 0xffffffe8
 800851c:	ed12 2a05 	vldr	s4, [r2, #-20]	@ 0xffffffec
 8008520:	ed53 2a05 	vldr	s5, [r3, #-20]	@ 0xffffffec
 8008524:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008528:	ed52 5a0e 	vldr	s11, [r2, #-56]	@ 0xffffffc8
 800852c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008530:	3910      	subs	r1, #16
 8008532:	290f      	cmp	r1, #15
 8008534:	ed13 6a0e 	vldr	s12, [r3, #-56]	@ 0xffffffc8
 8008538:	ed53 6a0d 	vldr	s13, [r3, #-52]	@ 0xffffffcc
 800853c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008540:	f102 0240 	add.w	r2, r2, #64	@ 0x40
 8008544:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8008548:	ed53 5a1c 	vldr	s11, [r3, #-112]	@ 0xffffff90
 800854c:	ed12 6a1b 	vldr	s12, [r2, #-108]	@ 0xffffff94
 8008550:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008554:	ed53 6a1b 	vldr	s13, [r3, #-108]	@ 0xffffff94
 8008558:	ed53 4a19 	vldr	s9, [r3, #-100]	@ 0xffffff9c
 800855c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008560:	ed12 5a18 	vldr	s10, [r2, #-96]	@ 0xffffffa0
 8008564:	ed53 5a18 	vldr	s11, [r3, #-96]	@ 0xffffffa0
 8008568:	eee6 7a26 	vfma.f32	s15, s12, s13
 800856c:	ed12 6a17 	vldr	s12, [r2, #-92]	@ 0xffffffa4
 8008570:	ed53 6a17 	vldr	s13, [r3, #-92]	@ 0xffffffa4
 8008574:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008578:	ed12 3a14 	vldr	s6, [r2, #-80]	@ 0xffffffb0
 800857c:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8008580:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008584:	ed12 4a13 	vldr	s8, [r2, #-76]	@ 0xffffffb4
 8008588:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 800858c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008590:	ed12 5a12 	vldr	s10, [r2, #-72]	@ 0xffffffb8
 8008594:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8008598:	eee6 7a26 	vfma.f32	s15, s12, s13
 800859c:	ed12 6a11 	vldr	s12, [r2, #-68]	@ 0xffffffbc
 80085a0:	ed53 6a11 	vldr	s13, [r3, #-68]	@ 0xffffffbc
 80085a4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80085a8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80085ac:	eee3 7a23 	vfma.f32	s15, s6, s7
 80085b0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80085b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80085b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80085bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80085c0:	d896      	bhi.n	80084f0 <forward_lite_dense_if32of32wf32+0x64>
 80085c2:	eb05 020b 	add.w	r2, r5, fp
 80085c6:	f004 010f 	and.w	r1, r4, #15
 80085ca:	4663      	mov	r3, ip
 80085cc:	2903      	cmp	r1, #3
 80085ce:	d95f      	bls.n	8008690 <forward_lite_dense_if32of32wf32+0x204>
 80085d0:	edd2 6a01 	vldr	s13, [r2, #4]
 80085d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80085d8:	ed93 6a00 	vldr	s12, [r3]
 80085dc:	ed93 5a02 	vldr	s10, [r3, #8]
 80085e0:	edd2 5a02 	vldr	s11, [r2, #8]
 80085e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80085e8:	edd2 6a00 	vldr	s13, [r2]
 80085ec:	eee6 7a26 	vfma.f32	s15, s12, s13
 80085f0:	1f08      	subs	r0, r1, #4
 80085f2:	2803      	cmp	r0, #3
 80085f4:	ed93 6a03 	vldr	s12, [r3, #12]
 80085f8:	edd2 6a03 	vldr	s13, [r2, #12]
 80085fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008600:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008604:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008608:	eeb0 7a67 	vmov.f32	s14, s15
 800860c:	d938      	bls.n	8008680 <forward_lite_dense_if32of32wf32+0x1f4>
 800860e:	edd2 6a05 	vldr	s13, [r2, #20]
 8008612:	edd3 7a05 	vldr	s15, [r3, #20]
 8008616:	ed93 6a04 	vldr	s12, [r3, #16]
 800861a:	ed93 5a06 	vldr	s10, [r3, #24]
 800861e:	edd2 5a06 	vldr	s11, [r2, #24]
 8008622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008626:	edd2 6a04 	vldr	s13, [r2, #16]
 800862a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800862e:	f1a1 0a08 	sub.w	sl, r1, #8
 8008632:	f1ba 0f03 	cmp.w	sl, #3
 8008636:	ed93 6a07 	vldr	s12, [r3, #28]
 800863a:	edd2 6a07 	vldr	s13, [r2, #28]
 800863e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008642:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008646:	ee37 7a27 	vadd.f32	s14, s14, s15
 800864a:	d919      	bls.n	8008680 <forward_lite_dense_if32of32wf32+0x1f4>
 800864c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8008650:	edd2 7a09 	vldr	s15, [r2, #36]	@ 0x24
 8008654:	ed92 6a08 	vldr	s12, [r2, #32]
 8008658:	ed92 5a0a 	vldr	s10, [r2, #40]	@ 0x28
 800865c:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8008660:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008664:	edd3 6a08 	vldr	s13, [r3, #32]
 8008668:	eee6 7a26 	vfma.f32	s15, s12, s13
 800866c:	ed92 6a0b 	vldr	s12, [r2, #44]	@ 0x2c
 8008670:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8008674:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008678:	eee6 7a26 	vfma.f32	s15, s12, s13
 800867c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008680:	0880      	lsrs	r0, r0, #2
 8008682:	3001      	adds	r0, #1
 8008684:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8008688:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 800868c:	f001 0103 	and.w	r1, r1, #3
 8008690:	b1a9      	cbz	r1, 80086be <forward_lite_dense_if32of32wf32+0x232>
 8008692:	edd3 6a00 	vldr	s13, [r3]
 8008696:	edd2 7a00 	vldr	s15, [r2]
 800869a:	3901      	subs	r1, #1
 800869c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086a0:	d00d      	beq.n	80086be <forward_lite_dense_if32of32wf32+0x232>
 80086a2:	edd3 6a01 	vldr	s13, [r3, #4]
 80086a6:	edd2 7a01 	vldr	s15, [r2, #4]
 80086aa:	2901      	cmp	r1, #1
 80086ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086b0:	d005      	beq.n	80086be <forward_lite_dense_if32of32wf32+0x232>
 80086b2:	edd2 6a02 	vldr	s13, [r2, #8]
 80086b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80086ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80086be:	444d      	add	r5, r9
 80086c0:	eca6 7a01 	vstmia	r6!, {s14}
 80086c4:	45b6      	cmp	lr, r6
 80086c6:	f63f af09 	bhi.w	80084dc <forward_lite_dense_if32of32wf32+0x50>
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	b99b      	cbnz	r3, 80086f8 <forward_lite_dense_if32of32wf32+0x26c>
 80086d0:	9b00      	ldr	r3, [sp, #0]
 80086d2:	9901      	ldr	r1, [sp, #4]
 80086d4:	693c      	ldr	r4, [r7, #16]
 80086d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80086da:	4299      	cmp	r1, r3
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80086e2:	ea4f 0682 	mov.w	r6, r2, lsl #2
 80086e6:	f63f aee5 	bhi.w	80084b4 <forward_lite_dense_if32of32wf32+0x28>
 80086ea:	b003      	add	sp, #12
 80086ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f0:	4621      	mov	r1, r4
 80086f2:	462a      	mov	r2, r5
 80086f4:	4643      	mov	r3, r8
 80086f6:	e769      	b.n	80085cc <forward_lite_dense_if32of32wf32+0x140>
 80086f8:	2a00      	cmp	r2, #0
 80086fa:	d0e9      	beq.n	80086d0 <forward_lite_dense_if32of32wf32+0x244>
 80086fc:	9a00      	ldr	r2, [sp, #0]
 80086fe:	ed93 7a00 	vldr	s14, [r3]
 8008702:	edd2 7a00 	vldr	s15, [r2]
 8008706:	ee77 7a87 	vadd.f32	s15, s15, s14
 800870a:	4613      	mov	r3, r2
 800870c:	edc2 7a00 	vstr	s15, [r2]
 8008710:	697a      	ldr	r2, [r7, #20]
 8008712:	2a01      	cmp	r2, #1
 8008714:	d9dc      	bls.n	80086d0 <forward_lite_dense_if32of32wf32+0x244>
 8008716:	1d19      	adds	r1, r3, #4
 8008718:	2301      	movs	r3, #1
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	ed91 7a00 	vldr	s14, [r1]
 8008720:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008724:	edd2 7a00 	vldr	s15, [r2]
 8008728:	ee77 7a87 	vadd.f32	s15, s15, s14
 800872c:	3301      	adds	r3, #1
 800872e:	ece1 7a01 	vstmia	r1!, {s15}
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	429a      	cmp	r2, r3
 8008736:	d8f0      	bhi.n	800871a <forward_lite_dense_if32of32wf32+0x28e>
 8008738:	e7ca      	b.n	80086d0 <forward_lite_dense_if32of32wf32+0x244>
 800873a:	bf00      	nop
 800873c:	00000000 	.word	0x00000000

08008740 <forward_lite_dense_if32of32wf32_lut4>:
 8008740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008744:	b08d      	sub	sp, #52	@ 0x34
 8008746:	4605      	mov	r5, r0
 8008748:	9005      	str	r0, [sp, #20]
 800874a:	920a      	str	r2, [sp, #40]	@ 0x28
 800874c:	4618      	mov	r0, r3
 800874e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 8008752:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8008754:	fb02 f303 	mul.w	r3, r2, r3
 8008758:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800875c:	460c      	mov	r4, r1
 800875e:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8008760:	9308      	str	r3, [sp, #32]
 8008762:	b126      	cbz	r6, 800876e <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8008764:	2240      	movs	r2, #64	@ 0x40
 8008766:	4631      	mov	r1, r6
 8008768:	f000 fa76 	bl	8008c58 <st_int8_copy>
 800876c:	4630      	mov	r0, r6
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	9a08      	ldr	r2, [sp, #32]
 8008772:	4293      	cmp	r3, r2
 8008774:	f080 80f5 	bcs.w	8008962 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008778:	08eb      	lsrs	r3, r5, #3
 800877a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800877c:	9301      	str	r3, [sp, #4]
 800877e:	f005 0101 	and.w	r1, r5, #1
 8008782:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	f025 0801 	bic.w	r8, r5, #1
 800878e:	9102      	str	r1, [sp, #8]
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	00a9      	lsls	r1, r5, #2
 8008794:	9b05      	ldr	r3, [sp, #20]
 8008796:	9207      	str	r2, [sp, #28]
 8008798:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 800879c:	9109      	str	r1, [sp, #36]	@ 0x24
 800879e:	f104 0b20 	add.w	fp, r4, #32
 80087a2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80087a4:	9a07      	ldr	r2, [sp, #28]
 80087a6:	eb03 0902 	add.w	r9, r3, r2
 80087aa:	4599      	cmp	r9, r3
 80087ac:	f1ab 0220 	sub.w	r2, fp, #32
 80087b0:	9206      	str	r2, [sp, #24]
 80087b2:	f240 80d9 	bls.w	8008968 <forward_lite_dense_if32of32wf32_lut4+0x228>
 80087b6:	469e      	mov	lr, r3
 80087b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087ba:	f108 33ff 	add.w	r3, r8, #4294967295
 80087be:	9303      	str	r3, [sp, #12]
 80087c0:	9b01      	ldr	r3, [sp, #4]
 80087c2:	ed9f 7a72 	vldr	s14, [pc, #456]	@ 800898c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 80b2 	beq.w	8008930 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 80087cc:	9b04      	ldr	r3, [sp, #16]
 80087ce:	18d5      	adds	r5, r2, r3
 80087d0:	465b      	mov	r3, fp
 80087d2:	7814      	ldrb	r4, [r2, #0]
 80087d4:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 80087d8:	7851      	ldrb	r1, [r2, #1]
 80087da:	ed53 3a08 	vldr	s7, [r3, #-32]	@ 0xffffffe0
 80087de:	ed13 4a06 	vldr	s8, [r3, #-24]	@ 0xffffffe8
 80087e2:	ed53 4a05 	vldr	s9, [r3, #-20]	@ 0xffffffec
 80087e6:	ed13 5a04 	vldr	s10, [r3, #-16]
 80087ea:	ed53 5a03 	vldr	s11, [r3, #-12]
 80087ee:	ed13 6a02 	vldr	s12, [r3, #-8]
 80087f2:	ed53 6a01 	vldr	s13, [r3, #-4]
 80087f6:	f004 060f 	and.w	r6, r4, #15
 80087fa:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80087fe:	edd6 7a00 	vldr	s15, [r6]
 8008802:	0924      	lsrs	r4, r4, #4
 8008804:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8008808:	ed94 3a00 	vldr	s6, [r4]
 800880c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008810:	090c      	lsrs	r4, r1, #4
 8008812:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008816:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800881a:	f001 010f 	and.w	r1, r1, #15
 800881e:	edd4 3a00 	vldr	s7, [r4]
 8008822:	7894      	ldrb	r4, [r2, #2]
 8008824:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800882c:	0926      	lsrs	r6, r4, #4
 800882e:	ed91 4a00 	vldr	s8, [r1]
 8008832:	78d1      	ldrb	r1, [r2, #3]
 8008834:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008838:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800883c:	f004 040f 	and.w	r4, r4, #15
 8008840:	edd6 4a00 	vldr	s9, [r6]
 8008844:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008848:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800884c:	3204      	adds	r2, #4
 800884e:	ed94 5a00 	vldr	s10, [r4]
 8008852:	090c      	lsrs	r4, r1, #4
 8008854:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008858:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800885c:	f001 010f 	and.w	r1, r1, #15
 8008860:	edd4 5a00 	vldr	s11, [r4]
 8008864:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008868:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800886c:	42aa      	cmp	r2, r5
 800886e:	ed91 6a00 	vldr	s12, [r1]
 8008872:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008876:	f103 0320 	add.w	r3, r3, #32
 800887a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800887e:	d1a8      	bne.n	80087d2 <forward_lite_dense_if32of32wf32_lut4+0x92>
 8008880:	4656      	mov	r6, sl
 8008882:	4546      	cmp	r6, r8
 8008884:	d258      	bcs.n	8008938 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 8008886:	9b03      	ldr	r3, [sp, #12]
 8008888:	1b9c      	subs	r4, r3, r6
 800888a:	08e7      	lsrs	r7, r4, #3
 800888c:	f106 0208 	add.w	r2, r6, #8
 8008890:	1e69      	subs	r1, r5, #1
 8008892:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 8008896:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800889a:	ed52 5a01 	vldr	s11, [r2, #-4]
 800889e:	ed52 6a02 	vldr	s13, [r2, #-8]
 80088a2:	f003 0c0f 	and.w	ip, r3, #15
 80088a6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80088aa:	eddc 7a00 	vldr	s15, [ip]
 80088ae:	091b      	lsrs	r3, r3, #4
 80088b0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80088b4:	ed93 6a00 	vldr	s12, [r3]
 80088b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80088bc:	42a1      	cmp	r1, r4
 80088be:	eee6 7a26 	vfma.f32	s15, s12, s13
 80088c2:	f102 0208 	add.w	r2, r2, #8
 80088c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80088ca:	d1e4      	bne.n	8008896 <forward_lite_dense_if32of32wf32_lut4+0x156>
 80088cc:	3701      	adds	r7, #1
 80088ce:	19ea      	adds	r2, r5, r7
 80088d0:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 80088d4:	9b02      	ldr	r3, [sp, #8]
 80088d6:	b30b      	cbz	r3, 800891c <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 80088d8:	f812 3b01 	ldrb.w	r3, [r2], #1
 80088dc:	edd6 7a00 	vldr	s15, [r6]
 80088e0:	091b      	lsrs	r3, r3, #4
 80088e2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80088e6:	edd3 6a00 	vldr	s13, [r3]
 80088ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088ee:	ecae 7a01 	vstmia	lr!, {s14}
 80088f2:	45f1      	cmp	r9, lr
 80088f4:	f63f af64 	bhi.w	80087c0 <forward_lite_dense_if32of32wf32_lut4+0x80>
 80088f8:	9b05      	ldr	r3, [sp, #20]
 80088fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088fc:	1899      	adds	r1, r3, r2
 80088fe:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008900:	b9e3      	cbnz	r3, 800893c <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8008902:	9b08      	ldr	r3, [sp, #32]
 8008904:	428b      	cmp	r3, r1
 8008906:	d92c      	bls.n	8008962 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8008908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890a:	4498      	add	r8, r3
 800890c:	449a      	add	sl, r3
 800890e:	449b      	add	fp, r3
 8008910:	9b05      	ldr	r3, [sp, #20]
 8008912:	4599      	cmp	r9, r3
 8008914:	d92a      	bls.n	800896c <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8008916:	9105      	str	r1, [sp, #20]
 8008918:	460b      	mov	r3, r1
 800891a:	e743      	b.n	80087a4 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800891c:	ecae 7a01 	vstmia	lr!, {s14}
 8008920:	45f1      	cmp	r9, lr
 8008922:	d9e9      	bls.n	80088f8 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800898c <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800892a:	2b00      	cmp	r3, #0
 800892c:	f47f af4e 	bne.w	80087cc <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8008930:	9e06      	ldr	r6, [sp, #24]
 8008932:	4546      	cmp	r6, r8
 8008934:	4615      	mov	r5, r2
 8008936:	d3a6      	bcc.n	8008886 <forward_lite_dense_if32of32wf32_lut4+0x146>
 8008938:	462a      	mov	r2, r5
 800893a:	e7cb      	b.n	80088d4 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800893c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800893e:	2b00      	cmp	r3, #0
 8008940:	d0df      	beq.n	8008902 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8008942:	9b07      	ldr	r3, [sp, #28]
 8008944:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008946:	1acb      	subs	r3, r1, r3
 8008948:	edd3 7a00 	vldr	s15, [r3]
 800894c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008950:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008954:	ece3 7a01 	vstmia	r3!, {s15}
 8008958:	428b      	cmp	r3, r1
 800895a:	d1f5      	bne.n	8008948 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800895c:	9b08      	ldr	r3, [sp, #32]
 800895e:	428b      	cmp	r3, r1
 8008960:	d8d2      	bhi.n	8008908 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 8008962:	b00d      	add	sp, #52	@ 0x34
 8008964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008968:	4619      	mov	r1, r3
 800896a:	e7c8      	b.n	80088fe <forward_lite_dense_if32of32wf32_lut4+0x1be>
 800896c:	9b07      	ldr	r3, [sp, #28]
 800896e:	1acb      	subs	r3, r1, r3
 8008970:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8008972:	461a      	mov	r2, r3
 8008974:	ed92 7a00 	vldr	s14, [r2]
 8008978:	ecf0 7a01 	vldmia	r0!, {s15}
 800897c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008980:	ece2 7a01 	vstmia	r2!, {s15}
 8008984:	428a      	cmp	r2, r1
 8008986:	d1f5      	bne.n	8008974 <forward_lite_dense_if32of32wf32_lut4+0x234>
 8008988:	e7f2      	b.n	8008970 <forward_lite_dense_if32of32wf32_lut4+0x230>
 800898a:	bf00      	nop
 800898c:	00000000 	.word	0x00000000

08008990 <forward_lite_dense_if32of32wf32_lut8>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	b087      	sub	sp, #28
 8008996:	460f      	mov	r7, r1
 8008998:	9204      	str	r2, [sp, #16]
 800899a:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	@ 0x4c
 800899e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80089a0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80089a2:	fb01 f202 	mul.w	r2, r1, r2
 80089a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80089aa:	4605      	mov	r5, r0
 80089ac:	9202      	str	r2, [sp, #8]
 80089ae:	b136      	cbz	r6, 80089be <forward_lite_dense_if32of32wf32_lut8+0x2e>
 80089b0:	4618      	mov	r0, r3
 80089b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80089b6:	4631      	mov	r1, r6
 80089b8:	f000 f94e 	bl	8008c58 <st_int8_copy>
 80089bc:	4633      	mov	r3, r6
 80089be:	9a02      	ldr	r2, [sp, #8]
 80089c0:	4295      	cmp	r5, r2
 80089c2:	f080 80f9 	bcs.w	8008bb8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80089c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089c8:	0092      	lsls	r2, r2, #2
 80089ca:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80089ce:	9201      	str	r2, [sp, #4]
 80089d0:	9205      	str	r2, [sp, #20]
 80089d2:	462a      	mov	r2, r5
 80089d4:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 80089d8:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 80089dc:	464d      	mov	r5, r9
 80089de:	4691      	mov	r9, r2
 80089e0:	9a01      	ldr	r2, [sp, #4]
 80089e2:	eb09 0e02 	add.w	lr, r9, r2
 80089e6:	00a1      	lsls	r1, r4, #2
 80089e8:	3720      	adds	r7, #32
 80089ea:	45ce      	cmp	lr, r9
 80089ec:	f004 0007 	and.w	r0, r4, #7
 80089f0:	9103      	str	r1, [sp, #12]
 80089f2:	f1a7 0b20 	sub.w	fp, r7, #32
 80089f6:	f240 80c8 	bls.w	8008b8a <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 80089fa:	9a04      	ldr	r2, [sp, #16]
 80089fc:	46cc      	mov	ip, r9
 80089fe:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8008be8 <forward_lite_dense_if32of32wf32_lut8+0x258>
 8008a02:	2d00      	cmp	r5, #0
 8008a04:	f000 80dd 	beq.w	8008bc2 <forward_lite_dense_if32of32wf32_lut8+0x232>
 8008a08:	eb02 060a 	add.w	r6, r2, sl
 8008a0c:	4639      	mov	r1, r7
 8008a0e:	7854      	ldrb	r4, [r2, #1]
 8008a10:	ed11 3a07 	vldr	s6, [r1, #-28]	@ 0xffffffe4
 8008a14:	ed51 3a08 	vldr	s7, [r1, #-32]	@ 0xffffffe0
 8008a18:	ed11 4a06 	vldr	s8, [r1, #-24]	@ 0xffffffe8
 8008a1c:	ed51 4a05 	vldr	s9, [r1, #-20]	@ 0xffffffec
 8008a20:	ed11 5a04 	vldr	s10, [r1, #-16]
 8008a24:	ed51 5a03 	vldr	s11, [r1, #-12]
 8008a28:	ed11 6a02 	vldr	s12, [r1, #-8]
 8008a2c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8008a30:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a34:	edd4 7a00 	vldr	s15, [r4]
 8008a38:	7814      	ldrb	r4, [r2, #0]
 8008a3a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a3e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008a42:	ed94 3a00 	vldr	s6, [r4]
 8008a46:	7894      	ldrb	r4, [r2, #2]
 8008a48:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a50:	3208      	adds	r2, #8
 8008a52:	edd4 3a00 	vldr	s7, [r4]
 8008a56:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 8008a5a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008a5e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a62:	3120      	adds	r1, #32
 8008a64:	ed94 4a00 	vldr	s8, [r4]
 8008a68:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 8008a6c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008a70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a74:	edd4 4a00 	vldr	s9, [r4]
 8008a78:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 8008a7c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008a80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a84:	ed94 5a00 	vldr	s10, [r4]
 8008a88:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 8008a8c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a90:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a94:	edd4 5a00 	vldr	s11, [r4]
 8008a98:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 8008a9c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008aa0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008aa4:	42b2      	cmp	r2, r6
 8008aa6:	ed94 6a00 	vldr	s12, [r4]
 8008aaa:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008aae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008ab2:	d1ac      	bne.n	8008a0e <forward_lite_dense_if32of32wf32_lut8+0x7e>
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	f000 8081 	beq.w	8008bbe <forward_lite_dense_if32of32wf32_lut8+0x22e>
 8008abc:	7831      	ldrb	r1, [r6, #0]
 8008abe:	edd2 7a00 	vldr	s15, [r2]
 8008ac2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008ac6:	edd1 6a00 	vldr	s13, [r1]
 8008aca:	2801      	cmp	r0, #1
 8008acc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ad0:	d03f      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008ad2:	7871      	ldrb	r1, [r6, #1]
 8008ad4:	edd2 7a01 	vldr	s15, [r2, #4]
 8008ad8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008adc:	edd1 6a00 	vldr	s13, [r1]
 8008ae0:	2802      	cmp	r0, #2
 8008ae2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ae6:	d034      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008ae8:	78b1      	ldrb	r1, [r6, #2]
 8008aea:	edd2 7a02 	vldr	s15, [r2, #8]
 8008aee:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008af2:	edd1 6a00 	vldr	s13, [r1]
 8008af6:	2803      	cmp	r0, #3
 8008af8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008afc:	d029      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008afe:	78f1      	ldrb	r1, [r6, #3]
 8008b00:	edd2 6a03 	vldr	s13, [r2, #12]
 8008b04:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008b08:	edd1 7a00 	vldr	s15, [r1]
 8008b0c:	2804      	cmp	r0, #4
 8008b0e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b12:	d01e      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008b14:	7931      	ldrb	r1, [r6, #4]
 8008b16:	edd2 6a04 	vldr	s13, [r2, #16]
 8008b1a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008b1e:	edd1 7a00 	vldr	s15, [r1]
 8008b22:	2805      	cmp	r0, #5
 8008b24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b28:	d013      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008b2a:	7971      	ldrb	r1, [r6, #5]
 8008b2c:	edd2 6a05 	vldr	s13, [r2, #20]
 8008b30:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8008b34:	edd1 7a00 	vldr	s15, [r1]
 8008b38:	2806      	cmp	r0, #6
 8008b3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b3e:	d008      	beq.n	8008b52 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8008b40:	edd2 7a06 	vldr	s15, [r2, #24]
 8008b44:	79b2      	ldrb	r2, [r6, #6]
 8008b46:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8008b4a:	edd2 6a00 	vldr	s13, [r2]
 8008b4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b52:	1832      	adds	r2, r6, r0
 8008b54:	ecac 7a01 	vstmia	ip!, {s14}
 8008b58:	45e6      	cmp	lr, ip
 8008b5a:	f63f af50 	bhi.w	80089fe <forward_lite_dense_if32of32wf32_lut8+0x6e>
 8008b5e:	9a05      	ldr	r2, [sp, #20]
 8008b60:	eb09 0402 	add.w	r4, r9, r2
 8008b64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b66:	b9a2      	cbnz	r2, 8008b92 <forward_lite_dense_if32of32wf32_lut8+0x202>
 8008b68:	9a02      	ldr	r2, [sp, #8]
 8008b6a:	42a2      	cmp	r2, r4
 8008b6c:	d924      	bls.n	8008bb8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8008b6e:	9a03      	ldr	r2, [sp, #12]
 8008b70:	45ce      	cmp	lr, r9
 8008b72:	4490      	add	r8, r2
 8008b74:	4417      	add	r7, r2
 8008b76:	d927      	bls.n	8008bc8 <forward_lite_dense_if32of32wf32_lut8+0x238>
 8008b78:	9a01      	ldr	r2, [sp, #4]
 8008b7a:	46a1      	mov	r9, r4
 8008b7c:	eb09 0e02 	add.w	lr, r9, r2
 8008b80:	45ce      	cmp	lr, r9
 8008b82:	f1a7 0b20 	sub.w	fp, r7, #32
 8008b86:	f63f af38 	bhi.w	80089fa <forward_lite_dense_if32of32wf32_lut8+0x6a>
 8008b8a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008b8c:	464c      	mov	r4, r9
 8008b8e:	2a00      	cmp	r2, #0
 8008b90:	d0ea      	beq.n	8008b68 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008b92:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008b94:	2a00      	cmp	r2, #0
 8008b96:	d0e7      	beq.n	8008b68 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 8008b98:	9a01      	ldr	r2, [sp, #4]
 8008b9a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008b9c:	1aa2      	subs	r2, r4, r2
 8008b9e:	edd2 7a00 	vldr	s15, [r2]
 8008ba2:	ecb1 7a01 	vldmia	r1!, {s14}
 8008ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008baa:	ece2 7a01 	vstmia	r2!, {s15}
 8008bae:	4294      	cmp	r4, r2
 8008bb0:	d1f5      	bne.n	8008b9e <forward_lite_dense_if32of32wf32_lut8+0x20e>
 8008bb2:	9a02      	ldr	r2, [sp, #8]
 8008bb4:	42a2      	cmp	r2, r4
 8008bb6:	d8da      	bhi.n	8008b6e <forward_lite_dense_if32of32wf32_lut8+0x1de>
 8008bb8:	b007      	add	sp, #28
 8008bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	e7c8      	b.n	8008b54 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8008bc2:	4616      	mov	r6, r2
 8008bc4:	465a      	mov	r2, fp
 8008bc6:	e776      	b.n	8008ab6 <forward_lite_dense_if32of32wf32_lut8+0x126>
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	1ae3      	subs	r3, r4, r3
 8008bcc:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008bce:	461a      	mov	r2, r3
 8008bd0:	ed92 7a00 	vldr	s14, [r2]
 8008bd4:	ecf1 7a01 	vldmia	r1!, {s15}
 8008bd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008bdc:	ece2 7a01 	vstmia	r2!, {s15}
 8008be0:	42a2      	cmp	r2, r4
 8008be2:	d1f5      	bne.n	8008bd0 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8008be4:	e7f2      	b.n	8008bcc <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8008be6:	bf00      	nop
 8008be8:	00000000 	.word	0x00000000

08008bec <forward_lite_nl_softmax_if32of32>:
 8008bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bf4:	b083      	sub	sp, #12
 8008bf6:	469b      	mov	fp, r3
 8008bf8:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8008bfa:	fbb2 f3f7 	udiv	r3, r2, r7
 8008bfe:	42ba      	cmp	r2, r7
 8008c00:	9300      	str	r3, [sp, #0]
 8008c02:	d326      	bcc.n	8008c52 <forward_lite_nl_softmax_if32of32+0x66>
 8008c04:	fb07 f30b 	mul.w	r3, r7, fp
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	9301      	str	r3, [sp, #4]
 8008c0c:	f1bb 0f00 	cmp.w	fp, #0
 8008c10:	d01f      	beq.n	8008c52 <forward_lite_nl_softmax_if32of32+0x66>
 8008c12:	970c      	str	r7, [sp, #48]	@ 0x30
 8008c14:	465f      	mov	r7, fp
 8008c16:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
 8008c1a:	4680      	mov	r8, r0
 8008c1c:	4689      	mov	r9, r1
 8008c1e:	f04f 0a00 	mov.w	sl, #0
 8008c22:	464e      	mov	r6, r9
 8008c24:	4645      	mov	r5, r8
 8008c26:	2400      	movs	r4, #0
 8008c28:	4631      	mov	r1, r6
 8008c2a:	4628      	mov	r0, r5
 8008c2c:	463b      	mov	r3, r7
 8008c2e:	3401      	adds	r4, #1
 8008c30:	465a      	mov	r2, fp
 8008c32:	f7ff fb3b 	bl	80082ac <forward_lite_nl_softmax_if32of32_kernel>
 8008c36:	42a7      	cmp	r7, r4
 8008c38:	f106 0604 	add.w	r6, r6, #4
 8008c3c:	f105 0504 	add.w	r5, r5, #4
 8008c40:	d1f2      	bne.n	8008c28 <forward_lite_nl_softmax_if32of32+0x3c>
 8008c42:	9b01      	ldr	r3, [sp, #4]
 8008c44:	4499      	add	r9, r3
 8008c46:	4498      	add	r8, r3
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	f10a 0a01 	add.w	sl, sl, #1
 8008c4e:	4553      	cmp	r3, sl
 8008c50:	d8e7      	bhi.n	8008c22 <forward_lite_nl_softmax_if32of32+0x36>
 8008c52:	b003      	add	sp, #12
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c58 <st_int8_copy>:
 8008c58:	4288      	cmp	r0, r1
 8008c5a:	d022      	beq.n	8008ca2 <st_int8_copy+0x4a>
 8008c5c:	b30a      	cbz	r2, 8008ca2 <st_int8_copy+0x4a>
 8008c5e:	4288      	cmp	r0, r1
 8008c60:	d312      	bcc.n	8008c88 <st_int8_copy+0x30>
 8008c62:	2a03      	cmp	r2, #3
 8008c64:	d81e      	bhi.n	8008ca4 <st_int8_copy+0x4c>
 8008c66:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c6a:	f801 3b01 	strb.w	r3, [r1], #1
 8008c6e:	2a01      	cmp	r2, #1
 8008c70:	d017      	beq.n	8008ca2 <st_int8_copy+0x4a>
 8008c72:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c76:	f801 3b01 	strb.w	r3, [r1], #1
 8008c7a:	2a02      	cmp	r2, #2
 8008c7c:	d011      	beq.n	8008ca2 <st_int8_copy+0x4a>
 8008c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c82:	f801 3b01 	strb.w	r3, [r1], #1
 8008c86:	4770      	bx	lr
 8008c88:	1883      	adds	r3, r0, r2
 8008c8a:	4299      	cmp	r1, r3
 8008c8c:	d2e9      	bcs.n	8008c62 <st_int8_copy+0xa>
 8008c8e:	4298      	cmp	r0, r3
 8008c90:	440a      	add	r2, r1
 8008c92:	d206      	bcs.n	8008ca2 <st_int8_copy+0x4a>
 8008c94:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008c98:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008c9c:	4298      	cmp	r0, r3
 8008c9e:	d1f9      	bne.n	8008c94 <st_int8_copy+0x3c>
 8008ca0:	4770      	bx	lr
 8008ca2:	4770      	bx	lr
 8008ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	f001 0403 	and.w	r4, r1, #3
 8008cac:	f1c4 0304 	rsb	r3, r4, #4
 8008cb0:	f000 0e03 	and.w	lr, r0, #3
 8008cb4:	eba2 0c03 	sub.w	ip, r2, r3
 8008cb8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008cbc:	f801 3b01 	strb.w	r3, [r1], #1
 8008cc0:	2c03      	cmp	r4, #3
 8008cc2:	f1c4 0202 	rsb	r2, r4, #2
 8008cc6:	d00e      	beq.n	8008ce6 <st_int8_copy+0x8e>
 8008cc8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ccc:	f801 3b01 	strb.w	r3, [r1], #1
 8008cd0:	2a00      	cmp	r2, #0
 8008cd2:	dd08      	ble.n	8008ce6 <st_int8_copy+0x8e>
 8008cd4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008cd8:	f801 3b01 	strb.w	r3, [r1], #1
 8008cdc:	b91c      	cbnz	r4, 8008ce6 <st_int8_copy+0x8e>
 8008cde:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008ce2:	f801 3b01 	strb.w	r3, [r1], #1
 8008ce6:	4574      	cmp	r4, lr
 8008ce8:	d02b      	beq.n	8008d42 <st_int8_copy+0xea>
 8008cea:	ea4f 131c 	mov.w	r3, ip, lsr #4
 8008cee:	1e5a      	subs	r2, r3, #1
 8008cf0:	b153      	cbz	r3, 8008d08 <st_int8_copy+0xb0>
 8008cf2:	f850 3b04 	ldr.w	r3, [r0], #4
 8008cf6:	f850 4b04 	ldr.w	r4, [r0], #4
 8008cfa:	f850 5b04 	ldr.w	r5, [r0], #4
 8008cfe:	f850 6b04 	ldr.w	r6, [r0], #4
 8008d02:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008d04:	3a01      	subs	r2, #1
 8008d06:	d2f4      	bcs.n	8008cf2 <st_int8_copy+0x9a>
 8008d08:	f01c 0f08 	tst.w	ip, #8
 8008d0c:	d004      	beq.n	8008d18 <st_int8_copy+0xc0>
 8008d0e:	f850 3b04 	ldr.w	r3, [r0], #4
 8008d12:	f850 4b04 	ldr.w	r4, [r0], #4
 8008d16:	c118      	stmia	r1!, {r3, r4}
 8008d18:	f01c 0f04 	tst.w	ip, #4
 8008d1c:	d003      	beq.n	8008d26 <st_int8_copy+0xce>
 8008d1e:	f850 3b04 	ldr.w	r3, [r0], #4
 8008d22:	f841 3b04 	str.w	r3, [r1], #4
 8008d26:	f01c 0f02 	tst.w	ip, #2
 8008d2a:	d003      	beq.n	8008d34 <st_int8_copy+0xdc>
 8008d2c:	f830 3b02 	ldrh.w	r3, [r0], #2
 8008d30:	f821 3b02 	strh.w	r3, [r1], #2
 8008d34:	f01c 0f01 	tst.w	ip, #1
 8008d38:	d001      	beq.n	8008d3e <st_int8_copy+0xe6>
 8008d3a:	7803      	ldrb	r3, [r0, #0]
 8008d3c:	700b      	strb	r3, [r1, #0]
 8008d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d42:	ea4f 139c 	mov.w	r3, ip, lsr #6
 8008d46:	f103 39ff 	add.w	r9, r3, #4294967295
 8008d4a:	b183      	cbz	r3, 8008d6e <st_int8_copy+0x116>
 8008d4c:	4688      	mov	r8, r1
 8008d4e:	4686      	mov	lr, r0
 8008d50:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d54:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d58:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d5c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d60:	f109 39ff 	add.w	r9, r9, #4294967295
 8008d64:	f1b9 3fff 	cmp.w	r9, #4294967295
 8008d68:	4641      	mov	r1, r8
 8008d6a:	4670      	mov	r0, lr
 8008d6c:	d1ee      	bne.n	8008d4c <st_int8_copy+0xf4>
 8008d6e:	f01c 0f20 	tst.w	ip, #32
 8008d72:	d007      	beq.n	8008d84 <st_int8_copy+0x12c>
 8008d74:	4688      	mov	r8, r1
 8008d76:	4686      	mov	lr, r0
 8008d78:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d7c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8008d80:	4641      	mov	r1, r8
 8008d82:	4670      	mov	r0, lr
 8008d84:	f01c 0f10 	tst.w	ip, #16
 8008d88:	d001      	beq.n	8008d8e <st_int8_copy+0x136>
 8008d8a:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8008d8c:	c178      	stmia	r1!, {r3, r4, r5, r6}
 8008d8e:	f01c 0f08 	tst.w	ip, #8
 8008d92:	d0c1      	beq.n	8008d18 <st_int8_copy+0xc0>
 8008d94:	c818      	ldmia	r0!, {r3, r4}
 8008d96:	c118      	stmia	r1!, {r3, r4}
 8008d98:	e7be      	b.n	8008d18 <st_int8_copy+0xc0>
 8008d9a:	bf00      	nop

08008d9c <ai_array_to_buffer_fmt>:
 8008d9c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d055      	beq.n	8008e50 <ai_array_to_buffer_fmt+0xb4>
 8008da4:	4a2d      	ldr	r2, [pc, #180]	@ (8008e5c <ai_array_to_buffer_fmt+0xc0>)
 8008da6:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d010      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008dae:	dc21      	bgt.n	8008df4 <ai_array_to_buffer_fmt+0x58>
 8008db0:	4a2b      	ldr	r2, [pc, #172]	@ (8008e60 <ai_array_to_buffer_fmt+0xc4>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00c      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008db6:	dd0f      	ble.n	8008dd8 <ai_array_to_buffer_fmt+0x3c>
 8008db8:	4a2a      	ldr	r2, [pc, #168]	@ (8008e64 <ai_array_to_buffer_fmt+0xc8>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d008      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008dbe:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d004      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008dc6:	4a28      	ldr	r2, [pc, #160]	@ (8008e68 <ai_array_to_buffer_fmt+0xcc>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	bf0c      	ite	eq
 8008dcc:	4613      	moveq	r3, r2
 8008dce:	2340      	movne	r3, #64	@ 0x40
 8008dd0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008dd4:	4318      	orrs	r0, r3
 8008dd6:	4770      	bx	lr
 8008dd8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d0f7      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008de0:	dd2c      	ble.n	8008e3c <ai_array_to_buffer_fmt+0xa0>
 8008de2:	4a22      	ldr	r2, [pc, #136]	@ (8008e6c <ai_array_to_buffer_fmt+0xd0>)
 8008de4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008de8:	4293      	cmp	r3, r2
 8008dea:	bf0c      	ite	eq
 8008dec:	4613      	moveq	r3, r2
 8008dee:	2340      	movne	r3, #64	@ 0x40
 8008df0:	4318      	orrs	r0, r3
 8008df2:	4770      	bx	lr
 8008df4:	4a1e      	ldr	r2, [pc, #120]	@ (8008e70 <ai_array_to_buffer_fmt+0xd4>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d0ea      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008dfa:	dd10      	ble.n	8008e1e <ai_array_to_buffer_fmt+0x82>
 8008dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e74 <ai_array_to_buffer_fmt+0xd8>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d0e6      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e02:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d0e2      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e0a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	bf0c      	ite	eq
 8008e12:	4613      	moveq	r3, r2
 8008e14:	2340      	movne	r3, #64	@ 0x40
 8008e16:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 8008e1a:	4318      	orrs	r0, r3
 8008e1c:	4770      	bx	lr
 8008e1e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d0d4      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e26:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d0d0      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e2e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008e32:	4293      	cmp	r3, r2
 8008e34:	bf0c      	ite	eq
 8008e36:	4613      	moveq	r3, r2
 8008e38:	2340      	movne	r3, #64	@ 0x40
 8008e3a:	e7c9      	b.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e3c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d0c5      	beq.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e44:	3280      	adds	r2, #128	@ 0x80
 8008e46:	4293      	cmp	r3, r2
 8008e48:	bf0c      	ite	eq
 8008e4a:	4613      	moveq	r3, r2
 8008e4c:	2340      	movne	r3, #64	@ 0x40
 8008e4e:	e7bf      	b.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e50:	4b09      	ldr	r3, [pc, #36]	@ (8008e78 <ai_array_to_buffer_fmt+0xdc>)
 8008e52:	4003      	ands	r3, r0
 8008e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008e58:	e7ba      	b.n	8008dd0 <ai_array_to_buffer_fmt+0x34>
 8008e5a:	bf00      	nop
 8008e5c:	00821040 	.word	0x00821040
 8008e60:	00040840 	.word	0x00040840
 8008e64:	00041040 	.word	0x00041040
 8008e68:	0004084f 	.word	0x0004084f
 8008e6c:	00040447 	.word	0x00040447
 8008e70:	00840447 	.word	0x00840447
 8008e74:	0084084f 	.word	0x0084084f
 8008e78:	00803fff 	.word	0x00803fff

08008e7c <ai_array_get_data_byte_size>:
 8008e7c:	b169      	cbz	r1, 8008e9a <ai_array_get_data_byte_size+0x1e>
 8008e7e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008e82:	fb03 f101 	mul.w	r1, r3, r1
 8008e86:	1dcb      	adds	r3, r1, #7
 8008e88:	f023 0307 	bic.w	r3, r3, #7
 8008e8c:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8008e90:	fa23 f000 	lsr.w	r0, r3, r0
 8008e94:	3007      	adds	r0, #7
 8008e96:	08c0      	lsrs	r0, r0, #3
 8008e98:	4770      	bx	lr
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop

08008ea0 <ai_version_get>:
 8008ea0:	0212      	lsls	r2, r2, #8
 8008ea2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008ea6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008eaa:	4770      	bx	lr

08008eac <get_tensor_byte_size>:
 8008eac:	b410      	push	{r4}
 8008eae:	6983      	ldr	r3, [r0, #24]
 8008eb0:	68c4      	ldr	r4, [r0, #12]
 8008eb2:	6941      	ldr	r1, [r0, #20]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68e0      	ldr	r0, [r4, #12]
 8008eb8:	4a07      	ldr	r2, [pc, #28]	@ (8008ed8 <get_tensor_byte_size+0x2c>)
 8008eba:	68c9      	ldr	r1, [r1, #12]
 8008ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ec0:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8008ec4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ec8:	fb01 f000 	mul.w	r0, r1, r0
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	bf04      	itt	eq
 8008ed0:	3007      	addeq	r0, #7
 8008ed2:	08c0      	lsreq	r0, r0, #3
 8008ed4:	4770      	bx	lr
 8008ed6:	bf00      	nop
 8008ed8:	000400c0 	.word	0x000400c0

08008edc <sbrk_aligned>:
 8008edc:	b570      	push	{r4, r5, r6, lr}
 8008ede:	4e0f      	ldr	r6, [pc, #60]	@ (8008f1c <sbrk_aligned+0x40>)
 8008ee0:	460c      	mov	r4, r1
 8008ee2:	6831      	ldr	r1, [r6, #0]
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	b911      	cbnz	r1, 8008eee <sbrk_aligned+0x12>
 8008ee8:	f000 faec 	bl	80094c4 <_sbrk_r>
 8008eec:	6030      	str	r0, [r6, #0]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	f000 fae7 	bl	80094c4 <_sbrk_r>
 8008ef6:	1c43      	adds	r3, r0, #1
 8008ef8:	d103      	bne.n	8008f02 <sbrk_aligned+0x26>
 8008efa:	f04f 34ff 	mov.w	r4, #4294967295
 8008efe:	4620      	mov	r0, r4
 8008f00:	bd70      	pop	{r4, r5, r6, pc}
 8008f02:	1cc4      	adds	r4, r0, #3
 8008f04:	f024 0403 	bic.w	r4, r4, #3
 8008f08:	42a0      	cmp	r0, r4
 8008f0a:	d0f8      	beq.n	8008efe <sbrk_aligned+0x22>
 8008f0c:	1a21      	subs	r1, r4, r0
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f000 fad8 	bl	80094c4 <_sbrk_r>
 8008f14:	3001      	adds	r0, #1
 8008f16:	d1f2      	bne.n	8008efe <sbrk_aligned+0x22>
 8008f18:	e7ef      	b.n	8008efa <sbrk_aligned+0x1e>
 8008f1a:	bf00      	nop
 8008f1c:	2000138c 	.word	0x2000138c

08008f20 <_malloc_r>:
 8008f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f24:	1ccd      	adds	r5, r1, #3
 8008f26:	f025 0503 	bic.w	r5, r5, #3
 8008f2a:	3508      	adds	r5, #8
 8008f2c:	2d0c      	cmp	r5, #12
 8008f2e:	bf38      	it	cc
 8008f30:	250c      	movcc	r5, #12
 8008f32:	2d00      	cmp	r5, #0
 8008f34:	4606      	mov	r6, r0
 8008f36:	db01      	blt.n	8008f3c <_malloc_r+0x1c>
 8008f38:	42a9      	cmp	r1, r5
 8008f3a:	d904      	bls.n	8008f46 <_malloc_r+0x26>
 8008f3c:	230c      	movs	r3, #12
 8008f3e:	6033      	str	r3, [r6, #0]
 8008f40:	2000      	movs	r0, #0
 8008f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800901c <_malloc_r+0xfc>
 8008f4a:	f000 f869 	bl	8009020 <__malloc_lock>
 8008f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f52:	461c      	mov	r4, r3
 8008f54:	bb44      	cbnz	r4, 8008fa8 <_malloc_r+0x88>
 8008f56:	4629      	mov	r1, r5
 8008f58:	4630      	mov	r0, r6
 8008f5a:	f7ff ffbf 	bl	8008edc <sbrk_aligned>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	4604      	mov	r4, r0
 8008f62:	d158      	bne.n	8009016 <_malloc_r+0xf6>
 8008f64:	f8d8 4000 	ldr.w	r4, [r8]
 8008f68:	4627      	mov	r7, r4
 8008f6a:	2f00      	cmp	r7, #0
 8008f6c:	d143      	bne.n	8008ff6 <_malloc_r+0xd6>
 8008f6e:	2c00      	cmp	r4, #0
 8008f70:	d04b      	beq.n	800900a <_malloc_r+0xea>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	4639      	mov	r1, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	eb04 0903 	add.w	r9, r4, r3
 8008f7c:	f000 faa2 	bl	80094c4 <_sbrk_r>
 8008f80:	4581      	cmp	r9, r0
 8008f82:	d142      	bne.n	800900a <_malloc_r+0xea>
 8008f84:	6821      	ldr	r1, [r4, #0]
 8008f86:	1a6d      	subs	r5, r5, r1
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4630      	mov	r0, r6
 8008f8c:	f7ff ffa6 	bl	8008edc <sbrk_aligned>
 8008f90:	3001      	adds	r0, #1
 8008f92:	d03a      	beq.n	800900a <_malloc_r+0xea>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	442b      	add	r3, r5
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	bb62      	cbnz	r2, 8008ffc <_malloc_r+0xdc>
 8008fa2:	f8c8 7000 	str.w	r7, [r8]
 8008fa6:	e00f      	b.n	8008fc8 <_malloc_r+0xa8>
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	1b52      	subs	r2, r2, r5
 8008fac:	d420      	bmi.n	8008ff0 <_malloc_r+0xd0>
 8008fae:	2a0b      	cmp	r2, #11
 8008fb0:	d917      	bls.n	8008fe2 <_malloc_r+0xc2>
 8008fb2:	1961      	adds	r1, r4, r5
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	6025      	str	r5, [r4, #0]
 8008fb8:	bf18      	it	ne
 8008fba:	6059      	strne	r1, [r3, #4]
 8008fbc:	6863      	ldr	r3, [r4, #4]
 8008fbe:	bf08      	it	eq
 8008fc0:	f8c8 1000 	streq.w	r1, [r8]
 8008fc4:	5162      	str	r2, [r4, r5]
 8008fc6:	604b      	str	r3, [r1, #4]
 8008fc8:	4630      	mov	r0, r6
 8008fca:	f000 f82f 	bl	800902c <__malloc_unlock>
 8008fce:	f104 000b 	add.w	r0, r4, #11
 8008fd2:	1d23      	adds	r3, r4, #4
 8008fd4:	f020 0007 	bic.w	r0, r0, #7
 8008fd8:	1ac2      	subs	r2, r0, r3
 8008fda:	bf1c      	itt	ne
 8008fdc:	1a1b      	subne	r3, r3, r0
 8008fde:	50a3      	strne	r3, [r4, r2]
 8008fe0:	e7af      	b.n	8008f42 <_malloc_r+0x22>
 8008fe2:	6862      	ldr	r2, [r4, #4]
 8008fe4:	42a3      	cmp	r3, r4
 8008fe6:	bf0c      	ite	eq
 8008fe8:	f8c8 2000 	streq.w	r2, [r8]
 8008fec:	605a      	strne	r2, [r3, #4]
 8008fee:	e7eb      	b.n	8008fc8 <_malloc_r+0xa8>
 8008ff0:	4623      	mov	r3, r4
 8008ff2:	6864      	ldr	r4, [r4, #4]
 8008ff4:	e7ae      	b.n	8008f54 <_malloc_r+0x34>
 8008ff6:	463c      	mov	r4, r7
 8008ff8:	687f      	ldr	r7, [r7, #4]
 8008ffa:	e7b6      	b.n	8008f6a <_malloc_r+0x4a>
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	42a3      	cmp	r3, r4
 8009002:	d1fb      	bne.n	8008ffc <_malloc_r+0xdc>
 8009004:	2300      	movs	r3, #0
 8009006:	6053      	str	r3, [r2, #4]
 8009008:	e7de      	b.n	8008fc8 <_malloc_r+0xa8>
 800900a:	230c      	movs	r3, #12
 800900c:	6033      	str	r3, [r6, #0]
 800900e:	4630      	mov	r0, r6
 8009010:	f000 f80c 	bl	800902c <__malloc_unlock>
 8009014:	e794      	b.n	8008f40 <_malloc_r+0x20>
 8009016:	6005      	str	r5, [r0, #0]
 8009018:	e7d6      	b.n	8008fc8 <_malloc_r+0xa8>
 800901a:	bf00      	nop
 800901c:	20001390 	.word	0x20001390

08009020 <__malloc_lock>:
 8009020:	4801      	ldr	r0, [pc, #4]	@ (8009028 <__malloc_lock+0x8>)
 8009022:	f000 ba9c 	b.w	800955e <__retarget_lock_acquire_recursive>
 8009026:	bf00      	nop
 8009028:	200014d4 	.word	0x200014d4

0800902c <__malloc_unlock>:
 800902c:	4801      	ldr	r0, [pc, #4]	@ (8009034 <__malloc_unlock+0x8>)
 800902e:	f000 ba97 	b.w	8009560 <__retarget_lock_release_recursive>
 8009032:	bf00      	nop
 8009034:	200014d4 	.word	0x200014d4

08009038 <std>:
 8009038:	2300      	movs	r3, #0
 800903a:	b510      	push	{r4, lr}
 800903c:	4604      	mov	r4, r0
 800903e:	e9c0 3300 	strd	r3, r3, [r0]
 8009042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009046:	6083      	str	r3, [r0, #8]
 8009048:	8181      	strh	r1, [r0, #12]
 800904a:	6643      	str	r3, [r0, #100]	@ 0x64
 800904c:	81c2      	strh	r2, [r0, #14]
 800904e:	6183      	str	r3, [r0, #24]
 8009050:	4619      	mov	r1, r3
 8009052:	2208      	movs	r2, #8
 8009054:	305c      	adds	r0, #92	@ 0x5c
 8009056:	f000 f9f9 	bl	800944c <memset>
 800905a:	4b0d      	ldr	r3, [pc, #52]	@ (8009090 <std+0x58>)
 800905c:	6263      	str	r3, [r4, #36]	@ 0x24
 800905e:	4b0d      	ldr	r3, [pc, #52]	@ (8009094 <std+0x5c>)
 8009060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009062:	4b0d      	ldr	r3, [pc, #52]	@ (8009098 <std+0x60>)
 8009064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009066:	4b0d      	ldr	r3, [pc, #52]	@ (800909c <std+0x64>)
 8009068:	6323      	str	r3, [r4, #48]	@ 0x30
 800906a:	4b0d      	ldr	r3, [pc, #52]	@ (80090a0 <std+0x68>)
 800906c:	6224      	str	r4, [r4, #32]
 800906e:	429c      	cmp	r4, r3
 8009070:	d006      	beq.n	8009080 <std+0x48>
 8009072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009076:	4294      	cmp	r4, r2
 8009078:	d002      	beq.n	8009080 <std+0x48>
 800907a:	33d0      	adds	r3, #208	@ 0xd0
 800907c:	429c      	cmp	r4, r3
 800907e:	d105      	bne.n	800908c <std+0x54>
 8009080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009088:	f000 ba68 	b.w	800955c <__retarget_lock_init_recursive>
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	0800929d 	.word	0x0800929d
 8009094:	080092bf 	.word	0x080092bf
 8009098:	080092f7 	.word	0x080092f7
 800909c:	0800931b 	.word	0x0800931b
 80090a0:	20001394 	.word	0x20001394

080090a4 <stdio_exit_handler>:
 80090a4:	4a02      	ldr	r2, [pc, #8]	@ (80090b0 <stdio_exit_handler+0xc>)
 80090a6:	4903      	ldr	r1, [pc, #12]	@ (80090b4 <stdio_exit_handler+0x10>)
 80090a8:	4803      	ldr	r0, [pc, #12]	@ (80090b8 <stdio_exit_handler+0x14>)
 80090aa:	f000 b869 	b.w	8009180 <_fwalk_sglue>
 80090ae:	bf00      	nop
 80090b0:	20000924 	.word	0x20000924
 80090b4:	08009ca1 	.word	0x08009ca1
 80090b8:	20000934 	.word	0x20000934

080090bc <cleanup_stdio>:
 80090bc:	6841      	ldr	r1, [r0, #4]
 80090be:	4b0c      	ldr	r3, [pc, #48]	@ (80090f0 <cleanup_stdio+0x34>)
 80090c0:	4299      	cmp	r1, r3
 80090c2:	b510      	push	{r4, lr}
 80090c4:	4604      	mov	r4, r0
 80090c6:	d001      	beq.n	80090cc <cleanup_stdio+0x10>
 80090c8:	f000 fdea 	bl	8009ca0 <_fflush_r>
 80090cc:	68a1      	ldr	r1, [r4, #8]
 80090ce:	4b09      	ldr	r3, [pc, #36]	@ (80090f4 <cleanup_stdio+0x38>)
 80090d0:	4299      	cmp	r1, r3
 80090d2:	d002      	beq.n	80090da <cleanup_stdio+0x1e>
 80090d4:	4620      	mov	r0, r4
 80090d6:	f000 fde3 	bl	8009ca0 <_fflush_r>
 80090da:	68e1      	ldr	r1, [r4, #12]
 80090dc:	4b06      	ldr	r3, [pc, #24]	@ (80090f8 <cleanup_stdio+0x3c>)
 80090de:	4299      	cmp	r1, r3
 80090e0:	d004      	beq.n	80090ec <cleanup_stdio+0x30>
 80090e2:	4620      	mov	r0, r4
 80090e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090e8:	f000 bdda 	b.w	8009ca0 <_fflush_r>
 80090ec:	bd10      	pop	{r4, pc}
 80090ee:	bf00      	nop
 80090f0:	20001394 	.word	0x20001394
 80090f4:	200013fc 	.word	0x200013fc
 80090f8:	20001464 	.word	0x20001464

080090fc <global_stdio_init.part.0>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	4b0b      	ldr	r3, [pc, #44]	@ (800912c <global_stdio_init.part.0+0x30>)
 8009100:	4c0b      	ldr	r4, [pc, #44]	@ (8009130 <global_stdio_init.part.0+0x34>)
 8009102:	4a0c      	ldr	r2, [pc, #48]	@ (8009134 <global_stdio_init.part.0+0x38>)
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	4620      	mov	r0, r4
 8009108:	2200      	movs	r2, #0
 800910a:	2104      	movs	r1, #4
 800910c:	f7ff ff94 	bl	8009038 <std>
 8009110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009114:	2201      	movs	r2, #1
 8009116:	2109      	movs	r1, #9
 8009118:	f7ff ff8e 	bl	8009038 <std>
 800911c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009120:	2202      	movs	r2, #2
 8009122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009126:	2112      	movs	r1, #18
 8009128:	f7ff bf86 	b.w	8009038 <std>
 800912c:	200014cc 	.word	0x200014cc
 8009130:	20001394 	.word	0x20001394
 8009134:	080090a5 	.word	0x080090a5

08009138 <__sfp_lock_acquire>:
 8009138:	4801      	ldr	r0, [pc, #4]	@ (8009140 <__sfp_lock_acquire+0x8>)
 800913a:	f000 ba10 	b.w	800955e <__retarget_lock_acquire_recursive>
 800913e:	bf00      	nop
 8009140:	200014d5 	.word	0x200014d5

08009144 <__sfp_lock_release>:
 8009144:	4801      	ldr	r0, [pc, #4]	@ (800914c <__sfp_lock_release+0x8>)
 8009146:	f000 ba0b 	b.w	8009560 <__retarget_lock_release_recursive>
 800914a:	bf00      	nop
 800914c:	200014d5 	.word	0x200014d5

08009150 <__sinit>:
 8009150:	b510      	push	{r4, lr}
 8009152:	4604      	mov	r4, r0
 8009154:	f7ff fff0 	bl	8009138 <__sfp_lock_acquire>
 8009158:	6a23      	ldr	r3, [r4, #32]
 800915a:	b11b      	cbz	r3, 8009164 <__sinit+0x14>
 800915c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009160:	f7ff bff0 	b.w	8009144 <__sfp_lock_release>
 8009164:	4b04      	ldr	r3, [pc, #16]	@ (8009178 <__sinit+0x28>)
 8009166:	6223      	str	r3, [r4, #32]
 8009168:	4b04      	ldr	r3, [pc, #16]	@ (800917c <__sinit+0x2c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1f5      	bne.n	800915c <__sinit+0xc>
 8009170:	f7ff ffc4 	bl	80090fc <global_stdio_init.part.0>
 8009174:	e7f2      	b.n	800915c <__sinit+0xc>
 8009176:	bf00      	nop
 8009178:	080090bd 	.word	0x080090bd
 800917c:	200014cc 	.word	0x200014cc

08009180 <_fwalk_sglue>:
 8009180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009184:	4607      	mov	r7, r0
 8009186:	4688      	mov	r8, r1
 8009188:	4614      	mov	r4, r2
 800918a:	2600      	movs	r6, #0
 800918c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009190:	f1b9 0901 	subs.w	r9, r9, #1
 8009194:	d505      	bpl.n	80091a2 <_fwalk_sglue+0x22>
 8009196:	6824      	ldr	r4, [r4, #0]
 8009198:	2c00      	cmp	r4, #0
 800919a:	d1f7      	bne.n	800918c <_fwalk_sglue+0xc>
 800919c:	4630      	mov	r0, r6
 800919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a2:	89ab      	ldrh	r3, [r5, #12]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d907      	bls.n	80091b8 <_fwalk_sglue+0x38>
 80091a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ac:	3301      	adds	r3, #1
 80091ae:	d003      	beq.n	80091b8 <_fwalk_sglue+0x38>
 80091b0:	4629      	mov	r1, r5
 80091b2:	4638      	mov	r0, r7
 80091b4:	47c0      	blx	r8
 80091b6:	4306      	orrs	r6, r0
 80091b8:	3568      	adds	r5, #104	@ 0x68
 80091ba:	e7e9      	b.n	8009190 <_fwalk_sglue+0x10>

080091bc <iprintf>:
 80091bc:	b40f      	push	{r0, r1, r2, r3}
 80091be:	b507      	push	{r0, r1, r2, lr}
 80091c0:	4906      	ldr	r1, [pc, #24]	@ (80091dc <iprintf+0x20>)
 80091c2:	ab04      	add	r3, sp, #16
 80091c4:	6808      	ldr	r0, [r1, #0]
 80091c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ca:	6881      	ldr	r1, [r0, #8]
 80091cc:	9301      	str	r3, [sp, #4]
 80091ce:	f000 fa3d 	bl	800964c <_vfiprintf_r>
 80091d2:	b003      	add	sp, #12
 80091d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091d8:	b004      	add	sp, #16
 80091da:	4770      	bx	lr
 80091dc:	20000930 	.word	0x20000930

080091e0 <_puts_r>:
 80091e0:	6a03      	ldr	r3, [r0, #32]
 80091e2:	b570      	push	{r4, r5, r6, lr}
 80091e4:	6884      	ldr	r4, [r0, #8]
 80091e6:	4605      	mov	r5, r0
 80091e8:	460e      	mov	r6, r1
 80091ea:	b90b      	cbnz	r3, 80091f0 <_puts_r+0x10>
 80091ec:	f7ff ffb0 	bl	8009150 <__sinit>
 80091f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f2:	07db      	lsls	r3, r3, #31
 80091f4:	d405      	bmi.n	8009202 <_puts_r+0x22>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	0598      	lsls	r0, r3, #22
 80091fa:	d402      	bmi.n	8009202 <_puts_r+0x22>
 80091fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091fe:	f000 f9ae 	bl	800955e <__retarget_lock_acquire_recursive>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	0719      	lsls	r1, r3, #28
 8009206:	d502      	bpl.n	800920e <_puts_r+0x2e>
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d135      	bne.n	800927a <_puts_r+0x9a>
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f8c5 	bl	80093a0 <__swsetup_r>
 8009216:	b380      	cbz	r0, 800927a <_puts_r+0x9a>
 8009218:	f04f 35ff 	mov.w	r5, #4294967295
 800921c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800921e:	07da      	lsls	r2, r3, #31
 8009220:	d405      	bmi.n	800922e <_puts_r+0x4e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	059b      	lsls	r3, r3, #22
 8009226:	d402      	bmi.n	800922e <_puts_r+0x4e>
 8009228:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922a:	f000 f999 	bl	8009560 <__retarget_lock_release_recursive>
 800922e:	4628      	mov	r0, r5
 8009230:	bd70      	pop	{r4, r5, r6, pc}
 8009232:	2b00      	cmp	r3, #0
 8009234:	da04      	bge.n	8009240 <_puts_r+0x60>
 8009236:	69a2      	ldr	r2, [r4, #24]
 8009238:	429a      	cmp	r2, r3
 800923a:	dc17      	bgt.n	800926c <_puts_r+0x8c>
 800923c:	290a      	cmp	r1, #10
 800923e:	d015      	beq.n	800926c <_puts_r+0x8c>
 8009240:	6823      	ldr	r3, [r4, #0]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	6022      	str	r2, [r4, #0]
 8009246:	7019      	strb	r1, [r3, #0]
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800924e:	3b01      	subs	r3, #1
 8009250:	60a3      	str	r3, [r4, #8]
 8009252:	2900      	cmp	r1, #0
 8009254:	d1ed      	bne.n	8009232 <_puts_r+0x52>
 8009256:	2b00      	cmp	r3, #0
 8009258:	da11      	bge.n	800927e <_puts_r+0x9e>
 800925a:	4622      	mov	r2, r4
 800925c:	210a      	movs	r1, #10
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f85f 	bl	8009322 <__swbuf_r>
 8009264:	3001      	adds	r0, #1
 8009266:	d0d7      	beq.n	8009218 <_puts_r+0x38>
 8009268:	250a      	movs	r5, #10
 800926a:	e7d7      	b.n	800921c <_puts_r+0x3c>
 800926c:	4622      	mov	r2, r4
 800926e:	4628      	mov	r0, r5
 8009270:	f000 f857 	bl	8009322 <__swbuf_r>
 8009274:	3001      	adds	r0, #1
 8009276:	d1e7      	bne.n	8009248 <_puts_r+0x68>
 8009278:	e7ce      	b.n	8009218 <_puts_r+0x38>
 800927a:	3e01      	subs	r6, #1
 800927c:	e7e4      	b.n	8009248 <_puts_r+0x68>
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	6022      	str	r2, [r4, #0]
 8009284:	220a      	movs	r2, #10
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e7ee      	b.n	8009268 <_puts_r+0x88>
	...

0800928c <puts>:
 800928c:	4b02      	ldr	r3, [pc, #8]	@ (8009298 <puts+0xc>)
 800928e:	4601      	mov	r1, r0
 8009290:	6818      	ldr	r0, [r3, #0]
 8009292:	f7ff bfa5 	b.w	80091e0 <_puts_r>
 8009296:	bf00      	nop
 8009298:	20000930 	.word	0x20000930

0800929c <__sread>:
 800929c:	b510      	push	{r4, lr}
 800929e:	460c      	mov	r4, r1
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	f000 f8fc 	bl	80094a0 <_read_r>
 80092a8:	2800      	cmp	r0, #0
 80092aa:	bfab      	itete	ge
 80092ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80092ae:	89a3      	ldrhlt	r3, [r4, #12]
 80092b0:	181b      	addge	r3, r3, r0
 80092b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80092b6:	bfac      	ite	ge
 80092b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80092ba:	81a3      	strhlt	r3, [r4, #12]
 80092bc:	bd10      	pop	{r4, pc}

080092be <__swrite>:
 80092be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092c2:	461f      	mov	r7, r3
 80092c4:	898b      	ldrh	r3, [r1, #12]
 80092c6:	05db      	lsls	r3, r3, #23
 80092c8:	4605      	mov	r5, r0
 80092ca:	460c      	mov	r4, r1
 80092cc:	4616      	mov	r6, r2
 80092ce:	d505      	bpl.n	80092dc <__swrite+0x1e>
 80092d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d4:	2302      	movs	r3, #2
 80092d6:	2200      	movs	r2, #0
 80092d8:	f000 f8d0 	bl	800947c <_lseek_r>
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092e6:	81a3      	strh	r3, [r4, #12]
 80092e8:	4632      	mov	r2, r6
 80092ea:	463b      	mov	r3, r7
 80092ec:	4628      	mov	r0, r5
 80092ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092f2:	f000 b8f7 	b.w	80094e4 <_write_r>

080092f6 <__sseek>:
 80092f6:	b510      	push	{r4, lr}
 80092f8:	460c      	mov	r4, r1
 80092fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fe:	f000 f8bd 	bl	800947c <_lseek_r>
 8009302:	1c43      	adds	r3, r0, #1
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	bf15      	itete	ne
 8009308:	6560      	strne	r0, [r4, #84]	@ 0x54
 800930a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800930e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009312:	81a3      	strheq	r3, [r4, #12]
 8009314:	bf18      	it	ne
 8009316:	81a3      	strhne	r3, [r4, #12]
 8009318:	bd10      	pop	{r4, pc}

0800931a <__sclose>:
 800931a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800931e:	f000 b89d 	b.w	800945c <_close_r>

08009322 <__swbuf_r>:
 8009322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009324:	460e      	mov	r6, r1
 8009326:	4614      	mov	r4, r2
 8009328:	4605      	mov	r5, r0
 800932a:	b118      	cbz	r0, 8009334 <__swbuf_r+0x12>
 800932c:	6a03      	ldr	r3, [r0, #32]
 800932e:	b90b      	cbnz	r3, 8009334 <__swbuf_r+0x12>
 8009330:	f7ff ff0e 	bl	8009150 <__sinit>
 8009334:	69a3      	ldr	r3, [r4, #24]
 8009336:	60a3      	str	r3, [r4, #8]
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	071a      	lsls	r2, r3, #28
 800933c:	d501      	bpl.n	8009342 <__swbuf_r+0x20>
 800933e:	6923      	ldr	r3, [r4, #16]
 8009340:	b943      	cbnz	r3, 8009354 <__swbuf_r+0x32>
 8009342:	4621      	mov	r1, r4
 8009344:	4628      	mov	r0, r5
 8009346:	f000 f82b 	bl	80093a0 <__swsetup_r>
 800934a:	b118      	cbz	r0, 8009354 <__swbuf_r+0x32>
 800934c:	f04f 37ff 	mov.w	r7, #4294967295
 8009350:	4638      	mov	r0, r7
 8009352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	6922      	ldr	r2, [r4, #16]
 8009358:	1a98      	subs	r0, r3, r2
 800935a:	6963      	ldr	r3, [r4, #20]
 800935c:	b2f6      	uxtb	r6, r6
 800935e:	4283      	cmp	r3, r0
 8009360:	4637      	mov	r7, r6
 8009362:	dc05      	bgt.n	8009370 <__swbuf_r+0x4e>
 8009364:	4621      	mov	r1, r4
 8009366:	4628      	mov	r0, r5
 8009368:	f000 fc9a 	bl	8009ca0 <_fflush_r>
 800936c:	2800      	cmp	r0, #0
 800936e:	d1ed      	bne.n	800934c <__swbuf_r+0x2a>
 8009370:	68a3      	ldr	r3, [r4, #8]
 8009372:	3b01      	subs	r3, #1
 8009374:	60a3      	str	r3, [r4, #8]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	6022      	str	r2, [r4, #0]
 800937c:	701e      	strb	r6, [r3, #0]
 800937e:	6962      	ldr	r2, [r4, #20]
 8009380:	1c43      	adds	r3, r0, #1
 8009382:	429a      	cmp	r2, r3
 8009384:	d004      	beq.n	8009390 <__swbuf_r+0x6e>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	07db      	lsls	r3, r3, #31
 800938a:	d5e1      	bpl.n	8009350 <__swbuf_r+0x2e>
 800938c:	2e0a      	cmp	r6, #10
 800938e:	d1df      	bne.n	8009350 <__swbuf_r+0x2e>
 8009390:	4621      	mov	r1, r4
 8009392:	4628      	mov	r0, r5
 8009394:	f000 fc84 	bl	8009ca0 <_fflush_r>
 8009398:	2800      	cmp	r0, #0
 800939a:	d0d9      	beq.n	8009350 <__swbuf_r+0x2e>
 800939c:	e7d6      	b.n	800934c <__swbuf_r+0x2a>
	...

080093a0 <__swsetup_r>:
 80093a0:	b538      	push	{r3, r4, r5, lr}
 80093a2:	4b29      	ldr	r3, [pc, #164]	@ (8009448 <__swsetup_r+0xa8>)
 80093a4:	4605      	mov	r5, r0
 80093a6:	6818      	ldr	r0, [r3, #0]
 80093a8:	460c      	mov	r4, r1
 80093aa:	b118      	cbz	r0, 80093b4 <__swsetup_r+0x14>
 80093ac:	6a03      	ldr	r3, [r0, #32]
 80093ae:	b90b      	cbnz	r3, 80093b4 <__swsetup_r+0x14>
 80093b0:	f7ff fece 	bl	8009150 <__sinit>
 80093b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b8:	0719      	lsls	r1, r3, #28
 80093ba:	d422      	bmi.n	8009402 <__swsetup_r+0x62>
 80093bc:	06da      	lsls	r2, r3, #27
 80093be:	d407      	bmi.n	80093d0 <__swsetup_r+0x30>
 80093c0:	2209      	movs	r2, #9
 80093c2:	602a      	str	r2, [r5, #0]
 80093c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c8:	81a3      	strh	r3, [r4, #12]
 80093ca:	f04f 30ff 	mov.w	r0, #4294967295
 80093ce:	e033      	b.n	8009438 <__swsetup_r+0x98>
 80093d0:	0758      	lsls	r0, r3, #29
 80093d2:	d512      	bpl.n	80093fa <__swsetup_r+0x5a>
 80093d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093d6:	b141      	cbz	r1, 80093ea <__swsetup_r+0x4a>
 80093d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093dc:	4299      	cmp	r1, r3
 80093de:	d002      	beq.n	80093e6 <__swsetup_r+0x46>
 80093e0:	4628      	mov	r0, r5
 80093e2:	f000 f8bf 	bl	8009564 <_free_r>
 80093e6:	2300      	movs	r3, #0
 80093e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80093ea:	89a3      	ldrh	r3, [r4, #12]
 80093ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	2300      	movs	r3, #0
 80093f4:	6063      	str	r3, [r4, #4]
 80093f6:	6923      	ldr	r3, [r4, #16]
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f043 0308 	orr.w	r3, r3, #8
 8009400:	81a3      	strh	r3, [r4, #12]
 8009402:	6923      	ldr	r3, [r4, #16]
 8009404:	b94b      	cbnz	r3, 800941a <__swsetup_r+0x7a>
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800940c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009410:	d003      	beq.n	800941a <__swsetup_r+0x7a>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 fc91 	bl	8009d3c <__smakebuf_r>
 800941a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941e:	f013 0201 	ands.w	r2, r3, #1
 8009422:	d00a      	beq.n	800943a <__swsetup_r+0x9a>
 8009424:	2200      	movs	r2, #0
 8009426:	60a2      	str	r2, [r4, #8]
 8009428:	6962      	ldr	r2, [r4, #20]
 800942a:	4252      	negs	r2, r2
 800942c:	61a2      	str	r2, [r4, #24]
 800942e:	6922      	ldr	r2, [r4, #16]
 8009430:	b942      	cbnz	r2, 8009444 <__swsetup_r+0xa4>
 8009432:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009436:	d1c5      	bne.n	80093c4 <__swsetup_r+0x24>
 8009438:	bd38      	pop	{r3, r4, r5, pc}
 800943a:	0799      	lsls	r1, r3, #30
 800943c:	bf58      	it	pl
 800943e:	6962      	ldrpl	r2, [r4, #20]
 8009440:	60a2      	str	r2, [r4, #8]
 8009442:	e7f4      	b.n	800942e <__swsetup_r+0x8e>
 8009444:	2000      	movs	r0, #0
 8009446:	e7f7      	b.n	8009438 <__swsetup_r+0x98>
 8009448:	20000930 	.word	0x20000930

0800944c <memset>:
 800944c:	4402      	add	r2, r0
 800944e:	4603      	mov	r3, r0
 8009450:	4293      	cmp	r3, r2
 8009452:	d100      	bne.n	8009456 <memset+0xa>
 8009454:	4770      	bx	lr
 8009456:	f803 1b01 	strb.w	r1, [r3], #1
 800945a:	e7f9      	b.n	8009450 <memset+0x4>

0800945c <_close_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4d06      	ldr	r5, [pc, #24]	@ (8009478 <_close_r+0x1c>)
 8009460:	2300      	movs	r3, #0
 8009462:	4604      	mov	r4, r0
 8009464:	4608      	mov	r0, r1
 8009466:	602b      	str	r3, [r5, #0]
 8009468:	f000 fdfa 	bl	800a060 <_close>
 800946c:	1c43      	adds	r3, r0, #1
 800946e:	d102      	bne.n	8009476 <_close_r+0x1a>
 8009470:	682b      	ldr	r3, [r5, #0]
 8009472:	b103      	cbz	r3, 8009476 <_close_r+0x1a>
 8009474:	6023      	str	r3, [r4, #0]
 8009476:	bd38      	pop	{r3, r4, r5, pc}
 8009478:	200014d0 	.word	0x200014d0

0800947c <_lseek_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	4d07      	ldr	r5, [pc, #28]	@ (800949c <_lseek_r+0x20>)
 8009480:	4604      	mov	r4, r0
 8009482:	4608      	mov	r0, r1
 8009484:	4611      	mov	r1, r2
 8009486:	2200      	movs	r2, #0
 8009488:	602a      	str	r2, [r5, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	f000 fe00 	bl	800a090 <_lseek>
 8009490:	1c43      	adds	r3, r0, #1
 8009492:	d102      	bne.n	800949a <_lseek_r+0x1e>
 8009494:	682b      	ldr	r3, [r5, #0]
 8009496:	b103      	cbz	r3, 800949a <_lseek_r+0x1e>
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	bd38      	pop	{r3, r4, r5, pc}
 800949c:	200014d0 	.word	0x200014d0

080094a0 <_read_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4d07      	ldr	r5, [pc, #28]	@ (80094c0 <_read_r+0x20>)
 80094a4:	4604      	mov	r4, r0
 80094a6:	4608      	mov	r0, r1
 80094a8:	4611      	mov	r1, r2
 80094aa:	2200      	movs	r2, #0
 80094ac:	602a      	str	r2, [r5, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	f000 fdf6 	bl	800a0a0 <_read>
 80094b4:	1c43      	adds	r3, r0, #1
 80094b6:	d102      	bne.n	80094be <_read_r+0x1e>
 80094b8:	682b      	ldr	r3, [r5, #0]
 80094ba:	b103      	cbz	r3, 80094be <_read_r+0x1e>
 80094bc:	6023      	str	r3, [r4, #0]
 80094be:	bd38      	pop	{r3, r4, r5, pc}
 80094c0:	200014d0 	.word	0x200014d0

080094c4 <_sbrk_r>:
 80094c4:	b538      	push	{r3, r4, r5, lr}
 80094c6:	4d06      	ldr	r5, [pc, #24]	@ (80094e0 <_sbrk_r+0x1c>)
 80094c8:	2300      	movs	r3, #0
 80094ca:	4604      	mov	r4, r0
 80094cc:	4608      	mov	r0, r1
 80094ce:	602b      	str	r3, [r5, #0]
 80094d0:	f7f8 f8b4 	bl	800163c <_sbrk>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d102      	bne.n	80094de <_sbrk_r+0x1a>
 80094d8:	682b      	ldr	r3, [r5, #0]
 80094da:	b103      	cbz	r3, 80094de <_sbrk_r+0x1a>
 80094dc:	6023      	str	r3, [r4, #0]
 80094de:	bd38      	pop	{r3, r4, r5, pc}
 80094e0:	200014d0 	.word	0x200014d0

080094e4 <_write_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d07      	ldr	r5, [pc, #28]	@ (8009504 <_write_r+0x20>)
 80094e8:	4604      	mov	r4, r0
 80094ea:	4608      	mov	r0, r1
 80094ec:	4611      	mov	r1, r2
 80094ee:	2200      	movs	r2, #0
 80094f0:	602a      	str	r2, [r5, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	f000 fddc 	bl	800a0b0 <_write>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_write_r+0x1e>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_write_r+0x1e>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	200014d0 	.word	0x200014d0

08009508 <__errno>:
 8009508:	4b01      	ldr	r3, [pc, #4]	@ (8009510 <__errno+0x8>)
 800950a:	6818      	ldr	r0, [r3, #0]
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	20000930 	.word	0x20000930

08009514 <__libc_init_array>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4d0d      	ldr	r5, [pc, #52]	@ (800954c <__libc_init_array+0x38>)
 8009518:	4c0d      	ldr	r4, [pc, #52]	@ (8009550 <__libc_init_array+0x3c>)
 800951a:	1b64      	subs	r4, r4, r5
 800951c:	10a4      	asrs	r4, r4, #2
 800951e:	2600      	movs	r6, #0
 8009520:	42a6      	cmp	r6, r4
 8009522:	d109      	bne.n	8009538 <__libc_init_array+0x24>
 8009524:	4d0b      	ldr	r5, [pc, #44]	@ (8009554 <__libc_init_array+0x40>)
 8009526:	4c0c      	ldr	r4, [pc, #48]	@ (8009558 <__libc_init_array+0x44>)
 8009528:	f000 fdca 	bl	800a0c0 <_init>
 800952c:	1b64      	subs	r4, r4, r5
 800952e:	10a4      	asrs	r4, r4, #2
 8009530:	2600      	movs	r6, #0
 8009532:	42a6      	cmp	r6, r4
 8009534:	d105      	bne.n	8009542 <__libc_init_array+0x2e>
 8009536:	bd70      	pop	{r4, r5, r6, pc}
 8009538:	f855 3b04 	ldr.w	r3, [r5], #4
 800953c:	4798      	blx	r3
 800953e:	3601      	adds	r6, #1
 8009540:	e7ee      	b.n	8009520 <__libc_init_array+0xc>
 8009542:	f855 3b04 	ldr.w	r3, [r5], #4
 8009546:	4798      	blx	r3
 8009548:	3601      	adds	r6, #1
 800954a:	e7f2      	b.n	8009532 <__libc_init_array+0x1e>
 800954c:	0800d4ec 	.word	0x0800d4ec
 8009550:	0800d4ec 	.word	0x0800d4ec
 8009554:	0800d4ec 	.word	0x0800d4ec
 8009558:	0800d4f0 	.word	0x0800d4f0

0800955c <__retarget_lock_init_recursive>:
 800955c:	4770      	bx	lr

0800955e <__retarget_lock_acquire_recursive>:
 800955e:	4770      	bx	lr

08009560 <__retarget_lock_release_recursive>:
 8009560:	4770      	bx	lr
	...

08009564 <_free_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4605      	mov	r5, r0
 8009568:	2900      	cmp	r1, #0
 800956a:	d041      	beq.n	80095f0 <_free_r+0x8c>
 800956c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009570:	1f0c      	subs	r4, r1, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	bfb8      	it	lt
 8009576:	18e4      	addlt	r4, r4, r3
 8009578:	f7ff fd52 	bl	8009020 <__malloc_lock>
 800957c:	4a1d      	ldr	r2, [pc, #116]	@ (80095f4 <_free_r+0x90>)
 800957e:	6813      	ldr	r3, [r2, #0]
 8009580:	b933      	cbnz	r3, 8009590 <_free_r+0x2c>
 8009582:	6063      	str	r3, [r4, #4]
 8009584:	6014      	str	r4, [r2, #0]
 8009586:	4628      	mov	r0, r5
 8009588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800958c:	f7ff bd4e 	b.w	800902c <__malloc_unlock>
 8009590:	42a3      	cmp	r3, r4
 8009592:	d908      	bls.n	80095a6 <_free_r+0x42>
 8009594:	6820      	ldr	r0, [r4, #0]
 8009596:	1821      	adds	r1, r4, r0
 8009598:	428b      	cmp	r3, r1
 800959a:	bf01      	itttt	eq
 800959c:	6819      	ldreq	r1, [r3, #0]
 800959e:	685b      	ldreq	r3, [r3, #4]
 80095a0:	1809      	addeq	r1, r1, r0
 80095a2:	6021      	streq	r1, [r4, #0]
 80095a4:	e7ed      	b.n	8009582 <_free_r+0x1e>
 80095a6:	461a      	mov	r2, r3
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	b10b      	cbz	r3, 80095b0 <_free_r+0x4c>
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	d9fa      	bls.n	80095a6 <_free_r+0x42>
 80095b0:	6811      	ldr	r1, [r2, #0]
 80095b2:	1850      	adds	r0, r2, r1
 80095b4:	42a0      	cmp	r0, r4
 80095b6:	d10b      	bne.n	80095d0 <_free_r+0x6c>
 80095b8:	6820      	ldr	r0, [r4, #0]
 80095ba:	4401      	add	r1, r0
 80095bc:	1850      	adds	r0, r2, r1
 80095be:	4283      	cmp	r3, r0
 80095c0:	6011      	str	r1, [r2, #0]
 80095c2:	d1e0      	bne.n	8009586 <_free_r+0x22>
 80095c4:	6818      	ldr	r0, [r3, #0]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	6053      	str	r3, [r2, #4]
 80095ca:	4408      	add	r0, r1
 80095cc:	6010      	str	r0, [r2, #0]
 80095ce:	e7da      	b.n	8009586 <_free_r+0x22>
 80095d0:	d902      	bls.n	80095d8 <_free_r+0x74>
 80095d2:	230c      	movs	r3, #12
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	e7d6      	b.n	8009586 <_free_r+0x22>
 80095d8:	6820      	ldr	r0, [r4, #0]
 80095da:	1821      	adds	r1, r4, r0
 80095dc:	428b      	cmp	r3, r1
 80095de:	bf04      	itt	eq
 80095e0:	6819      	ldreq	r1, [r3, #0]
 80095e2:	685b      	ldreq	r3, [r3, #4]
 80095e4:	6063      	str	r3, [r4, #4]
 80095e6:	bf04      	itt	eq
 80095e8:	1809      	addeq	r1, r1, r0
 80095ea:	6021      	streq	r1, [r4, #0]
 80095ec:	6054      	str	r4, [r2, #4]
 80095ee:	e7ca      	b.n	8009586 <_free_r+0x22>
 80095f0:	bd38      	pop	{r3, r4, r5, pc}
 80095f2:	bf00      	nop
 80095f4:	20001390 	.word	0x20001390

080095f8 <__sfputc_r>:
 80095f8:	6893      	ldr	r3, [r2, #8]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	b410      	push	{r4}
 8009600:	6093      	str	r3, [r2, #8]
 8009602:	da08      	bge.n	8009616 <__sfputc_r+0x1e>
 8009604:	6994      	ldr	r4, [r2, #24]
 8009606:	42a3      	cmp	r3, r4
 8009608:	db01      	blt.n	800960e <__sfputc_r+0x16>
 800960a:	290a      	cmp	r1, #10
 800960c:	d103      	bne.n	8009616 <__sfputc_r+0x1e>
 800960e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009612:	f7ff be86 	b.w	8009322 <__swbuf_r>
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	1c58      	adds	r0, r3, #1
 800961a:	6010      	str	r0, [r2, #0]
 800961c:	7019      	strb	r1, [r3, #0]
 800961e:	4608      	mov	r0, r1
 8009620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009624:	4770      	bx	lr

08009626 <__sfputs_r>:
 8009626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009628:	4606      	mov	r6, r0
 800962a:	460f      	mov	r7, r1
 800962c:	4614      	mov	r4, r2
 800962e:	18d5      	adds	r5, r2, r3
 8009630:	42ac      	cmp	r4, r5
 8009632:	d101      	bne.n	8009638 <__sfputs_r+0x12>
 8009634:	2000      	movs	r0, #0
 8009636:	e007      	b.n	8009648 <__sfputs_r+0x22>
 8009638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963c:	463a      	mov	r2, r7
 800963e:	4630      	mov	r0, r6
 8009640:	f7ff ffda 	bl	80095f8 <__sfputc_r>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d1f3      	bne.n	8009630 <__sfputs_r+0xa>
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800964c <_vfiprintf_r>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	460d      	mov	r5, r1
 8009652:	b09d      	sub	sp, #116	@ 0x74
 8009654:	4614      	mov	r4, r2
 8009656:	4698      	mov	r8, r3
 8009658:	4606      	mov	r6, r0
 800965a:	b118      	cbz	r0, 8009664 <_vfiprintf_r+0x18>
 800965c:	6a03      	ldr	r3, [r0, #32]
 800965e:	b90b      	cbnz	r3, 8009664 <_vfiprintf_r+0x18>
 8009660:	f7ff fd76 	bl	8009150 <__sinit>
 8009664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009666:	07d9      	lsls	r1, r3, #31
 8009668:	d405      	bmi.n	8009676 <_vfiprintf_r+0x2a>
 800966a:	89ab      	ldrh	r3, [r5, #12]
 800966c:	059a      	lsls	r2, r3, #22
 800966e:	d402      	bmi.n	8009676 <_vfiprintf_r+0x2a>
 8009670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009672:	f7ff ff74 	bl	800955e <__retarget_lock_acquire_recursive>
 8009676:	89ab      	ldrh	r3, [r5, #12]
 8009678:	071b      	lsls	r3, r3, #28
 800967a:	d501      	bpl.n	8009680 <_vfiprintf_r+0x34>
 800967c:	692b      	ldr	r3, [r5, #16]
 800967e:	b99b      	cbnz	r3, 80096a8 <_vfiprintf_r+0x5c>
 8009680:	4629      	mov	r1, r5
 8009682:	4630      	mov	r0, r6
 8009684:	f7ff fe8c 	bl	80093a0 <__swsetup_r>
 8009688:	b170      	cbz	r0, 80096a8 <_vfiprintf_r+0x5c>
 800968a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800968c:	07dc      	lsls	r4, r3, #31
 800968e:	d504      	bpl.n	800969a <_vfiprintf_r+0x4e>
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	b01d      	add	sp, #116	@ 0x74
 8009696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969a:	89ab      	ldrh	r3, [r5, #12]
 800969c:	0598      	lsls	r0, r3, #22
 800969e:	d4f7      	bmi.n	8009690 <_vfiprintf_r+0x44>
 80096a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80096a2:	f7ff ff5d 	bl	8009560 <__retarget_lock_release_recursive>
 80096a6:	e7f3      	b.n	8009690 <_vfiprintf_r+0x44>
 80096a8:	2300      	movs	r3, #0
 80096aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80096ac:	2320      	movs	r3, #32
 80096ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80096b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b6:	2330      	movs	r3, #48	@ 0x30
 80096b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009868 <_vfiprintf_r+0x21c>
 80096bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096c0:	f04f 0901 	mov.w	r9, #1
 80096c4:	4623      	mov	r3, r4
 80096c6:	469a      	mov	sl, r3
 80096c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096cc:	b10a      	cbz	r2, 80096d2 <_vfiprintf_r+0x86>
 80096ce:	2a25      	cmp	r2, #37	@ 0x25
 80096d0:	d1f9      	bne.n	80096c6 <_vfiprintf_r+0x7a>
 80096d2:	ebba 0b04 	subs.w	fp, sl, r4
 80096d6:	d00b      	beq.n	80096f0 <_vfiprintf_r+0xa4>
 80096d8:	465b      	mov	r3, fp
 80096da:	4622      	mov	r2, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff ffa1 	bl	8009626 <__sfputs_r>
 80096e4:	3001      	adds	r0, #1
 80096e6:	f000 80a7 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096ec:	445a      	add	r2, fp
 80096ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80096f0:	f89a 3000 	ldrb.w	r3, [sl]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 809f 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096fa:	2300      	movs	r3, #0
 80096fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009704:	f10a 0a01 	add.w	sl, sl, #1
 8009708:	9304      	str	r3, [sp, #16]
 800970a:	9307      	str	r3, [sp, #28]
 800970c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009710:	931a      	str	r3, [sp, #104]	@ 0x68
 8009712:	4654      	mov	r4, sl
 8009714:	2205      	movs	r2, #5
 8009716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800971a:	4853      	ldr	r0, [pc, #332]	@ (8009868 <_vfiprintf_r+0x21c>)
 800971c:	f7f6 fd70 	bl	8000200 <memchr>
 8009720:	9a04      	ldr	r2, [sp, #16]
 8009722:	b9d8      	cbnz	r0, 800975c <_vfiprintf_r+0x110>
 8009724:	06d1      	lsls	r1, r2, #27
 8009726:	bf44      	itt	mi
 8009728:	2320      	movmi	r3, #32
 800972a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800972e:	0713      	lsls	r3, r2, #28
 8009730:	bf44      	itt	mi
 8009732:	232b      	movmi	r3, #43	@ 0x2b
 8009734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009738:	f89a 3000 	ldrb.w	r3, [sl]
 800973c:	2b2a      	cmp	r3, #42	@ 0x2a
 800973e:	d015      	beq.n	800976c <_vfiprintf_r+0x120>
 8009740:	9a07      	ldr	r2, [sp, #28]
 8009742:	4654      	mov	r4, sl
 8009744:	2000      	movs	r0, #0
 8009746:	f04f 0c0a 	mov.w	ip, #10
 800974a:	4621      	mov	r1, r4
 800974c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009750:	3b30      	subs	r3, #48	@ 0x30
 8009752:	2b09      	cmp	r3, #9
 8009754:	d94b      	bls.n	80097ee <_vfiprintf_r+0x1a2>
 8009756:	b1b0      	cbz	r0, 8009786 <_vfiprintf_r+0x13a>
 8009758:	9207      	str	r2, [sp, #28]
 800975a:	e014      	b.n	8009786 <_vfiprintf_r+0x13a>
 800975c:	eba0 0308 	sub.w	r3, r0, r8
 8009760:	fa09 f303 	lsl.w	r3, r9, r3
 8009764:	4313      	orrs	r3, r2
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	46a2      	mov	sl, r4
 800976a:	e7d2      	b.n	8009712 <_vfiprintf_r+0xc6>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	1d19      	adds	r1, r3, #4
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	9103      	str	r1, [sp, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	bfbb      	ittet	lt
 8009778:	425b      	neglt	r3, r3
 800977a:	f042 0202 	orrlt.w	r2, r2, #2
 800977e:	9307      	strge	r3, [sp, #28]
 8009780:	9307      	strlt	r3, [sp, #28]
 8009782:	bfb8      	it	lt
 8009784:	9204      	strlt	r2, [sp, #16]
 8009786:	7823      	ldrb	r3, [r4, #0]
 8009788:	2b2e      	cmp	r3, #46	@ 0x2e
 800978a:	d10a      	bne.n	80097a2 <_vfiprintf_r+0x156>
 800978c:	7863      	ldrb	r3, [r4, #1]
 800978e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009790:	d132      	bne.n	80097f8 <_vfiprintf_r+0x1ac>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	9203      	str	r2, [sp, #12]
 800979a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800979e:	3402      	adds	r4, #2
 80097a0:	9305      	str	r3, [sp, #20]
 80097a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009878 <_vfiprintf_r+0x22c>
 80097a6:	7821      	ldrb	r1, [r4, #0]
 80097a8:	2203      	movs	r2, #3
 80097aa:	4650      	mov	r0, sl
 80097ac:	f7f6 fd28 	bl	8000200 <memchr>
 80097b0:	b138      	cbz	r0, 80097c2 <_vfiprintf_r+0x176>
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	eba0 000a 	sub.w	r0, r0, sl
 80097b8:	2240      	movs	r2, #64	@ 0x40
 80097ba:	4082      	lsls	r2, r0
 80097bc:	4313      	orrs	r3, r2
 80097be:	3401      	adds	r4, #1
 80097c0:	9304      	str	r3, [sp, #16]
 80097c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c6:	4829      	ldr	r0, [pc, #164]	@ (800986c <_vfiprintf_r+0x220>)
 80097c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097cc:	2206      	movs	r2, #6
 80097ce:	f7f6 fd17 	bl	8000200 <memchr>
 80097d2:	2800      	cmp	r0, #0
 80097d4:	d03f      	beq.n	8009856 <_vfiprintf_r+0x20a>
 80097d6:	4b26      	ldr	r3, [pc, #152]	@ (8009870 <_vfiprintf_r+0x224>)
 80097d8:	bb1b      	cbnz	r3, 8009822 <_vfiprintf_r+0x1d6>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	3307      	adds	r3, #7
 80097de:	f023 0307 	bic.w	r3, r3, #7
 80097e2:	3308      	adds	r3, #8
 80097e4:	9303      	str	r3, [sp, #12]
 80097e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e8:	443b      	add	r3, r7
 80097ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ec:	e76a      	b.n	80096c4 <_vfiprintf_r+0x78>
 80097ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f2:	460c      	mov	r4, r1
 80097f4:	2001      	movs	r0, #1
 80097f6:	e7a8      	b.n	800974a <_vfiprintf_r+0xfe>
 80097f8:	2300      	movs	r3, #0
 80097fa:	3401      	adds	r4, #1
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	4619      	mov	r1, r3
 8009800:	f04f 0c0a 	mov.w	ip, #10
 8009804:	4620      	mov	r0, r4
 8009806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800980a:	3a30      	subs	r2, #48	@ 0x30
 800980c:	2a09      	cmp	r2, #9
 800980e:	d903      	bls.n	8009818 <_vfiprintf_r+0x1cc>
 8009810:	2b00      	cmp	r3, #0
 8009812:	d0c6      	beq.n	80097a2 <_vfiprintf_r+0x156>
 8009814:	9105      	str	r1, [sp, #20]
 8009816:	e7c4      	b.n	80097a2 <_vfiprintf_r+0x156>
 8009818:	fb0c 2101 	mla	r1, ip, r1, r2
 800981c:	4604      	mov	r4, r0
 800981e:	2301      	movs	r3, #1
 8009820:	e7f0      	b.n	8009804 <_vfiprintf_r+0x1b8>
 8009822:	ab03      	add	r3, sp, #12
 8009824:	9300      	str	r3, [sp, #0]
 8009826:	462a      	mov	r2, r5
 8009828:	4b12      	ldr	r3, [pc, #72]	@ (8009874 <_vfiprintf_r+0x228>)
 800982a:	a904      	add	r1, sp, #16
 800982c:	4630      	mov	r0, r6
 800982e:	f3af 8000 	nop.w
 8009832:	4607      	mov	r7, r0
 8009834:	1c78      	adds	r0, r7, #1
 8009836:	d1d6      	bne.n	80097e6 <_vfiprintf_r+0x19a>
 8009838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800983a:	07d9      	lsls	r1, r3, #31
 800983c:	d405      	bmi.n	800984a <_vfiprintf_r+0x1fe>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	059a      	lsls	r2, r3, #22
 8009842:	d402      	bmi.n	800984a <_vfiprintf_r+0x1fe>
 8009844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009846:	f7ff fe8b 	bl	8009560 <__retarget_lock_release_recursive>
 800984a:	89ab      	ldrh	r3, [r5, #12]
 800984c:	065b      	lsls	r3, r3, #25
 800984e:	f53f af1f 	bmi.w	8009690 <_vfiprintf_r+0x44>
 8009852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009854:	e71e      	b.n	8009694 <_vfiprintf_r+0x48>
 8009856:	ab03      	add	r3, sp, #12
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	462a      	mov	r2, r5
 800985c:	4b05      	ldr	r3, [pc, #20]	@ (8009874 <_vfiprintf_r+0x228>)
 800985e:	a904      	add	r1, sp, #16
 8009860:	4630      	mov	r0, r6
 8009862:	f000 f879 	bl	8009958 <_printf_i>
 8009866:	e7e4      	b.n	8009832 <_vfiprintf_r+0x1e6>
 8009868:	0800d498 	.word	0x0800d498
 800986c:	0800d4a2 	.word	0x0800d4a2
 8009870:	00000000 	.word	0x00000000
 8009874:	08009627 	.word	0x08009627
 8009878:	0800d49e 	.word	0x0800d49e

0800987c <_printf_common>:
 800987c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009880:	4616      	mov	r6, r2
 8009882:	4698      	mov	r8, r3
 8009884:	688a      	ldr	r2, [r1, #8]
 8009886:	690b      	ldr	r3, [r1, #16]
 8009888:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800988c:	4293      	cmp	r3, r2
 800988e:	bfb8      	it	lt
 8009890:	4613      	movlt	r3, r2
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009898:	4607      	mov	r7, r0
 800989a:	460c      	mov	r4, r1
 800989c:	b10a      	cbz	r2, 80098a2 <_printf_common+0x26>
 800989e:	3301      	adds	r3, #1
 80098a0:	6033      	str	r3, [r6, #0]
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	0699      	lsls	r1, r3, #26
 80098a6:	bf42      	ittt	mi
 80098a8:	6833      	ldrmi	r3, [r6, #0]
 80098aa:	3302      	addmi	r3, #2
 80098ac:	6033      	strmi	r3, [r6, #0]
 80098ae:	6825      	ldr	r5, [r4, #0]
 80098b0:	f015 0506 	ands.w	r5, r5, #6
 80098b4:	d106      	bne.n	80098c4 <_printf_common+0x48>
 80098b6:	f104 0a19 	add.w	sl, r4, #25
 80098ba:	68e3      	ldr	r3, [r4, #12]
 80098bc:	6832      	ldr	r2, [r6, #0]
 80098be:	1a9b      	subs	r3, r3, r2
 80098c0:	42ab      	cmp	r3, r5
 80098c2:	dc26      	bgt.n	8009912 <_printf_common+0x96>
 80098c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	3b00      	subs	r3, #0
 80098cc:	bf18      	it	ne
 80098ce:	2301      	movne	r3, #1
 80098d0:	0692      	lsls	r2, r2, #26
 80098d2:	d42b      	bmi.n	800992c <_printf_common+0xb0>
 80098d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80098d8:	4641      	mov	r1, r8
 80098da:	4638      	mov	r0, r7
 80098dc:	47c8      	blx	r9
 80098de:	3001      	adds	r0, #1
 80098e0:	d01e      	beq.n	8009920 <_printf_common+0xa4>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	6922      	ldr	r2, [r4, #16]
 80098e6:	f003 0306 	and.w	r3, r3, #6
 80098ea:	2b04      	cmp	r3, #4
 80098ec:	bf02      	ittt	eq
 80098ee:	68e5      	ldreq	r5, [r4, #12]
 80098f0:	6833      	ldreq	r3, [r6, #0]
 80098f2:	1aed      	subeq	r5, r5, r3
 80098f4:	68a3      	ldr	r3, [r4, #8]
 80098f6:	bf0c      	ite	eq
 80098f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098fc:	2500      	movne	r5, #0
 80098fe:	4293      	cmp	r3, r2
 8009900:	bfc4      	itt	gt
 8009902:	1a9b      	subgt	r3, r3, r2
 8009904:	18ed      	addgt	r5, r5, r3
 8009906:	2600      	movs	r6, #0
 8009908:	341a      	adds	r4, #26
 800990a:	42b5      	cmp	r5, r6
 800990c:	d11a      	bne.n	8009944 <_printf_common+0xc8>
 800990e:	2000      	movs	r0, #0
 8009910:	e008      	b.n	8009924 <_printf_common+0xa8>
 8009912:	2301      	movs	r3, #1
 8009914:	4652      	mov	r2, sl
 8009916:	4641      	mov	r1, r8
 8009918:	4638      	mov	r0, r7
 800991a:	47c8      	blx	r9
 800991c:	3001      	adds	r0, #1
 800991e:	d103      	bne.n	8009928 <_printf_common+0xac>
 8009920:	f04f 30ff 	mov.w	r0, #4294967295
 8009924:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009928:	3501      	adds	r5, #1
 800992a:	e7c6      	b.n	80098ba <_printf_common+0x3e>
 800992c:	18e1      	adds	r1, r4, r3
 800992e:	1c5a      	adds	r2, r3, #1
 8009930:	2030      	movs	r0, #48	@ 0x30
 8009932:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009936:	4422      	add	r2, r4
 8009938:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800993c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009940:	3302      	adds	r3, #2
 8009942:	e7c7      	b.n	80098d4 <_printf_common+0x58>
 8009944:	2301      	movs	r3, #1
 8009946:	4622      	mov	r2, r4
 8009948:	4641      	mov	r1, r8
 800994a:	4638      	mov	r0, r7
 800994c:	47c8      	blx	r9
 800994e:	3001      	adds	r0, #1
 8009950:	d0e6      	beq.n	8009920 <_printf_common+0xa4>
 8009952:	3601      	adds	r6, #1
 8009954:	e7d9      	b.n	800990a <_printf_common+0x8e>
	...

08009958 <_printf_i>:
 8009958:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800995c:	7e0f      	ldrb	r7, [r1, #24]
 800995e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009960:	2f78      	cmp	r7, #120	@ 0x78
 8009962:	4691      	mov	r9, r2
 8009964:	4680      	mov	r8, r0
 8009966:	460c      	mov	r4, r1
 8009968:	469a      	mov	sl, r3
 800996a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800996e:	d807      	bhi.n	8009980 <_printf_i+0x28>
 8009970:	2f62      	cmp	r7, #98	@ 0x62
 8009972:	d80a      	bhi.n	800998a <_printf_i+0x32>
 8009974:	2f00      	cmp	r7, #0
 8009976:	f000 80d2 	beq.w	8009b1e <_printf_i+0x1c6>
 800997a:	2f58      	cmp	r7, #88	@ 0x58
 800997c:	f000 80b9 	beq.w	8009af2 <_printf_i+0x19a>
 8009980:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009984:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009988:	e03a      	b.n	8009a00 <_printf_i+0xa8>
 800998a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800998e:	2b15      	cmp	r3, #21
 8009990:	d8f6      	bhi.n	8009980 <_printf_i+0x28>
 8009992:	a101      	add	r1, pc, #4	@ (adr r1, 8009998 <_printf_i+0x40>)
 8009994:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009998:	080099f1 	.word	0x080099f1
 800999c:	08009a05 	.word	0x08009a05
 80099a0:	08009981 	.word	0x08009981
 80099a4:	08009981 	.word	0x08009981
 80099a8:	08009981 	.word	0x08009981
 80099ac:	08009981 	.word	0x08009981
 80099b0:	08009a05 	.word	0x08009a05
 80099b4:	08009981 	.word	0x08009981
 80099b8:	08009981 	.word	0x08009981
 80099bc:	08009981 	.word	0x08009981
 80099c0:	08009981 	.word	0x08009981
 80099c4:	08009b05 	.word	0x08009b05
 80099c8:	08009a2f 	.word	0x08009a2f
 80099cc:	08009abf 	.word	0x08009abf
 80099d0:	08009981 	.word	0x08009981
 80099d4:	08009981 	.word	0x08009981
 80099d8:	08009b27 	.word	0x08009b27
 80099dc:	08009981 	.word	0x08009981
 80099e0:	08009a2f 	.word	0x08009a2f
 80099e4:	08009981 	.word	0x08009981
 80099e8:	08009981 	.word	0x08009981
 80099ec:	08009ac7 	.word	0x08009ac7
 80099f0:	6833      	ldr	r3, [r6, #0]
 80099f2:	1d1a      	adds	r2, r3, #4
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	6032      	str	r2, [r6, #0]
 80099f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80099fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009a00:	2301      	movs	r3, #1
 8009a02:	e09d      	b.n	8009b40 <_printf_i+0x1e8>
 8009a04:	6833      	ldr	r3, [r6, #0]
 8009a06:	6820      	ldr	r0, [r4, #0]
 8009a08:	1d19      	adds	r1, r3, #4
 8009a0a:	6031      	str	r1, [r6, #0]
 8009a0c:	0606      	lsls	r6, r0, #24
 8009a0e:	d501      	bpl.n	8009a14 <_printf_i+0xbc>
 8009a10:	681d      	ldr	r5, [r3, #0]
 8009a12:	e003      	b.n	8009a1c <_printf_i+0xc4>
 8009a14:	0645      	lsls	r5, r0, #25
 8009a16:	d5fb      	bpl.n	8009a10 <_printf_i+0xb8>
 8009a18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009a1c:	2d00      	cmp	r5, #0
 8009a1e:	da03      	bge.n	8009a28 <_printf_i+0xd0>
 8009a20:	232d      	movs	r3, #45	@ 0x2d
 8009a22:	426d      	negs	r5, r5
 8009a24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a28:	4859      	ldr	r0, [pc, #356]	@ (8009b90 <_printf_i+0x238>)
 8009a2a:	230a      	movs	r3, #10
 8009a2c:	e011      	b.n	8009a52 <_printf_i+0xfa>
 8009a2e:	6821      	ldr	r1, [r4, #0]
 8009a30:	6833      	ldr	r3, [r6, #0]
 8009a32:	0608      	lsls	r0, r1, #24
 8009a34:	f853 5b04 	ldr.w	r5, [r3], #4
 8009a38:	d402      	bmi.n	8009a40 <_printf_i+0xe8>
 8009a3a:	0649      	lsls	r1, r1, #25
 8009a3c:	bf48      	it	mi
 8009a3e:	b2ad      	uxthmi	r5, r5
 8009a40:	2f6f      	cmp	r7, #111	@ 0x6f
 8009a42:	4853      	ldr	r0, [pc, #332]	@ (8009b90 <_printf_i+0x238>)
 8009a44:	6033      	str	r3, [r6, #0]
 8009a46:	bf14      	ite	ne
 8009a48:	230a      	movne	r3, #10
 8009a4a:	2308      	moveq	r3, #8
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009a52:	6866      	ldr	r6, [r4, #4]
 8009a54:	60a6      	str	r6, [r4, #8]
 8009a56:	2e00      	cmp	r6, #0
 8009a58:	bfa2      	ittt	ge
 8009a5a:	6821      	ldrge	r1, [r4, #0]
 8009a5c:	f021 0104 	bicge.w	r1, r1, #4
 8009a60:	6021      	strge	r1, [r4, #0]
 8009a62:	b90d      	cbnz	r5, 8009a68 <_printf_i+0x110>
 8009a64:	2e00      	cmp	r6, #0
 8009a66:	d04b      	beq.n	8009b00 <_printf_i+0x1a8>
 8009a68:	4616      	mov	r6, r2
 8009a6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a6e:	fb03 5711 	mls	r7, r3, r1, r5
 8009a72:	5dc7      	ldrb	r7, [r0, r7]
 8009a74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a78:	462f      	mov	r7, r5
 8009a7a:	42bb      	cmp	r3, r7
 8009a7c:	460d      	mov	r5, r1
 8009a7e:	d9f4      	bls.n	8009a6a <_printf_i+0x112>
 8009a80:	2b08      	cmp	r3, #8
 8009a82:	d10b      	bne.n	8009a9c <_printf_i+0x144>
 8009a84:	6823      	ldr	r3, [r4, #0]
 8009a86:	07df      	lsls	r7, r3, #31
 8009a88:	d508      	bpl.n	8009a9c <_printf_i+0x144>
 8009a8a:	6923      	ldr	r3, [r4, #16]
 8009a8c:	6861      	ldr	r1, [r4, #4]
 8009a8e:	4299      	cmp	r1, r3
 8009a90:	bfde      	ittt	le
 8009a92:	2330      	movle	r3, #48	@ 0x30
 8009a94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a9c:	1b92      	subs	r2, r2, r6
 8009a9e:	6122      	str	r2, [r4, #16]
 8009aa0:	f8cd a000 	str.w	sl, [sp]
 8009aa4:	464b      	mov	r3, r9
 8009aa6:	aa03      	add	r2, sp, #12
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f7ff fee6 	bl	800987c <_printf_common>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d14a      	bne.n	8009b4a <_printf_i+0x1f2>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	b004      	add	sp, #16
 8009aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abe:	6823      	ldr	r3, [r4, #0]
 8009ac0:	f043 0320 	orr.w	r3, r3, #32
 8009ac4:	6023      	str	r3, [r4, #0]
 8009ac6:	4833      	ldr	r0, [pc, #204]	@ (8009b94 <_printf_i+0x23c>)
 8009ac8:	2778      	movs	r7, #120	@ 0x78
 8009aca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ace:	6823      	ldr	r3, [r4, #0]
 8009ad0:	6831      	ldr	r1, [r6, #0]
 8009ad2:	061f      	lsls	r7, r3, #24
 8009ad4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ad8:	d402      	bmi.n	8009ae0 <_printf_i+0x188>
 8009ada:	065f      	lsls	r7, r3, #25
 8009adc:	bf48      	it	mi
 8009ade:	b2ad      	uxthmi	r5, r5
 8009ae0:	6031      	str	r1, [r6, #0]
 8009ae2:	07d9      	lsls	r1, r3, #31
 8009ae4:	bf44      	itt	mi
 8009ae6:	f043 0320 	orrmi.w	r3, r3, #32
 8009aea:	6023      	strmi	r3, [r4, #0]
 8009aec:	b11d      	cbz	r5, 8009af6 <_printf_i+0x19e>
 8009aee:	2310      	movs	r3, #16
 8009af0:	e7ac      	b.n	8009a4c <_printf_i+0xf4>
 8009af2:	4827      	ldr	r0, [pc, #156]	@ (8009b90 <_printf_i+0x238>)
 8009af4:	e7e9      	b.n	8009aca <_printf_i+0x172>
 8009af6:	6823      	ldr	r3, [r4, #0]
 8009af8:	f023 0320 	bic.w	r3, r3, #32
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	e7f6      	b.n	8009aee <_printf_i+0x196>
 8009b00:	4616      	mov	r6, r2
 8009b02:	e7bd      	b.n	8009a80 <_printf_i+0x128>
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	6825      	ldr	r5, [r4, #0]
 8009b08:	6961      	ldr	r1, [r4, #20]
 8009b0a:	1d18      	adds	r0, r3, #4
 8009b0c:	6030      	str	r0, [r6, #0]
 8009b0e:	062e      	lsls	r6, r5, #24
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	d501      	bpl.n	8009b18 <_printf_i+0x1c0>
 8009b14:	6019      	str	r1, [r3, #0]
 8009b16:	e002      	b.n	8009b1e <_printf_i+0x1c6>
 8009b18:	0668      	lsls	r0, r5, #25
 8009b1a:	d5fb      	bpl.n	8009b14 <_printf_i+0x1bc>
 8009b1c:	8019      	strh	r1, [r3, #0]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	6123      	str	r3, [r4, #16]
 8009b22:	4616      	mov	r6, r2
 8009b24:	e7bc      	b.n	8009aa0 <_printf_i+0x148>
 8009b26:	6833      	ldr	r3, [r6, #0]
 8009b28:	1d1a      	adds	r2, r3, #4
 8009b2a:	6032      	str	r2, [r6, #0]
 8009b2c:	681e      	ldr	r6, [r3, #0]
 8009b2e:	6862      	ldr	r2, [r4, #4]
 8009b30:	2100      	movs	r1, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	f7f6 fb64 	bl	8000200 <memchr>
 8009b38:	b108      	cbz	r0, 8009b3e <_printf_i+0x1e6>
 8009b3a:	1b80      	subs	r0, r0, r6
 8009b3c:	6060      	str	r0, [r4, #4]
 8009b3e:	6863      	ldr	r3, [r4, #4]
 8009b40:	6123      	str	r3, [r4, #16]
 8009b42:	2300      	movs	r3, #0
 8009b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b48:	e7aa      	b.n	8009aa0 <_printf_i+0x148>
 8009b4a:	6923      	ldr	r3, [r4, #16]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4640      	mov	r0, r8
 8009b52:	47d0      	blx	sl
 8009b54:	3001      	adds	r0, #1
 8009b56:	d0ad      	beq.n	8009ab4 <_printf_i+0x15c>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	079b      	lsls	r3, r3, #30
 8009b5c:	d413      	bmi.n	8009b86 <_printf_i+0x22e>
 8009b5e:	68e0      	ldr	r0, [r4, #12]
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	4298      	cmp	r0, r3
 8009b64:	bfb8      	it	lt
 8009b66:	4618      	movlt	r0, r3
 8009b68:	e7a6      	b.n	8009ab8 <_printf_i+0x160>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	4649      	mov	r1, r9
 8009b70:	4640      	mov	r0, r8
 8009b72:	47d0      	blx	sl
 8009b74:	3001      	adds	r0, #1
 8009b76:	d09d      	beq.n	8009ab4 <_printf_i+0x15c>
 8009b78:	3501      	adds	r5, #1
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	9903      	ldr	r1, [sp, #12]
 8009b7e:	1a5b      	subs	r3, r3, r1
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	dcf2      	bgt.n	8009b6a <_printf_i+0x212>
 8009b84:	e7eb      	b.n	8009b5e <_printf_i+0x206>
 8009b86:	2500      	movs	r5, #0
 8009b88:	f104 0619 	add.w	r6, r4, #25
 8009b8c:	e7f5      	b.n	8009b7a <_printf_i+0x222>
 8009b8e:	bf00      	nop
 8009b90:	0800d4a9 	.word	0x0800d4a9
 8009b94:	0800d4ba 	.word	0x0800d4ba

08009b98 <__sflush_r>:
 8009b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	0716      	lsls	r6, r2, #28
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d454      	bmi.n	8009c52 <__sflush_r+0xba>
 8009ba8:	684b      	ldr	r3, [r1, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dc02      	bgt.n	8009bb4 <__sflush_r+0x1c>
 8009bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd48      	ble.n	8009c46 <__sflush_r+0xae>
 8009bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d045      	beq.n	8009c46 <__sflush_r+0xae>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bc0:	682f      	ldr	r7, [r5, #0]
 8009bc2:	6a21      	ldr	r1, [r4, #32]
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	d030      	beq.n	8009c2a <__sflush_r+0x92>
 8009bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	0759      	lsls	r1, r3, #29
 8009bce:	d505      	bpl.n	8009bdc <__sflush_r+0x44>
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bd6:	b10b      	cbz	r3, 8009bdc <__sflush_r+0x44>
 8009bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b0      	blx	r6
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	d106      	bne.n	8009bfa <__sflush_r+0x62>
 8009bec:	6829      	ldr	r1, [r5, #0]
 8009bee:	291d      	cmp	r1, #29
 8009bf0:	d82b      	bhi.n	8009c4a <__sflush_r+0xb2>
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c9c <__sflush_r+0x104>)
 8009bf4:	410a      	asrs	r2, r1
 8009bf6:	07d6      	lsls	r6, r2, #31
 8009bf8:	d427      	bmi.n	8009c4a <__sflush_r+0xb2>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6062      	str	r2, [r4, #4]
 8009bfe:	04d9      	lsls	r1, r3, #19
 8009c00:	6922      	ldr	r2, [r4, #16]
 8009c02:	6022      	str	r2, [r4, #0]
 8009c04:	d504      	bpl.n	8009c10 <__sflush_r+0x78>
 8009c06:	1c42      	adds	r2, r0, #1
 8009c08:	d101      	bne.n	8009c0e <__sflush_r+0x76>
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	b903      	cbnz	r3, 8009c10 <__sflush_r+0x78>
 8009c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c12:	602f      	str	r7, [r5, #0]
 8009c14:	b1b9      	cbz	r1, 8009c46 <__sflush_r+0xae>
 8009c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	d002      	beq.n	8009c24 <__sflush_r+0x8c>
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7ff fca0 	bl	8009564 <_free_r>
 8009c24:	2300      	movs	r3, #0
 8009c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c28:	e00d      	b.n	8009c46 <__sflush_r+0xae>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	4602      	mov	r2, r0
 8009c32:	1c50      	adds	r0, r2, #1
 8009c34:	d1c9      	bne.n	8009bca <__sflush_r+0x32>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0c6      	beq.n	8009bca <__sflush_r+0x32>
 8009c3c:	2b1d      	cmp	r3, #29
 8009c3e:	d001      	beq.n	8009c44 <__sflush_r+0xac>
 8009c40:	2b16      	cmp	r3, #22
 8009c42:	d11e      	bne.n	8009c82 <__sflush_r+0xea>
 8009c44:	602f      	str	r7, [r5, #0]
 8009c46:	2000      	movs	r0, #0
 8009c48:	e022      	b.n	8009c90 <__sflush_r+0xf8>
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	e01b      	b.n	8009c8a <__sflush_r+0xf2>
 8009c52:	690f      	ldr	r7, [r1, #16]
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	d0f6      	beq.n	8009c46 <__sflush_r+0xae>
 8009c58:	0793      	lsls	r3, r2, #30
 8009c5a:	680e      	ldr	r6, [r1, #0]
 8009c5c:	bf08      	it	eq
 8009c5e:	694b      	ldreq	r3, [r1, #20]
 8009c60:	600f      	str	r7, [r1, #0]
 8009c62:	bf18      	it	ne
 8009c64:	2300      	movne	r3, #0
 8009c66:	eba6 0807 	sub.w	r8, r6, r7
 8009c6a:	608b      	str	r3, [r1, #8]
 8009c6c:	f1b8 0f00 	cmp.w	r8, #0
 8009c70:	dde9      	ble.n	8009c46 <__sflush_r+0xae>
 8009c72:	6a21      	ldr	r1, [r4, #32]
 8009c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c76:	4643      	mov	r3, r8
 8009c78:	463a      	mov	r2, r7
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b0      	blx	r6
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	dc08      	bgt.n	8009c94 <__sflush_r+0xfc>
 8009c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	4407      	add	r7, r0
 8009c96:	eba8 0800 	sub.w	r8, r8, r0
 8009c9a:	e7e7      	b.n	8009c6c <__sflush_r+0xd4>
 8009c9c:	dfbffffe 	.word	0xdfbffffe

08009ca0 <_fflush_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	690b      	ldr	r3, [r1, #16]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b913      	cbnz	r3, 8009cb0 <_fflush_r+0x10>
 8009caa:	2500      	movs	r5, #0
 8009cac:	4628      	mov	r0, r5
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	b118      	cbz	r0, 8009cba <_fflush_r+0x1a>
 8009cb2:	6a03      	ldr	r3, [r0, #32]
 8009cb4:	b90b      	cbnz	r3, 8009cba <_fflush_r+0x1a>
 8009cb6:	f7ff fa4b 	bl	8009150 <__sinit>
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f3      	beq.n	8009caa <_fflush_r+0xa>
 8009cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc4:	07d0      	lsls	r0, r2, #31
 8009cc6:	d404      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009cc8:	0599      	lsls	r1, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cce:	f7ff fc46 	bl	800955e <__retarget_lock_acquire_recursive>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7ff ff5f 	bl	8009b98 <__sflush_r>
 8009cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cdc:	07da      	lsls	r2, r3, #31
 8009cde:	4605      	mov	r5, r0
 8009ce0:	d4e4      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	d4e1      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cea:	f7ff fc39 	bl	8009560 <__retarget_lock_release_recursive>
 8009cee:	e7dd      	b.n	8009cac <_fflush_r+0xc>

08009cf0 <__swhatbuf_r>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	460c      	mov	r4, r1
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	b096      	sub	sp, #88	@ 0x58
 8009cfc:	4615      	mov	r5, r2
 8009cfe:	461e      	mov	r6, r3
 8009d00:	da0d      	bge.n	8009d1e <__swhatbuf_r+0x2e>
 8009d02:	89a3      	ldrh	r3, [r4, #12]
 8009d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d08:	f04f 0100 	mov.w	r1, #0
 8009d0c:	bf14      	ite	ne
 8009d0e:	2340      	movne	r3, #64	@ 0x40
 8009d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d14:	2000      	movs	r0, #0
 8009d16:	6031      	str	r1, [r6, #0]
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	b016      	add	sp, #88	@ 0x58
 8009d1c:	bd70      	pop	{r4, r5, r6, pc}
 8009d1e:	466a      	mov	r2, sp
 8009d20:	f000 f848 	bl	8009db4 <_fstat_r>
 8009d24:	2800      	cmp	r0, #0
 8009d26:	dbec      	blt.n	8009d02 <__swhatbuf_r+0x12>
 8009d28:	9901      	ldr	r1, [sp, #4]
 8009d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d32:	4259      	negs	r1, r3
 8009d34:	4159      	adcs	r1, r3
 8009d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d3a:	e7eb      	b.n	8009d14 <__swhatbuf_r+0x24>

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b003      	add	sp, #12
 8009d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d58:	ab01      	add	r3, sp, #4
 8009d5a:	466a      	mov	r2, sp
 8009d5c:	f7ff ffc8 	bl	8009cf0 <__swhatbuf_r>
 8009d60:	9f00      	ldr	r7, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4639      	mov	r1, r7
 8009d66:	4630      	mov	r0, r6
 8009d68:	f7ff f8da 	bl	8008f20 <_malloc_r>
 8009d6c:	b948      	cbnz	r0, 8009d82 <__smakebuf_r+0x46>
 8009d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d72:	059a      	lsls	r2, r3, #22
 8009d74:	d4ee      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	f043 0302 	orr.w	r3, r3, #2
 8009d7e:	81a3      	strh	r3, [r4, #12]
 8009d80:	e7e2      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d82:	89a3      	ldrh	r3, [r4, #12]
 8009d84:	6020      	str	r0, [r4, #0]
 8009d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d8a:	81a3      	strh	r3, [r4, #12]
 8009d8c:	9b01      	ldr	r3, [sp, #4]
 8009d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d92:	b15b      	cbz	r3, 8009dac <__smakebuf_r+0x70>
 8009d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d98:	4630      	mov	r0, r6
 8009d9a:	f000 f81d 	bl	8009dd8 <_isatty_r>
 8009d9e:	b128      	cbz	r0, 8009dac <__smakebuf_r+0x70>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f043 0301 	orr.w	r3, r3, #1
 8009daa:	81a3      	strh	r3, [r4, #12]
 8009dac:	89a3      	ldrh	r3, [r4, #12]
 8009dae:	431d      	orrs	r5, r3
 8009db0:	81a5      	strh	r5, [r4, #12]
 8009db2:	e7cf      	b.n	8009d54 <__smakebuf_r+0x18>

08009db4 <_fstat_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d07      	ldr	r5, [pc, #28]	@ (8009dd4 <_fstat_r+0x20>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	f000 f955 	bl	800a070 <_fstat>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d102      	bne.n	8009dd0 <_fstat_r+0x1c>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	b103      	cbz	r3, 8009dd0 <_fstat_r+0x1c>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200014d0 	.word	0x200014d0

08009dd8 <_isatty_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d06      	ldr	r5, [pc, #24]	@ (8009df4 <_isatty_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f000 f94c 	bl	800a080 <_isatty>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_isatty_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_isatty_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	200014d0 	.word	0x200014d0

08009df8 <expf>:
 8009df8:	b508      	push	{r3, lr}
 8009dfa:	ed2d 8b02 	vpush	{d8}
 8009dfe:	eef0 8a40 	vmov.f32	s17, s0
 8009e02:	f000 f85f 	bl	8009ec4 <__ieee754_expf>
 8009e06:	eeb0 8a40 	vmov.f32	s16, s0
 8009e0a:	eeb0 0a68 	vmov.f32	s0, s17
 8009e0e:	f000 f829 	bl	8009e64 <finitef>
 8009e12:	b160      	cbz	r0, 8009e2e <expf+0x36>
 8009e14:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8009e54 <expf+0x5c>
 8009e18:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e20:	dd0a      	ble.n	8009e38 <expf+0x40>
 8009e22:	f7ff fb71 	bl	8009508 <__errno>
 8009e26:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8009e58 <expf+0x60>
 8009e2a:	2322      	movs	r3, #34	@ 0x22
 8009e2c:	6003      	str	r3, [r0, #0]
 8009e2e:	eeb0 0a48 	vmov.f32	s0, s16
 8009e32:	ecbd 8b02 	vpop	{d8}
 8009e36:	bd08      	pop	{r3, pc}
 8009e38:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009e5c <expf+0x64>
 8009e3c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e44:	d5f3      	bpl.n	8009e2e <expf+0x36>
 8009e46:	f7ff fb5f 	bl	8009508 <__errno>
 8009e4a:	2322      	movs	r3, #34	@ 0x22
 8009e4c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8009e60 <expf+0x68>
 8009e50:	6003      	str	r3, [r0, #0]
 8009e52:	e7ec      	b.n	8009e2e <expf+0x36>
 8009e54:	42b17217 	.word	0x42b17217
 8009e58:	7f800000 	.word	0x7f800000
 8009e5c:	c2cff1b5 	.word	0xc2cff1b5
 8009e60:	00000000 	.word	0x00000000

08009e64 <finitef>:
 8009e64:	ee10 3a10 	vmov	r3, s0
 8009e68:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009e6c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009e70:	bfac      	ite	ge
 8009e72:	2000      	movge	r0, #0
 8009e74:	2001      	movlt	r0, #1
 8009e76:	4770      	bx	lr

08009e78 <with_errnof>:
 8009e78:	b510      	push	{r4, lr}
 8009e7a:	ed2d 8b02 	vpush	{d8}
 8009e7e:	eeb0 8a40 	vmov.f32	s16, s0
 8009e82:	4604      	mov	r4, r0
 8009e84:	f7ff fb40 	bl	8009508 <__errno>
 8009e88:	eeb0 0a48 	vmov.f32	s0, s16
 8009e8c:	ecbd 8b02 	vpop	{d8}
 8009e90:	6004      	str	r4, [r0, #0]
 8009e92:	bd10      	pop	{r4, pc}

08009e94 <xflowf>:
 8009e94:	b130      	cbz	r0, 8009ea4 <xflowf+0x10>
 8009e96:	eef1 7a40 	vneg.f32	s15, s0
 8009e9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009e9e:	2022      	movs	r0, #34	@ 0x22
 8009ea0:	f7ff bfea 	b.w	8009e78 <with_errnof>
 8009ea4:	eef0 7a40 	vmov.f32	s15, s0
 8009ea8:	e7f7      	b.n	8009e9a <xflowf+0x6>
	...

08009eac <__math_uflowf>:
 8009eac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009eb4 <__math_uflowf+0x8>
 8009eb0:	f7ff bff0 	b.w	8009e94 <xflowf>
 8009eb4:	10000000 	.word	0x10000000

08009eb8 <__math_oflowf>:
 8009eb8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ec0 <__math_oflowf+0x8>
 8009ebc:	f7ff bfea 	b.w	8009e94 <xflowf>
 8009ec0:	70000000 	.word	0x70000000

08009ec4 <__ieee754_expf>:
 8009ec4:	ee10 2a10 	vmov	r2, s0
 8009ec8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8009ecc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009ed0:	d902      	bls.n	8009ed8 <__ieee754_expf+0x14>
 8009ed2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009ed6:	4770      	bx	lr
 8009ed8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009edc:	d106      	bne.n	8009eec <__ieee754_expf+0x28>
 8009ede:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800a018 <__ieee754_expf+0x154>
 8009ee2:	2900      	cmp	r1, #0
 8009ee4:	bf18      	it	ne
 8009ee6:	eeb0 0a67 	vmovne.f32	s0, s15
 8009eea:	4770      	bx	lr
 8009eec:	484b      	ldr	r0, [pc, #300]	@ (800a01c <__ieee754_expf+0x158>)
 8009eee:	4282      	cmp	r2, r0
 8009ef0:	dd02      	ble.n	8009ef8 <__ieee754_expf+0x34>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	f7ff bfe0 	b.w	8009eb8 <__math_oflowf>
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	da05      	bge.n	8009f08 <__ieee754_expf+0x44>
 8009efc:	4a48      	ldr	r2, [pc, #288]	@ (800a020 <__ieee754_expf+0x15c>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d902      	bls.n	8009f08 <__ieee754_expf+0x44>
 8009f02:	2000      	movs	r0, #0
 8009f04:	f7ff bfd2 	b.w	8009eac <__math_uflowf>
 8009f08:	4a46      	ldr	r2, [pc, #280]	@ (800a024 <__ieee754_expf+0x160>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8009f10:	d952      	bls.n	8009fb8 <__ieee754_expf+0xf4>
 8009f12:	4a45      	ldr	r2, [pc, #276]	@ (800a028 <__ieee754_expf+0x164>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009f1a:	d834      	bhi.n	8009f86 <__ieee754_expf+0xc2>
 8009f1c:	4b43      	ldr	r3, [pc, #268]	@ (800a02c <__ieee754_expf+0x168>)
 8009f1e:	4413      	add	r3, r2
 8009f20:	ed93 7a00 	vldr	s14, [r3]
 8009f24:	4b42      	ldr	r3, [pc, #264]	@ (800a030 <__ieee754_expf+0x16c>)
 8009f26:	4413      	add	r3, r2
 8009f28:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009f2c:	f1c1 0201 	rsb	r2, r1, #1
 8009f30:	edd3 7a00 	vldr	s15, [r3]
 8009f34:	1a52      	subs	r2, r2, r1
 8009f36:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009f3a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009f3e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800a034 <__ieee754_expf+0x170>
 8009f42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a038 <__ieee754_expf+0x174>
 8009f46:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009f4a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800a03c <__ieee754_expf+0x178>
 8009f4e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009f52:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a040 <__ieee754_expf+0x17c>
 8009f56:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009f5a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800a044 <__ieee754_expf+0x180>
 8009f5e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009f62:	eef0 6a40 	vmov.f32	s13, s0
 8009f66:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009f6a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8009f6e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009f72:	bb92      	cbnz	r2, 8009fda <__ieee754_expf+0x116>
 8009f74:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009f78:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009f7c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009f80:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009f84:	4770      	bx	lr
 8009f86:	4b30      	ldr	r3, [pc, #192]	@ (800a048 <__ieee754_expf+0x184>)
 8009f88:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800a04c <__ieee754_expf+0x188>
 8009f8c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800a050 <__ieee754_expf+0x18c>
 8009f90:	4413      	add	r3, r2
 8009f92:	edd3 7a00 	vldr	s15, [r3]
 8009f96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f9a:	eeb0 7a40 	vmov.f32	s14, s0
 8009f9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009fa2:	ee17 2a90 	vmov	r2, s15
 8009fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009faa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009fae:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800a054 <__ieee754_expf+0x190>
 8009fb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009fb6:	e7be      	b.n	8009f36 <__ieee754_expf+0x72>
 8009fb8:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8009fbc:	d20b      	bcs.n	8009fd6 <__ieee754_expf+0x112>
 8009fbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800a058 <__ieee754_expf+0x194>
 8009fc2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009fc6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fce:	dd02      	ble.n	8009fd6 <__ieee754_expf+0x112>
 8009fd0:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009fd4:	4770      	bx	lr
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	e7af      	b.n	8009f3a <__ieee754_expf+0x76>
 8009fda:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009fde:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8009fe2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009fe6:	bfb8      	it	lt
 8009fe8:	3264      	addlt	r2, #100	@ 0x64
 8009fea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009ff2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009ff6:	ee17 3a90 	vmov	r3, s15
 8009ffa:	bfab      	itete	ge
 8009ffc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a000:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a004:	ee00 3a10 	vmovge	s0, r3
 800a008:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800a05c <__ieee754_expf+0x198>
 800a00c:	bfbc      	itt	lt
 800a00e:	ee00 3a10 	vmovlt	s0, r3
 800a012:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a016:	4770      	bx	lr
 800a018:	00000000 	.word	0x00000000
 800a01c:	42b17217 	.word	0x42b17217
 800a020:	42cff1b5 	.word	0x42cff1b5
 800a024:	3eb17218 	.word	0x3eb17218
 800a028:	3f851591 	.word	0x3f851591
 800a02c:	0800d4d4 	.word	0x0800d4d4
 800a030:	0800d4cc 	.word	0x0800d4cc
 800a034:	3331bb4c 	.word	0x3331bb4c
 800a038:	b5ddea0e 	.word	0xb5ddea0e
 800a03c:	388ab355 	.word	0x388ab355
 800a040:	bb360b61 	.word	0xbb360b61
 800a044:	3e2aaaab 	.word	0x3e2aaaab
 800a048:	0800d4dc 	.word	0x0800d4dc
 800a04c:	3fb8aa3b 	.word	0x3fb8aa3b
 800a050:	3f317180 	.word	0x3f317180
 800a054:	3717f7d1 	.word	0x3717f7d1
 800a058:	7149f2ca 	.word	0x7149f2ca
 800a05c:	0d800000 	.word	0x0d800000

0800a060 <_close>:
 800a060:	4b02      	ldr	r3, [pc, #8]	@ (800a06c <_close+0xc>)
 800a062:	2258      	movs	r2, #88	@ 0x58
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	f04f 30ff 	mov.w	r0, #4294967295
 800a06a:	4770      	bx	lr
 800a06c:	200014d0 	.word	0x200014d0

0800a070 <_fstat>:
 800a070:	4b02      	ldr	r3, [pc, #8]	@ (800a07c <_fstat+0xc>)
 800a072:	2258      	movs	r2, #88	@ 0x58
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	f04f 30ff 	mov.w	r0, #4294967295
 800a07a:	4770      	bx	lr
 800a07c:	200014d0 	.word	0x200014d0

0800a080 <_isatty>:
 800a080:	4b02      	ldr	r3, [pc, #8]	@ (800a08c <_isatty+0xc>)
 800a082:	2258      	movs	r2, #88	@ 0x58
 800a084:	601a      	str	r2, [r3, #0]
 800a086:	2000      	movs	r0, #0
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200014d0 	.word	0x200014d0

0800a090 <_lseek>:
 800a090:	4b02      	ldr	r3, [pc, #8]	@ (800a09c <_lseek+0xc>)
 800a092:	2258      	movs	r2, #88	@ 0x58
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	4770      	bx	lr
 800a09c:	200014d0 	.word	0x200014d0

0800a0a0 <_read>:
 800a0a0:	4b02      	ldr	r3, [pc, #8]	@ (800a0ac <_read+0xc>)
 800a0a2:	2258      	movs	r2, #88	@ 0x58
 800a0a4:	601a      	str	r2, [r3, #0]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	4770      	bx	lr
 800a0ac:	200014d0 	.word	0x200014d0

0800a0b0 <_write>:
 800a0b0:	4b02      	ldr	r3, [pc, #8]	@ (800a0bc <_write+0xc>)
 800a0b2:	2258      	movs	r2, #88	@ 0x58
 800a0b4:	601a      	str	r2, [r3, #0]
 800a0b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0ba:	4770      	bx	lr
 800a0bc:	200014d0 	.word	0x200014d0

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
